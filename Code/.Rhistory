knitr::opts_chunk$set(echo = TRUE)
# OR STEPWISE
getwd()
proc_keyword("Wirtschaftskrise","AT")
library(trendecon)
proc_keyword("Wirtschaftskrise","AT")
keyword <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos") #Insolvenz
proc_keyword(keyword,"AT")
proc_keyword(Wirtschaftskrise,"AT")
geo ="AT"
proc_keyword(Wirtschaftskrise,"AT")
proc_keyword(Wirtschaftskrise,"AT")
proc_keyword(Wirtschaftskrise,"AT")
# OR STEPWISE
getwd()
# OR STEPWISE
getwd()
# OR STEPWISE
getwd()
setwd("/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT")
proc_keyword(Wirtschaftskrise,"AT")
proc_keyword(Wirtschaftskrise,"at")
proc_keyword(Wirtschaftskrise,"ch")
proc_keyword(Wirtschaftskrise,"at")
proc_keyword(arbeitslos,"at")
getOption("path_trendecon")
path_trendecon
?path_trendecon
options(path_trendecon = "~/path/to/base/dir")
path_trendecon
x <- path_trendecon
View(x)
path_trendecon("/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT")
proc_keyword(arbeitslos,"at")
path_raw("/raw")
# OR STEPWISE
getwd()
setwd(path_trendecon)
options(path_trendecon = "~/path/to/base/dir")
# OR STEPWISE
getwd()
proc_keyword(arbeitslos,"at")
proc_keyword(arbeitslos,"at")
x <- options(path_trendecon = "~/path/to/base/dir")
View(x)
options(path_raw = "~/path/to/base/dir")
proc_keyword(arbeitslos,"at")
View(x)
options(path_raw = "~/raw")
proc_keyword(arbeitslos,"at")
# OR STEPWISE
getwd()
source('~/.active-rstudio-document', echo=TRUE)
R.utils::setOption
?R.utils::setOption
? fs::path
?normalizePath
"."
file.path(R.home("bin"), "R")
# OR STEPWISE
getwd()
proc_keyword(arbeitslos,"at")
path_trendecon <- function(...) {
base <- getOption("path_trendecon", default = normalizePath(".."))
fs::path(base, ...)
}
proc_keyword(arbeitslos,"at")
path_trendecon <- function(...) {
base <- getOption("path_trendecon", default = normalizePath("."))
fs::path(base, ...)
}
library(trendecon)
library(trendecon)
keyword <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos") #Insolvenz
geo ="AT"
proc_keyword(arbeitslos,"at")
#lapply(keywords, proc_keyword) # do stepwise?
proc_keyword(arbeitslos,"at")
#lapply(keywords, proc_keyword) # do stepwise?
proc_keyword(arbeitslos,"AT")
#lapply(keywords, proc_keyword) # do stepwise?
proc_keyword("arbeitslos","AT")
path_raw()
print(path_raw("arbeitslos","AT"))
print(path_draw("arbeitslos","AT"))
path_trendecon("arbeitslos","AT")
#lapply(keywords, proc_keyword) # do stepwise?
proc_keyword("arbeitslos","AT")
getwd()
setwd("~/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT/Code")
setwd("~/")
getwd()
setwd("~/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT")
#lapply(keywords, proc_keyword) # do stepwise?
proc_keyword("arbeitslos","AT")
# OR STEPWISE
getwd()
setwd("~/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT/raw")
#lapply(keywords, proc_keyword) # do stepwise?
proc_keyword("arbeitslos","AT")
setwd("~/")
getwd()
#lapply(keywords, proc_keyword) # do stepwise?
proc_index("arbeitslos","AT")
getwd()
setwd("/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT")
# OR STEPWISE
getwd()
# OR STEPWISE
getwd()
setwd("/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT")
setwd("/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA")
setwd("~/")
setwd("~/")
getwd()
setwd("/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA")
getwd
getwd()
options(path_trendecon = "~/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT")
proc_keyword("arbeitslos","AT")
options(path_raw = "~/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT/raw")
proc_keyword("arbeitslos","AT")
options(path_draw = "~/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT/raw")
proc_keyword("arbeitslos","AT")
getwd()
setwd("~/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT/Code")
proc_keyword("arbeitslos","AT")
proc_keyword("Kurzarbeit","AT")
file.path()
R.home()
dirname(path)
dirname(path_trendecon)
dirname(getwd())
proc_keyword("Kurzarbeit","AT")
dirname(dirname(Path))
path_trendecon = "~/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT"
path_raw = "~/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT/raw"
proc_keyword("Kurzarbeit","AT")
path_draw = "~/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT/raw"
proc_keyword("Kurzarbeit","AT")
knitr::opts_chunk$set(echo = TRUE)
library(trendecon)
#DO TOMORROW!
proc_keyword_init("Insolvenz","AT")#bankruptcy
#' Download latest data
#'
#' Downloads latest daily, weekly, and monthly data.
#'
#' @inheritParams ts_gtrends_windows
#' @param keyword A single keyword for which to process the data.
#' @param geo A character vector denoting the geographic region.
#'     Default is "CH".
#' @seealso [ts_gtrends_windows]
#'
#' @section Daily data:
#'     Downloads data for the last 90 days in two windows, with the same end
#'    date (today) but start date shifted by one day. File saved as
#'    `{keyword}_d_{today}.csv` in folder `data-raw/indicator_raw`.
#'
#' @section Weekly data:
#'     Downloads weekly data for two windows, first window starts 1 year ago,
#'     second window offset by one week, both windows end today. File saved
#'     as `{keyword}_w_{today}.csv` in folder `data-raw/indicator_raw`.
#'
#' @section Monthly data:
#'     Downloads monthly data for two windows, first window starts at
#'     2006-01-01, second window offset by  1 month, both windows end today.
#'     File saved as `{keyword}_m_{today}.csv` in folder
#'     `data-raw/indicator_raw`.
#'
proc_keyword_latest <- function(keyword = "Insolvenz",
geo = "AT",
n_windows = 12) {
today <- Sys.Date()
enhance_keyword <- function(data, keyword, geo, suffix){
old <- read_keyword(keyword, geo, suffix) %>%
mutate(n = as.integer(n))
new <- aggregate_windows(data)
write_keyword(aggregate_averages(old, new), keyword, geo, suffix)
}
message("Downloading keyword: ", keyword)
message("Downloading hourly data")
h <- ts_gtrends(
keyword = keyword,
geo = geo,
time = "now 7-d",
wait = 20,
retry = 20,
)
h <- h %>%
group_by(time) %>%
summarize(value = mean(value, na.rm=TRUE)) %>%
mutate(n = 1)
# NOTE: this data is intentionally not re-written on every update, not aggregated with the rest
write_keyword(h, keyword, geo, "h")
message("Downloading daily data")
d <- ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(today, length.out = 2, by = "-90 days")[2],
stepsize = "1 day", windowsize = "3 months",
n_windows = n_windows, wait = 20, retry = 20,
prevent_window_shrinkage = FALSE
)
enhance_keyword(d, keyword, geo, "d")
message("Downloading weekly data")
w <- ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(today, length.out = 2, by = "-1 year")[2],
stepsize = "1 week", windowsize = "1 year",
n_windows = n_windows, wait = 20, retry = 20,
prevent_window_shrinkage = FALSE
)
enhance_keyword(w, keyword, geo, "w")
message("Downloading monthly data")
m <- ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = "2006-01-01",
stepsize = "1 month", windowsize = "20 years",
n_windows = n_windows, wait = 20, retry = 20,
prevent_window_shrinkage = FALSE
)
enhance_keyword(m, keyword, geo, "m")
}
proc_keyword_latest("arbeitslos","At")
proc_keyword(arbeitslos,"at")
proc_keyword("arbeitslos","AT")
getwd()
proc_keyword("arbeitslos","AT")
# OR STEPWISE
getwd()
proc_keyword("arbeitslos","AT")
proc_keyword("arbeitslos","AT")
proc_keyword("arbeitslos","AT")
#' Processes the data for a single keyword.
#'
#' Processing includes
#' - donwloading the latest data
#' - aggregating
#' - combining
#' - seasonal adjustment
#' @param keyword A single keyword for which to process the data.
#' @param geo A character vector denoting the geographic region.
#'     Default is "CH".
#' @param n_windows Number of windows, passed to [ts_gtrends_windows], used
#'     when downloading the latest data.
#'
#' @seealso[ts_gtrends_windows]
#' @export
proc_keyword <- function(keyword = "Insolvenz",
geo = "AT",
n_windows = 2) {
stop_if_no_data(keyword, geo)
previous_google_date <- check_when_last_processed(keyword, geo)
if (previous_google_date == .latest_google_date) {
message("keyword ", keyword, " already processed today. skipping.")
return(TRUE)
} else {
proc_keyword_latest(keyword = keyword, geo = geo, n_windows = n_windows)
proc_combine_freq(keyword = keyword, geo = geo)
proc_seas_adj(keyword = keyword, geo = geo)
# store globally: next proc_keyword() run will only update if newer
.latest_google_date <<- latest_google_date(keyword, geo)
return(invisible(TRUE))
}
}
stop_if_no_data <- function(keyword, geo) {
files_indicator <- grep(keyword,
list.files(path_raw(tolower(geo))),
value = TRUE,
fixed = TRUE)
files_indicator_raw <- grep(keyword,
list.files(path_draws(tolower(geo))),
value = TRUE,
fixed = TRUE)
if (length(files_indicator) == 0 & (length(files_indicator_raw) == 0)) {
stop("No existing files found for keyword '", keyword, "' Have you run proc_keyword_init()?")
}
}
check_when_last_processed <- function(keyword, geo) {
if (!exists(".latest_google_date")) .latest_google_date <<- as.Date("2099-01-01")
previous_google_date <- latest_google_date(keyword, geo)
if (previous_google_date > .latest_google_date) .latest_google_date <<- previous_google_date
message(".latest_google_date: ", .latest_google_date)
message("previous_google_date: ", previous_google_date)
return(previous_google_date)
}
latest_google_date <- function(keyword, geo) {
if (fs::file_exists(path_keyword(keyword, geo, "sa"))) {
max(read_keyword(keyword, geo, "sa")$time)
} else {
as.Date("1900-01-01")
}
}
proc_keyword("arbeitslos","AT")
# proc functions work on the file system
#' Build paths from base directory
#'
#' The base directory is obtained by `getOption("path_trendecon")`. If the
#' option is not present, the base directory defaults to the parent directory
#' of the current working directory. To set the option, run
#'
#'     options(path_trendecon = "~/path/to/base/dir")
#'
#' @param ... Character vector of subdirectories relative to the base
#'     directory.
#'
#' @return The full path to the base directory, or (if provided as a
#' parameter), the path to the subdirectory.
#' @seealso [R.utils::setOption]
#' @export
#' @examples
#' path_trendecon("data-raw")
#'
path_trendecon <- function(...) {
base <- getOption("path_trendecon", default = normalizePath("."))
fs::path(base, ...)
}
# all subdirectoryies are specified here. Don't mention any subdirs in the code
# dir to store the individual draws. Not stricly needed but useful for research.
path_draws <- function(...) {
path_trendecon("indicator_raw", ...)
}
# dir to store the raw data
path_raw <- function(...) {
path_trendecon("raw", ...)
}
# dir to store the daily data for download. Uses this name, because we link
# there from the website.
# FIXME set up a user friendly system to download series for DE AT CH at all freqs.
path_daily <- function(...) {
path_trendecon("daily", ...)
}
path_data <- function(...) {
path_trendecon("data", ...)
}
# #' Build paths from `data-raw` directory
# #'
# #' @param ... Character vector of subdirectories relative to the `data-raw`
# #'     directory.
# #'
# #' @return The full path to the `data-raw` directory, or (if provided as a
# #' parameter), the path to the subdirectory.
# #' @seealso [path_trendecon]
# #' @export
# path_data_raw <- function(...) {
#   path_trendecon(...)
# }
# #' Build paths from `data` directory
# #'
# #' @param ... Character vector of subdirectories relative to the `data`
# #'     directory.
# #'
# #' @return The full path to the `data` directory, or (if provided as a
# #' parameter), the path to the subdirectory.
# #' @seealso [path_trendecon]
# #' @export
# path_data <- function(...) {
#   message("deprecated use of path_data()")
#   path_trendecon("..", "data", ...)
# }
create_dir_if_needed <- function(x) {
if (!dir.exists(x)) {
message("create", x)
dir.create(x, recursive = TRUE)
}
x
}
create_data_dirs <- function(){
create_dir_if_needed(path_data())
create_dir_if_needed(path_raw())
}
#' Build path to indicator data file
#'
#' Builds path to indicator files of the form
#' `/{base_dir}/data-raw/indicator/{keyword}_{suffix}.csv`.
#'
#' @param keyword Keyword (character vector) for which to construct the path
#'     to the indicator.
#' @param geo geographical area
#' @param suffix Character vector for file suffix.
#' @seealso [path_trendecon]
#' @export
path_keyword <- function(keyword, geo = "AT", suffix = "sa") {
normalizePath(path_raw(tolower(geo), paste0(keyword, "_", suffix, ".csv")), mustWork = FALSE)
}
# read_keyword("Insolvenz")
read_keyword <- function(keyword, geo = "AT", suffix = "sa") {
readr::read_csv(path_keyword(keyword, geo, suffix), col_types = cols())
}
#' Read keyword indicator data from disk
#'
#' Reads keyword indicators from csv files from
#' `/{base_dir}/data-raw/indicator/{keyword}_{suffix}.csv` where `{keyword}`
#' is one of the keywords in parameter `keywords`.
#'
#' @param keywords A vector of keywords.
#' @param geo geographical area.
#' @param suffix Suffix in file names, defaults to `"sa"`. Common for all
#'     keywords.
#' @param id Category id, defaults to `NULL`.
#'
#' @return A tibble with columns `keyword`, `time`, `value`.
#' @export
read_keywords <- function(keywords, geo = "AT", suffix = "sa", id = NULL) {
read_keywords_one <- function(keyword) {
ans <-
read_keyword(keyword, geo = geo, suffix = suffix) %>%
mutate(keyword = keyword) %>%
select(keyword, id, time, value)
if (!is.null(id)) {
ans <- filter(ans, id == !!id) %>%
select(-id)
}
ans
}
bind_rows(lapply(keywords, read_keywords_one))
}
#' Write csv file for keyword indicator
#'
#' Writes csv file for keyword indicator to
#' `/{base_dir}/data-raw/indicator/{keyword}_{suffix}.csv`.
#'
#' @param x Tibble of data to write to file.
#' @param suffix Character vector for file suffix, defaults to `"sa"`.
#' @inheritParams path_keyword
#' @seealso [path_keyword]
#' @export
write_keyword <- function(x, keyword, geo, suffix = "sa") {
path <- path_keyword(keyword, geo, suffix)
create_dir_if_needed(dirname(path))
write_csv(x, path)
}
proc_keyword("arbeitslos","AT")
View(path_raw)
proc_keyword("arbeitslos","AT")
View(proc_keyword_latest)
data <- read.csv("https://raw.githubusercontent.com/trendecon/data/master/data/ch/trendecon_sa.csv")
tsbox::ts_plot(data, title = "Switzerland")
data <- read.csv("https://raw.githubusercontent.com/trendecon/data/master/data/de/trendecon_sa.csv")
tsbox::ts_plot(data, title = "Germany")
data <- read.csv("https://raw.githubusercontent.com/trendecon/data/master/data/at/trendecon_sa.csv")
tsbox::ts_plot(data, title = "Austria")
knitr::opts_chunk$set(echo = TRUE)
lapply(keywords, proc_keyword)
keywords <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos", "Insolvenz")
lapply(keywords, proc_keyword)
View(data)
View(data)
wk <- filter(data,data$keyword =="Wirtschaftskrise")
adf.test(wk$value)
ts_plot(wk)
ka <- filter(data,data$keyword =="Kurzarbeit")
adf.test(ka$value)
ts_plot(ka)
gtrendecon::proc_all()
library(trendecon)
