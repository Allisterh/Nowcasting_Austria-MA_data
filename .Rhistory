RMSE_OLS_OOS    <- sqrt(mean(error_OLS^2))
RMSE_OLS_OOS
MSE_OLS <- mean(error_OLS^2)
MSE_OLS
# forecast pred on newly data how do i incporpare that???
colnames(Google_AT_qtrly) <- c("Date_q","time","google")
x <- predict(expanding_OLS[[1]][[51]],Google_AT_qtrly[64:65,]) # used last estimated model ...
error_x  <- as.numeric(x - Google_AT_qtrly$google[64:65])
MAE_OLS_OOS <- mean(abs(error_x))
MAE_OLS_OOS
RMSE_OLS_OOS    <- sqrt(mean(error_x^2))
RMSE_OLS_OOS
MSE_OLS <- mean(error_x^2)
MSE_OLS
RMSE_OLS_OOS
RMSE_OLS_OOS
MAE_OLS_OOS
RMSE_OLS_OOS    <- sqrt(mean(error_x^2))
RMSE_OLS_OOS
MSE_OLS <- mean(error_x^2)
MSE_OLS
MAE_OLS_OOS
RMSE_OLS_OOS
MAE_OLS_OOS
pred <- as.ts(pred, start=c(2009,1), end = c(2021,3), frequency = 4)
rss <- sum((pred - Data[,"gdp"]) ^ 2)  ## residual sum of squares
63-51
actual <- Data[12:63,"gdp"]
actual <- Data[13:63,"gdp"]
rss <- sum((pred - actual) ^ 2)  ## residual sum of squares
rss <- sum((pred - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
rsq
# different data aggregation?
# maybe policyy uncertainty index
# unemployment and inflation VAR
ctrl <- trainControl(method = "LOOCV")
?trainControl
library(caret)
# different data aggregation?
# maybe policyy uncertainty index
# unemployment and inflation VAR
ctrl <- trainControl(method = "LOOCV")
model2_CV <- train(gdo ~ cci, data = Data, method = "lm", trControl = ctrl)
model2_CV <- train(gdp ~ cci, data = Data, method = "lm", trControl = ctrl)
print(model1_CV)
print(model2_CV)
model1_CV <- train(gdp ~ lag(gdp), data = Data, method = "lm", trControl = ctrl)
print(model1_CV)
model1_CV <- train(gdp ~ lag(gdp), data = Data, method = "lm", trControl = ctrl)
model2_CV <- train(gdp ~ cci, data = Data, method = "lm", trControl = ctrl)
model2_CV <- train(gdp ~ cci, data = Data, method = "lm", trControl = ctrl)
print(model2_CV)
model3_CV <- train(gdp ~ google, data = Data, method = "lm", trControl = ctrl)
model3_CV <- train(gdp ~ google, data = Data, method = "lm", trControl = ctrl)
print(model3_CV)
model4_CV <- train(gdp ~ lag(gdp) + cci, data = Data, method = "lm", trControl = ctrl)
Data_lag <- Data
View(Data_lag)
Data_lag$gdp_lag <- lag(Data_lag$gdp)
View(Data_lag)
# lag problem again... easiest prob do to new data frame and add it as a variables
model1_CV <- train(gdp ~ gdp_lag, data = Data_lag, method = "lm", trControl = ctrl)
# lag problem again... easiest prob do to new data frame and add it as a variables
model1_CV <- train(gdp ~ gdp_lag, data = Data_lag[2:63,], method = "lm", trControl = ctrl)
# lag problem again... easiest prob do to new data frame and add it as a variables
model1_CV <- train(gdp ~ gdp_lag, data = Data[2:63,], method = "lm", trControl = ctrl)
Data$gdp_lag <- lag(Data_lag$gdp)
Data$gdp_lag <- lag(Data$gdp)
# lag problem again... easiest prob do to new data frame and add it as a variables
model1_CV <- train(gdp ~ gdp_lag, data = Data[2:63,], method = "lm", trControl = ctrl)
# lag problem again... easiest prob do to new data frame and add it as a variables
model1_CV <- train(gdp ~ gdp_lag, data = Data[2:63,], method = "lm", trControl = ctrl)
print(model1_CV)
model4_CV <- train(gdp ~ lag(gdp) + cci, data = Data[2:63,], method = "lm", trControl = ctrl)
model4_CV <- train(gdp ~ gdp_lag + cci, data = Data[2:63,], method = "lm", trControl = ctrl)
model4_CV <- train(gdp ~ gdp_lag + cci, data = Data[2:63,], method = "lm", trControl = ctrl)
print(model4_CV)
model5_CV <- train(gdp ~ gdp_lag + google, data = Data[2:63,], method = "lm", trControl = ctrl)
model5_CV <- train(gdp ~ gdp_lag + google, data = Data[2:63,], method = "lm", trControl = ctrl)
print(model5_CV)
model6_CV <- train(gdp ~ gdp_lag + google + cci, data = Data[2:63,], method = "lm", trControl = ctrl)
model6_CV <- train(gdp ~ gdp_lag + google + cci, data = Data[2:63,], method = "lm", trControl = ctrl)
print(model6_CV)
View(Data)
expanding_OLS <- expanding_window_OLS(Data[2:63,], dep_var, start = 13)
pred <- do.call(rbind.data.frame, expanding_OLS[[2]]) # NAS wegen lag!
View(pred)
### error in and OOS
error_OLS <- expanding_OLS[[4]]
error_OLS <-error_OLS[!is.na(error_OLS)]
MAE_OLS_OOS <- mean(abs(error_OLS))
MAE_OLS_OOS
RMSE_OLS_OOS  <- sqrt(mean(error_OLS^2))
RMSE_OLS_OOS
MSE_OLS <- mean(error_OLS^2)
MSE_OLS
model = gdp ~ gdp_lag + google
expanding_OLS <- expanding_window_OLS(Data[2:63,], dep_var, start = 13)
model = gdp ~ gdp_lag + google
expanding_OLS <- expanding_window_OLS(Data[2:63,], dep_var, start = 13)
model = gdp ~ gdp_lag + cci + google
expanding_OLS <- expanding_window_OLS(Data[2:63,], dep_var, start = 13)
model = gdp ~ gdp_lag + cci
expanding_OLS <- expanding_window_OLS(Data[2:63,], dep_var, start = 13)
model = gdp ~ gdp_lag + google
expanding_OLS <- expanding_window_OLS(Data[2:63,], dep_var, start = 13)
model = gdp ~ gdp_lag + google
expanding_OLS <- expanding_window_OLS(Data[2:63,], dep_var, start = 13)
# different data aggregation?
# maybe policyy uncertainty index
# unemployment and inflation VAR
model = gdp ~ gdp_lag + cci + google
expanding_OLS <- expanding_window_OLS(Data[2:63,], dep_var, start = 13)
model = gdp ~ google
expanding_OLS <- expanding_window_OLS(Data, dep_var, start = 13)
pred <- do.call(rbind.data.frame, expanding_OLS[[2]])
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred
Date_q_pred <- Date_q[13:63]
pred <- as.ts(pred, start=c(2009,1), end = c(2021,3), frequency = 4)
ts.plot(pred)
model = gdp ~ cci
expanding_OLS <- expanding_window_OLS(Data, dep_var, start = 13)
expanding_OLS <- expanding_window_OLS(Data, dep_var, start = 13)
pred <- do.call(rbind.data.frame, expanding_OLS[[2]])
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred
Date_q_pred <- Date_q[13:63]
pred <- as.ts(pred, start=c(2009,1), end = c(2021,3), frequency = 4)
ts.plot(pred)
dep_var <- "gdp"
model = gdp ~ gdp_lag
expanding_OLS <- expanding_window_OLS(Data[2:63,], dep_var, start = 13)
#predictions
pred <- do.call(rbind.data.frame, expanding_OLS[[2]]) # NAS wegen lag!
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred
Date_q_pred <- Date_q[13:63]
pred <- as.ts(pred, start=c(2009,1), end = c(2021,3), frequency = 4)
rownames(pred) <- Date_q_pred
rownames(pred) <- Date_q_pred[2:51]
Date_q_pred <- Date_q[13:63]
pred <- as.ts(pred, start=c(2009,1), end = c(2021,3), frequency = 4)
ts.plot(pred)
dep_var <- "gdp"
model = gdp ~ gdp_lag
#predictions
pred <- do.call(rbind.data.frame, expanding_OLS[[2]]) # NAS wegen lag!
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred[2:51]
Date_q_pred <- Date_q[13:63]
pred <- as.ts(pred, start=c(2009,1), end = c(2021,3), frequency = 4)
view(pred)
pred <- as.ts(pred, start=c(2009,2), end = c(2021,3), frequency = 4)
ts.plot(pred)
view(pred)
ts.plot(pred)
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_OLS <- expanding_OLS[[3]]
final_resid_OLS <- resid_OLS[[length(resid_OLS)]]
MSE_OLS_IS    <- sqrt(mean(final_resid_OLS^2))
MSE_OLS_IS
dep_var <- "gdp"
model = gdp ~ gdp_lag
expanding_OLS <- expanding_window_OLS(Data[2:63,], dep_var, start = 13)
#predictions
pred <- do.call(rbind.data.frame, expanding_OLS[[2]]) # NAS wegen lag!
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred[2:51]
Date_q_pred <- Date_q[13:63]
pred <- as.ts(pred, start=c(2009,2), end = c(2021,3), frequency = 4)
ts.plot(pred)
### error in and OOS
error_OLS <- expanding_OLS[[4]]
error_OLS <-error_OLS[!is.na(error_OLS)]
MAE_OLS_OOS <- mean(abs(error_OLS))
MAE_OLS_OOS
RMSE_OLS_OOS  <- sqrt(mean(error_OLS^2))
RMSE_OLS_OOS
MSE_OLS <- mean(error_OLS^2)
MSE_OLS
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_OLS <- expanding_OLS[[3]]
final_resid_OLS <- resid_OLS[[length(resid_OLS)]]
RMSE_OLS_IS    <- sqrt(mean(final_resid_OLS^2))
RMSE_OLS_IS
library(readr)
library(readxl)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tseries)
library(forecast)
library(vars)
library(GGally)
library(Metrics)
library(caret)
AR_4 <- Arima(Data_train[,"gdp"], order=c(4,0,0))
summary(AR_4)
y_train <- forecast(AR_4, h = 3)$fitted # We make a forecast one hour ahead and we extract the fitted values from the object forecast.
x_train <- Data_train[,"gdp"]
rss <- sum((y_train - x_train) ** 2)
tss <- sum((x_train - mean(x_train)) ** 2)
R_squared <- 1 - rss/tss
paste(c("R-squared:", round(R_squared, 4)))
y_pred <- forecast(Data_test[,"gdp"], model = AR_4, h=3)$fitted # We call the forecast function passing the testing data through the ARIMA model fitted with the training data and we extract the fitted values.
y_test <- Data_test[,"gdp"]
sd_test <- sd(y_test)
RMSE <- rmse(y_test, y_pred)
MAE <- mae(y_test, y_pred)
rss <- sum((y_test - y_pred) ** 2)
tss <- sum((y_test - mean(y_test)) ** 2)
R_squared <- 1 - rss/tss
R_squared
RMSE
plot(forecast(y_pred,h=3))
Data$gdp_lag2
Data$gdp_lag2 <- lag(Data$gdp,p=2)
View(Data)
Data$gdp_lag2 <- lag(Data$gdp_lag)
View(Data_lag)
Data$gdp_lag2 <- lag(Data$gdp_lag)
View(Data)
dep_var <- "gdp"
model = gdp ~ gdp_lag + gdp_lag2
expanding_OLS <- expanding_window_OLS(Data[3:63,], dep_var, start = 13)
#predictions
pred <- do.call(rbind.data.frame, expanding_OLS[[2]]) # NAS wegen lag!
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred[2:51]
Date_q_pred <- Date_q[13:63]
rownames(pred) <- Date_q_pred[3:51]
Date_q_pred <- Date_q[13:63]
pred <- as.ts(pred, start=c(2009,2), end = c(2021,3), frequency = 4)
ts.plot(pred)
### error in and OOS
error_OLS <- expanding_OLS[[4]]
error_OLS <-error_OLS[!is.na(error_OLS)]
MAE_OLS_OOS <- mean(abs(error_OLS))
MAE_OLS_OOS
RMSE_OLS_OOS  <- sqrt(mean(error_OLS^2))
RMSE_OLS_OOS
MSE_OLS <- mean(error_OLS^2)
MSE_OLS
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_OLS <- expanding_OLS[[3]]
RMSE_OLS_IS    <- sqrt(mean(final_resid_OLS^2))
RMSE_OLS_IS
Yselect <- VARselect(Data[,4:6],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag <- Yselect$selection[1]  # AiC, Hq auch 2 , SC auch
lag
Yselect <- VARselect(Data[,1:3],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag <- Yselect$selection[1]  # AiC, Hq auch 2 , SC auch
lag
VAR_est <- VAR(y = Data[,4:6], p = lag)
summary(VAR_est$varresult)
library(Metrics)
rmse(Data[,4:6],forecasts)
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est, )
forecasts
plot(forecasts)
rmse(Data[,4:6],forecasts)
stargazer(VAR_est$varresult)
VAR_est$varresult
summary(VAR_est$varresult)
collapse::flag
install.packages("collapse")
head(flag(Data_Var, -1:2))
library(collapse)
Data_Var <- Data
head(flag(Data_Var, -1:2))
head(flag(Data_Var, 1:2))
Data_Var <-head(flag(Data_Var, 1:2))
View(Data_Var)
Data_Var <-flag(Data_Var, 1:2)
View(Data_Var)
Data_Var <- Data
Data_Var <-flag(Data_Var, 1:2)
View(Data_Var)
?flag
Yselect <- VARselect(Data[,1:3],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag <- Yselect$selection[1]  # AiC, Hq auch 2 , SC auch
lag
VAR_est <- VAR(y = Data[,4:6], p = lag)
summary(VAR_est$varresult)
summary(VAR_est)
accuracy(VAR_est)
summary(VAR_est)
View(Data_test)
View(Data_train)
trainingdata <- window(Data, end=c(2016,4))
testdata <- window(Data, start=c(2017,1))
trainingdata <- window(Data, end=c(2016,4))
v <- VAR(Data_train[,1:3], p=2)
p <- predict(v, n.ahead=8)
res <- residuals(v)
fits <- fitted(v)
for(i in 1:4)
for(i in 1:4)
{
fc <- structure(list(mean=p$fcst[[i]][,"fcst"], x=Data_train[,i],
fitted=c(NA,NA,fits[,i])),class="forecast")
print(accuracy(fc,Data_test[,i]))
}
trainingdata <- window(Data, end=c(2016,4))
?v
?window
View(Data)
View(Data_test)
View(Data_test)
View(Data_train)
View(Data)
View(Data_test)
View(Data_test)
View(Data_train)
trainingdata <- window(Data, end=c(2016-10-01))
trainingdata <- window(Data, end=c("2016-10-01"))
for(i in 1:4)
for(i in 1:4)
{
fc <- structure(list(mean=p$fcst[[i]][,"fcst"], x=trainingdata[,i],
fitted=c(NA,NA,fits[,i])),class="forecast")
print(accuracy(fc,testdata[,i]))
}
trainingdata <- Data_train
testdata <- Data_test
for(i in 1:4)
View(fc)
for(i in 1:4)
{
fc <- structure(list(mean=p$fcst[[i]][,"fcst"], x=trainingdata[,i],
fitted=c(NA,NA,fits[,i])),class="forecast")
print(accuracy(fc,testdata[,i]))
}
trainingdata <- Data_train
testdata <- Data_test
for(i in 1:4)
for(i in 1:4)
{
fc <- structure(list(mean=p$fcst[[i]][,"fcst"], x=trainingdata[,i],
fitted=c(NA,NA,fits[,i])),class="forecast")
print(accuracy(fc,testdata[,i]))
}
for(i in 1:4)
for(i in 1:4){
fc <- structure(list(mean=p$fcst[[i]][,"fcst"], x=trainingdata[,i],
fitted=c(NA,NA,fits[,i])),class="forecast")
print(accuracy(fc,testdata[,i]))
}
View(fc)
for(i in 1:4){
fc <- structure(list(mean=p$fcst[[i]][,"fcst"], x=trainingdata[,i],
fitted=c(fits[,i])),class="forecast")
print(accuracy(fc,testdata[,i]))
}
for(i in 1:4){
fc <- structure(list(mean=p$fcst[[i]][,"fcst"], x=trainingdata[,i],
fitted=c(fits[,i])),class="forecast")
#print(accuracy(fc,testdata[,i]))
}
for(i in 1:4)
{
fc <- structure(list(mean=p$fcst[[i]][,"fcst"], x=trainingdata[,i],
fitted=c(NA,NA,fits[,i])),class="forecast")
# print(accuracy(fc,testdata[,i]))
}
for(i in 1:4)
{
fc <- structure(list(mean=p$fcst[[i]][,"fcst"], x=trainingdata[,i],
fitted=c(NA,NA,fits[,i])),class="forecast")
#print(accuracy(fc,testdata[,i])
)
trainingdata <- window(Data, end=c(2016,4))
trainingdata <- window(Data[,3:6], end=c(2016,4))
Data_ts <- Data[,3:6]
View(Data_ts)
Data_ts <- Data[,4:6]
testdata <- window(Data_ts, start=c(2017,1))
class(Data_ts$gdp_ts)
trainingdata <- window(Data[,3:6], end=c(2016,4))
View(Data_train)
trainingdata <- window(Data[,3:6], end"2016-10-01")
trainingdata <- window(Data[,3:6], end = "2016-10-01")
trainingdata <- window(Data[,3:6], end = "2016-10-01")
trainingdata <- window(Data_ts, end = "2016-10-01")
testdata <- window(Data_ts, start="2017-01-01")
v <- VAR(trainingdata, p=2)
v <- VAR(trainingdata, p=2)
View(trainingdata)
trainingdata <- window(Data_ts, end = "2016-10-01")
testdata <- window(Data_ts, start="2017-01-01")
v <- VAR(trainingdata, p=2)
p <- predict(v, n.ahead=8)
res <- residuals(v)
fits <- fitted(v)
for(i in 1:2)
{
fc <- structure(list(mean=p$fcst[[i]][,"fcst"], x=trainingdata[,i],
fitted=c(NA,NA,fits[,i])),class="forecast")
print(accuracy(fc,testdata[,i]))
}
for(i in 1:2)
{
fc <- structure(list(mean=p$fcst[[i]][,"fcst"], x=trainingdata[,i],
fitted=c(NA,NA,fits[,i])),class="forecast")
print(accuracy(fc,testdata[,i]))
}
accuracy(fc)
accuracy(fc,testdata )
Data_ts$gdp_ts <- xts(Data_ts$gdp_ts)
Data_ts$gdp_ts <- as.xts(Data_ts$gdp_ts)
install.packages("xts")
library(xts)
Data_ts$gdp_ts <- as.xts(Data_ts$gdp_ts)
Data_ts$gdp_ts <- as.xts(Data_ts$gdp_ts)
Data_ts$cci_ts <- as.xts(Data_ts$cci_ts)
Data_ts$google_ts <- as.xts(Data_ts$google_ts)
trainingdata <- window(Data_ts, end = "2016-10-01")
View(Data_ts)
library(readr)
library(readxl)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tseries)
library(forecast)
library(vars)
library(GGally)
library(Metrics)
library(caret)
t_0 <- as.Date("2006-01-01") #Setting start date for the series
t_1 <- as.Date("2021-07-01") #Setting end date for the series
t_2 <- as.Date("2021-12-31")
Date_q <- seq.Date(t_0,t_1,by="quarter")
Date_m <- seq.Date(t_0,t_2,by="month")
bigT <- length(Date_q)
M <- 6
Data   <- matrix(NA,bigT,M)
colnames(Data)  <- c("gdp", "cci", "google","gdp_ts", "cci_ts", "google_ts")
Data <- as.data.frame(Data)
rownames(Data)  <- as.Date(Date_q)
# abgerufen final am 11.02.2022
#Source: https://data.oecd.org/gdp/quarterly-gdp.htm#indicator-chart
gdp <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/RData/GDP_oecd.csv")[9:71,6:7]
colnames(gdp)[colnames(gdp) %in% c("TIME", "Value")] <- c("QDate", "value")
gdp <- cbind(gdp,Date_q)
#ts:
gdp_ts <- ts(gdp$value, start=c(2006,1), end = c(2021,3), frequency = 4)
Data[(Date_q%in%gdp$Date_q),1] <- gdp$value
Data$gdp_ts <- ts(Data$gdp, start=c(2006,1), end = c(2021,3), frequency = 4)
# abgerufen final am 11.02.2022
#Source: https://ec.europa.eu/info/business-economy-euro/indicators-statistics/economic-databases/business-and-consumer-surveys/download-business-and-consumer-survey-data/time-series_en#consumers
cci <- read.csv2("https://raw.githubusercontent.com/anneval/MA_data/main/RData/CCI.csv")[253:444,c(1,297)]
colnames(cci)[colnames(cci) %in% c("X", "CONS.AT.TOT.COF.BS.M")] <- c("time", "value")
cci <- cbind(cci,Date_m)
cci <- arrange(cci, Date_m)
cci$Date_q <- as.yearqtr(cci$Date_m)
cci$Date_q <- as.Date(cci$Date_q)
#cci$Date_q  <- as.character(cci$Date_m)
#cci$Date_q[CCI_mntly$Date_q == "2021 Q4"] <- "2021 Q3"
cci_qtrly <- cci %>% group_by(Date_q) %>%
summarise_all(mean)
cci_qtrly_63 <- cci_qtrly[1:63,]
Data[(Date_q%in%cci_qtrly_63$Date_q),2] <- (cci_qtrly_63$value)
Data$cci_ts <- ts(Data$cci, start=c(2006,1), end = c(2021,3), frequency = 4)
# abgerufen: daily update
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/raw/at/trendecon_sa.csv")
# transform to quarterly and then do ts:
Google_AT_daily$time <- as.Date(Google_AT_daily$time)
Google_AT_daily <- arrange(Google_AT_daily, time)
Google_AT_daily$Date_q <- as.yearqtr(Google_AT_daily$time)
Google_AT_daily$Date_q <- as.Date(Google_AT_daily$Date_q)
#Google_AT_daily$QDate  <- as.character(Google_AT_daily$QDate)
#Google_AT_daily$QDate[Google_AT_daily$QDate == "2022 Q1"] <- "2021 Q3"
#Google_AT_daily$QDate[Google_AT_daily$QDate == "2021 Q4"] <- "2021 Q3"
Google_AT_qtrly <- Google_AT_daily %>% group_by(Date_q) %>%
summarise_all(mean)
#rownames(Google_AT_qtrly)  <- as.Date(Date_q)
Google_AT_qtrly_63 <- Google_AT_qtrly[1:63,]
Data[(Date_q%in%Google_AT_qtrly_63$Date_q),3] <- (Google_AT_qtrly_63$value)
Data$google_ts <- ts(Data$google, start=c(2006,1), end = c(2021,3), frequency = 4)
Data_Var <- Data[,1:3]
Data$gdp_lag <- lag(Data$gdp)
trainingdata <- window(Data_ts, end = "2016-10-01")
Data_ts <- Data[,4:6 ]
library(xts)
Data_ts$gdp_ts <- as.xts(Data_ts$gdp_ts)
Data_ts$cci_ts <- as.xts(Data_ts$cci_ts)
Data_ts$google_ts <- as.xts(Data_ts$google_ts)
trainingdata <- window(Data_ts, end = "2016-10-01")
testdata <- window(Data_ts, start="2017-01-01")
v <- VAR(trainingdata, p=2)
View(Data_ts)
Data_ts$date <- as.ts(Date_q)
View(Data_ts)
Data_ts$date <- as.Date(Date_q)
View(Data_ts)
trainingdata <- window(Data_ts, end = "2016-10-01")
trainingdata <- window(Data_ts[,1:3], end = "2016-10-01")
class(Data_ts$date)
trainingdata <- window(Data_ts[,1:3], end = "2016-10-01")
