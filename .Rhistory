?fmls
mls?
?
?ml
?mls
?nealmon
?nbeta
?mls
### use this for model 1,2,4, monthly and quarteroy daata and AR
BUT expanding how???
um <- midas_r(yy ~ mls(yy, 0, 1) + mls(xx, 3:11, 3), start = NULL)
coef(um)
um <- midas_r(yy ~ mls(yy, 0, 1) + mls(xx, 3, 3), start = NULL)
coef(um)
um <- midas_r(yy ~ mls(yy, 0, 1) + mls(xx, 1, 3), start = NULL)
fulldata <- list(xx = window(nx, start = c(1985, 1), end = c(2011, 6)),yy = window(ny, start = c(1985, 1), end = c(2011, 2)))
fulldata <- list(xx = window(nx, start = c(1985, 1), end = c(2011, 6)),yy = window(ny, start = c(1985, 1), end = c(2011, 2)))
coef(um)
um <- midas_r(yy ~ mls(yy, 0, 1) + mls(xx, 2, 3), start = NULL)
coef(um)
um <- midas_r(yy ~ mls(yy, 1, 1) + mls(xx, 2, 3), start = NULL)
coef(um)
um <- midas_r(yy ~ mls(yy, 1, 1) + xx+mls(xx, 2, 3), start = NULL)
um <- midas_r(yy ~ mls(yy, 1, 1) +mls(xx, 0:1, 3), start = NULL)
coef(um)
um <- midas_r(yy ~ mls(yy,0, 1) +mls(xx, 0:1, 3), start = NULL)
coef(um)
um <- midas_r(yy ~ mls(yy,1, 1) +mls(xx, 0:1, 3), start = NULL)
coef(um)
View(gdp)
View(gdp)
y <- window(gdp, end = c(2021, 3))
y <- window(gdp$value, end = c(2021, 3))
y <- window(as.ts(gdp$value), end = c(2021, 3))
y <- window(gdp_ts, end = c(2021, 3))
View(cci)
View(cci)
cci_ts <- as.ts(cci$value)
x <- window(cci_ts, end = c(2021, 12))
cci_ts <- as.ts(cci$value,start=c(2006,1),end = c(2021, 12))
cci_ts <- ts(cci$value, start=c(2006,1), end = c(2021,12), frequency = 12)
x <- window(cci_ts, end = c(2021, 12))
nx <- ts(c(NA, x, NA, NA), start = start(x), frequency = 12)
ny <- ts(c(rep(NA, 33), y, NA), start = start(x), frequency = 4)
um <- midas_r(ny ~ mls(ny,1, 1) +mls(nx, 0:1, 3), start = NULL)
y <- window(gdp_ts, end = c(2021, 3))
x <- window(cci_ts, end = c(2021, 9))
nx <- ts(c(NA, x, NA, NA), start = start(x), frequency = 12)
ny <- ts(c(rep(NA, 33), y, NA), start = start(x), frequency = 4)
um <- midas_r(ny ~ mls(ny,1, 1) +mls(nx, 0:1, 3), start = NULL)
ny <- ts(c(rep(NA, 66), y, NA), start = start(x), frequency = 4)
ny <- ts(c(rep(NA, 99), y, NA), start = start(x), frequency = 4)
y <- window(gdp_ts, end = c(2021, 4))
x <- window(cci_ts, end = c(2021, 12))
y <- window(gdp_ts, end = c(2021, 3))
x <- window(cci_ts, end = c(2021, 12))
data("USqgdp", package = "midasr")
data("USpayems", package = "midasr")
y <- window(USqgdp, end = c(2011, 2))
x <- window(USpayems, end = c(2011, 7))
yg <- diff(log(y)) * 100
nx <- ts(c(NA, xg, NA, NA), start = start(x), frequency = 12)
ny <- ts(c(rep(NA, 33), yg, NA), start = start(x), frequency = 4)
y <- window(gdp_ts, end = c(2021, 3))
x <- window(cci_ts, end = c(2021, 12))
nx <- ts(c(NA, x, NA, NA), start = start(x), frequency = 12)
ny <- ts(c(rep(NA, 1), y, NA), start = start(x), frequency = 4)
ny <- ts(c(rep(NA, 15), y, NA), start = start(x), frequency = 4)
ny <- ts(c(rep(NA, 10), y, NA), start = start(x), frequency = 4)
ny <- ts(c(rep(NA, 9), y, NA), start = start(x), frequency = 4)
?rep
ny <- ts(c(rep(NA, 3), y, NA), start = start(x), frequency = 4)
ny <- ts(c(rep(NA, 3), NA, y), start = start(x), frequency = 4)
nx <- ts(c(NA, NA, NA, x), start = start(x), frequency = 12)
y <- window(gdp_ts, end = c(2021, 2))
x <- window(cci_ts, end = c(2021, 7))
nx <- ts(c(NA, x, NA, NA), start = start(x), frequency = 12)
ny <- ts(c(rep(NA, 33), y, NA), start = start(x), frequency = 4)
y <- window(gdp_ts, end = c(2021, 2))
x <- window(cci_ts, end = c(2021, 7))
yg <- diff(log(y)) * 100
xg <- diff(log(x)) * 100
nx <- ts(c(NA, xg, NA, NA), start = start(x), frequency = 12)
ny <- ts(c(rep(NA, 33), yg, NA), start = start(x), frequency = 4)
ny
data("USqgdp", package = "midasr")
data("USpayems", package = "midasr")
x <- window(USpayems, end = c(2011, 7))
yg <- diff(log(y)) * 100
xg <- diff(log(x)) * 100
nx <- ts(c(NA, xg, NA, NA), start = start(x), frequency = 12)
ny <- ts(c(rep(NA, 33), yg, NA), start = start(x), frequency = 4)
nx
ny
y
data("USqgdp", package = "midasr")
data("USpayems", package = "midasr")
y <- window(USqgdp, end = c(2011, 2))
x <- window(USpayems, end = c(2011, 7))
yg <- diff(log(y)) * 100
xg <- diff(log(x)) * 100
nx <- ts(c(NA, xg, NA, NA), start = start(x), frequency = 12)
ny <- ts(c(rep(NA, 33), yg, NA), start = start(x), frequency = 4)
y
yg
ny
x
nx
x
ts.plot(ts(oecd*100,frequency = 52, start = c(2020,1)),
ts(wwwi,frequency = 52, start = c(2020,1)),
ts(google_w*5,frequency = 52, start = c(2020,1)),
ts(wecon_oenb_test,frequency = 52, start = c(2020,10)),
col = c("darkgreen", "red","black","steelblue"),
xlab = "Time",
main = "Comparison Weekly Indicators",
lwd = 1
)
um <- midas_r(yy ~ mls(yy,1, 1) +mls(xx, 0:1, 3), start = NULL)
coef(um)
?mls
um <- midas_r(yy ~ mls(yy,1, 1) +mls(xx, 0:1, 2), start = NULL)
um <- midas_r(yy ~ mls(yy,1, 1) +mls(xx, 0:1, 4), start = NULL)
um <- midas_r(yy ~ mls(yy,1, 1) +mls(xx, 0:1, 3), start = NULL)
coef(um)
um <- midas_r(yy ~ mls(yy,1, 3) +mls(xx, 0:1, 3), start = NULL)
um <- midas_r(yy ~ mls(yy,1, 1) +mls(xx, 0:1, 3), start = NULL)
?average_forecast
data("USqgdp", package = "midasr")
data("USpayems", package = "midasr")
x <- window(USpayems, end = c(2011, 7))
yg <- diff(log(y)) * 100
xg <- diff(log(x)) * 100
nx <- ts(c(NA, xg, NA, NA), start = start(x), frequency = 12)
ny <- ts(c(rep(NA, 33), yg, NA), start = start(x), frequency = 4)
xx <- window(nx, start = c(1985, 1), end = c(2009, 3))
yy <- window(ny, start = c(1985, 1), end = c(2009, 1))
beta0 <- midas_r(yy ~ mls(yy, 1, 1) + mls(xx, 3:11, 3, nbeta),start = list(xx = c(1.7, 1, 5)))
coef(beta0)
betan <- midas_r(yy ~ mls(yy, 1, 1) + mls(xx, 3:11, 3, nbetaMT), start = list(xx = c(2, 1, 5, 0)))
um <- midas_r(yy ~ mls(yy,1, 1) + mls(xx, 0:1, 3), start = NULL)
coef(um)
fulldata <- list(xx = window(nx, start = c(1985, 1), end = c(2011, 7)),yy = window(ny, start = c(1985, 1), end = c(2011, 2)))
insample <- 1:length(yy)
outsample <- (1:length(fulldata$yy))[-insample]
avgf <- average_forecast(list(beta0, betan, um), data = fulldata, insample = insample, outsample = outsample, type = "recursive")
View(avgf)
sqrt(avgf$accuracy$individual$MSE.out.of.sample)
avgf <- average_forecast( um, data = fulldata, insample = insample, outsample = outsample, type = "recursive")
sqrt(avgf$accuracy$individual$MSE.out.of.sample)
avgf <- average_forecast( um, data = fulldata, insample = insample, outsample = outsample, type = "recursive")
avgf <- average_forecast(um, data = fulldata, insample = insample, outsample = outsample, type = "recursive")
avgf <- average_forecast(list(beta0, betan, um), data = fulldata, insample = insample, outsample = outsample, type = "recursive")
avgf <- average_forecast(list(um), data = fulldata, insample = insample, outsample = outsample, type = "recursive")
sqrt(avgf$accuracy$individual$MSE.out.of.sample)
avgf <- average_forecast(list(um), data = fulldata, insample = insample, outsample = outsample, type = "rolling")
sqrt(avgf$accuracy$individual$MSE.out.of.sample)
avgf <- average_forecast(list(um), data = fulldata, insample = insample, outsample = outsample, type = "fixed")
sqrt(avgf$accuracy$individual$MSE.out.of.sample)
avgf <- average_forecast(list(um), data = fulldata, insample = insample, outsample = outsample, type = "recursive")
View(avgf)
sqrt(avgf$accuracy$individual$MSE.out.of.sample)
View(avgf)
sqrt(avgf$accuracy$individual$MSE.out.of.sample)
y <- window(USqgdp, end = c(2011, 2))
x <- window(USpayems, end = c(2011, 7))
yg <- diff(log(y)) * 100
xg <- diff(log(x)) * 100
cci_ts <- ts(cci$value, start=c(2006,1), end = c(2021,12), frequency = 12)
y <- window(gdp_ts, end = c(2021, 2))
x <- window(cci_ts, end = c(2021, 7))
nx <- ts(c(NA, xg, NA, NA), start = start(x), frequency = 12)
ny <- ts(c(rep(NA, 33), yg, NA), start = start(x), frequency = 4)
y <- window(USqgdp, end = c(2011, 2))
x <- window(USpayems, end = c(2011, 7))
yg <- diff(log(y)) * 100
xg <- diff(log(x)) * 100
nx <- ts(c(NA, xg, NA, NA), start = start(x), frequency = 12)
ny <- ts(c(rep(NA, 33), yg, NA), start = start(x), frequency = 4)
xx <- window(nx, start = c(1985, 1), end = c(2009, 3))
yy <- window(ny, start = c(1985, 1), end = c(2009, 1))
nx
ny <- ts(c(rep(NA, 33), yg, NA), start = start(x), frequency = 4)
ny
nx
x <- window(USpayems, end = c(2011, 7))
x
y <- window(gdp_ts, end = c(2021, 2))
x <- window(cci_ts, end = c(2021, 7))
nx <- ts(c(NA, xg), start = start(x), frequency = 12)
nx
nx <- ts(xg,start = start(x), frequency = 12)
nx
y <- window(gdp_ts, end = c(2021, 2))
x <- window(cci_ts, end = c(2021, 7))
ny <- ts(c(yg, NA), start = start(x), frequency = 4)
ny <- ts(c(yg,), start = start(x), frequency = 4)
ny <- ts(c(yg), start = start(x), frequency = 4)
ny
y <- window(gdp_ts, end = c(2021, 2))
x <- window(cci_ts, end = c(2021, 7))
um <- midas_r(y ~ mls(y,1, 1) +mls(x, 0:1, 3), start = NULL)
x
y
, NA, NA
nx <- ts(c(NA, xg, NA, NA),start = start(x), frequency = 12)
nx
xx <- window(nx, start = c(1985, 1), end = c(2009, 3))
nx <- ts(c(NA, xg, NA, NA), start = start(x), frequency = 12)
data("USqgdp", package = "midasr")
data("USpayems", package = "midasr")
x <- window(USpayems, end = c(2011, 7))
xg <- diff(log(x)) * 100
nx <- ts(c(NA, xg, NA, NA), start = start(x), frequency = 12)
nx
nx <- ts(c(NA, xg), start = start(x), frequency = 12)
nx <- ts(c(NA, xg), start = start(x), frequency = 12)
nx
nx <- ts(c(xg), start = start(x), frequency = 12)
nx
nx <- ts(c(NA,xg), start = start(x), frequency = 12)
nx
y <- window(USqgdp, end = c(2011, 2)) #Q2 -> also q3 als NA
x <- window(USpayems, end = c(2011, 7))
y
x
cci_ts <- ts(cci$value, start=c(2006,1), end = c(2021,12), frequency = 12)
y <- window(gdp_ts, end = c(2021, 2))
x <- window(cci_ts, end = c(2021, 7))
yg <- diff(log(y)) * 100
xg <- diff(log(x)) * 100
nx <- ts(c(NA, xg, NA, NA),start = start(x), frequency = 12)
ny <- ts(c(NA,yg), start = start(x), frequency = 4)
um <- midas_r(y ~ mls(y,1, 1) +mls(x, 0:1, 3), start = NULL)
coef(um)
um <- midas_r(y ~ mls(y,1, 1) +mls(x, 0:1, 3), start = NULL)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(readxl)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tseries)
library(forecast)
library(vars)
library(GGally)
library(Metrics)
library(caret)
library(collapse)
library(urca)
library(macror) # for latex table adf
library(xtable) # latex table
View(Data)
plotexp_3 <- ts.plot(ts(Data[19:63,1],frequency = 4, start = c(2010,3)),
ts(pred3,frequency = 4, start = c(2010,3)),
col = c("black", "red"),
xlab = "Year",
ylab = "GDP growth (%)",
lwd = 1)
legend("bottomleft", c("GDP growth", "DESI"), col=c("black","red"), lty=c(1),
xpd=TRUE, bty="b", cex=0.75
)
plotexp_5 <- ts.plot(ts(Data[20:63,1],frequency = 4, start = c(2010,4)),
ts(pred4,frequency = 4, start = c(2010,4)),
ts(pred5,frequency = 4, start = c(2010,4)),
col = c("black", "red","blue"),
xlab = "Year",
ylab = "GDP growth (%)",
lwd = 1)
legend("bottomleft", c("GDP growth","CCI & AR(1)" ,"DESI & AR(1)"), col=c("black","red","blue"), lty=c(1), xpd=TRUE, bty="b",cex=0.75
)
plotexp_7 <- ts.plot(ts(Data[20:63,1],frequency = 4, start = c(2010,3)),
ts(pred6,frequency = 4, start = c(2010,3)),
ts(pred7[2:45,],frequency = 4, start = c(2010,3)),
col = c("black", "red","blue"),
xlab = "Year",
ylab = "GDP growth (%)",
lwd = 1)
legend("bottomleft", c("GDP growth","AR(1) & CCI & PES", "CCI & PES"), col=c("black","red","blue"), lty=c(1), xpd=TRUE, bty="b",cex=0.75
)
plotexp_7 <- ts.plot(ts(Data[20:63,1],frequency = 4, start = c(2010,3)),
ts(pred6,frequency = 4, start = c(2010,3)),
ts(pred7[2:45,],frequency = 4, start = c(2010,3)),
col = c("black", "red","blue"),
xlab = "Year",
ylab = "GDP growth (%)",
lwd = 1)
legend("bottomleft", c("GDP growth","AR(1) & CCI & DESI", "CCI & DESI"), col=c("black","red","blue"), lty=c(1), xpd=TRUE, bty="b",cex=0.75
)
### Plot
library(dygraphs)
library(dygraphs)
ts_dygraphs(ts_c(
`Google DESI` = google_w * 5,
`WIFO WWWI` = wwwi,
`OECD Weekly Tracker` = oecd * 100,
`OENB Weekly Indicator` = wecon_oenb_test
))  %>%
dySeries("Google DESI", strokeWidth=2, color = "black") %>%
dySeries("WIFO WWWI", strokeWidth = 2,  color = "red") %>%
dySeries("OECD Weekly Tracker", strokeWidth = 2,  color = "green") %>%
dySeries("OENB Weekly Indicator", strokeWidth = 2,  color = "steelblue") %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c(as.Date("2020-01-01"), Sys.Date()))%>%
dyOptions(useDataTimezone = TRUE)
### Plot
library(dygraphs)
ts_dygraphs(ts_c(
`Google DESI` = google_w * 5,
`WIFO WWWI` = wwwi,
`OECD Weekly Tracker` = oecd * 100,
`OENB Weekly Indicator` = wecon_oenb_test
))  %>%
dySeries("Google DESI", strokeWidth=2, color = "black") %>%
dySeries("WIFO WWWI", strokeWidth = 2,  color = "red") %>%
dySeries("OECD Weekly Tracker", strokeWidth = 2,  color = "green") %>%
dySeries("OENB Weekly Indicator", strokeWidth = 2,  color = "steelblue") %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c(as.Date("2020-01-01"), Sys.Date()))%>%
dyOptions(useDataTimezone = TRUE)
month <- seq(as.Date("2020-01-01"),
as.Date("2022-03-01"),
by = "1 month")
month_numeric <- as.numeric(format(month, format = "%U"))
month_label <- format(month, format = "%b")
scale_x_continuous(breaks = month_numeric,
labels = month_label)
ts.plot(ts(oecd*100,frequency = 52, start = c(2020,1)),
ts(wwwi,frequency = 52, start = c(2020,1)),
ts(google_w*5,frequency = 52, start = c(2020,1)),
ts(wecon_oenb_test,frequency = 52, start = c(2020,10)),
col = c("darkgreen", "red","black","steelblue"),
xlab = "Time",
main = "Comparison Weekly Indicators",
lwd = 1
)
### weekly 2020
google_w <- google_w[time(google_w) >= "2020-01-01"]
### Change from daily to weekly frequency
google <- Google_AT_daily[,1:2]
library(tsbox)
google_w <- ts_frequency(google, to = "week") %>% ts_xts()
#### OECD weekly tracker
temp <- tempfile()
download.file("https://github.com/NicolasWoloszko/OECD-Weekly-Tracker/raw/main/Data/weekly_tracker.xlsx",
destfile = temp)
download.file("https://github.com/NicolasWoloszko/OECD-Weekly-Tracker/raw/main/Data/weekly_tracker.xlsx",
destfile = temp)
oecd <- read_xlsx(temp, sheet = "Sheet1") %>%
#oecd <- read_xlsx("./real_data/weekly_tracker.xlsx", sheet = "Sheet1") %>%
filter(region == "Austria") %>%
#filter(region %in% c("Austria", "Germany", "Switzerland")) %>%
mutate(date = as.Date(date),
Tracker = `Tracker (yoy)` / 100) %>%
filter(date >= "2020-01-01") %>%
rename(time = date, value = Tracker) %>%
dplyr::select(time, value) %>%
ts_xts()
temp <- tempfile()
download.file("https://www.oenb.at/dam/jcr:7c5ab44b-204d-4d45-a802-884d1019f7f5/data_on_the_weekly_GDP-indicator.csv",
destfile = temp)
#### first weeks fehlt
wecon_oenb <- read_delim(temp, delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
drop_na(Calenderweek) %>%
rename(time = Calenderweek, value = `Real GDP compared to pre-crisis levels`) %>%
dplyr::select(time, value)
#### first weeks fehlt
wecon_oenb <- read_delim(temp, delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
drop_na(Calenderweek) %>%
rename(time = Calenderweek, value = `Real GDP compared to pre-crisis levels`) %>%
dplyr::select(time, value)
wecon_oenb <- ts(wecon_oenb, start = c(2020,10), frequency = 52) %>% ts_xts()
library(lubridate)
wecon_oenb_test <- ts(wecon_oenb,
freq=365.25/7,
start=decimal_date(ymd("2020-03-06"))) %>% ts_xts()
wecon_oenb_test <- wecon_oenb_test %>% xts:::.drop.time()
### WIFO Weekly Tracker
temp <- tempfile()
download.file("https://www.wifo.ac.at/wwadocs/konjunktur/W%C3%B6chentlicherWIFOWirtschaftsindex/WIFO-Konjunkturberichterstattung_W%C3%B6chentlicherWIFOWirtschaftsindex.xlsx",
destfile = temp)
t0 <- as.numeric(as.Date("2007-01-01"))
t1 <- as.numeric(as.Date(Sys.Date()))
t <- round((t1 - t0) / 7) - 3 # weeks passed since index started
wwwi <- read_xlsx(temp, sheet = "WWWI",
#wwwi <- read_xlsx(path = "./real_data/wwwi_wifo.xlsx", sheet = "WWWI",
skip = 2, col_names = c("DATE", "VALUE", "cng_yavg", "cng_q"),
#col_types = c("date", "guess", "guess", "guess"),
n_max = t) %>%
mutate(DATE = as.character(DATE)) %>%
dplyr::select(DATE, VALUE) %>%
rename(time = DATE, value = VALUE) %>%
ts_xts()
### weekly 2020
google_w <- google_w[time(google_w) >= "2020-01-01"]
wwwi <- wwwi[time(wwwi) >= "2020-01-01"]
oecd <- oecd[time(oecd) >= "2020-01-01"]
wecon_oenb <- wecon_oenb %>% xts:::.drop.time()
library(lubridate)
wwwi <- wwwi %>% ts_data.frame()
wwwi$time <- wwwi$time %m-% days(3)
wwwi <- wwwi %>% ts_xts()
oecd <- oecd %>% ts_data.frame()
oecd$time <- oecd$time %m-% days(2)
oecd <- oecd %>% ts_xts()
google_w <- google_w %>% ts_data.frame()
google_w$time <- google_w$time %m-% days(2)
google_w <- google_w %>% ts_xts()
wecon_oenb_test <- wecon_oenb_test %>% ts_data.frame()
wecon_oenb_test[1,1] <- as.Date("2020-03-06")
wecon_oenb_test <- wecon_oenb_test %>% ts_xts()
### Plot
library(dygraphs)
ts_dygraphs(ts_c(
`Google DESI` = google_w * 5,
`WIFO WWWI` = wwwi,
`OECD Weekly Tracker` = oecd * 100,
`OENB Weekly Indicator` = wecon_oenb_test
))  %>%
dySeries("Google DESI", strokeWidth=2, color = "black") %>%
dySeries("WIFO WWWI", strokeWidth = 2,  color = "red") %>%
dySeries("OECD Weekly Tracker", strokeWidth = 2,  color = "green") %>%
dySeries("OENB Weekly Indicator", strokeWidth = 2,  color = "steelblue") %>%
dyAxis("x", drawGrid = FALSE) %>%
dyRangeSelector(dateWindow = c(as.Date("2020-01-01"), Sys.Date()))%>%
dyOptions(useDataTimezone = TRUE)
month <- seq(as.Date("2020-01-01"),
as.Date("2022-03-01"),
by = "1 month")
month_numeric <- as.numeric(format(month, format = "%U"))
month_label <- format(month, format = "%b")
scale_x_continuous(breaks = month_numeric,
labels = month_label)
ts.plot(ts(oecd*100,frequency = 52, start = c(2020,1)),
ts(wwwi,frequency = 52, start = c(2020,1)),
ts(google_w*5,frequency = 52, start = c(2020,1)),
ts(wecon_oenb_test,frequency = 52, start = c(2020,10)),
col = c("darkgreen", "red","black","steelblue"),
xlab = "Time",
main = "Comparison Weekly Indicators",
lwd = 1
)
ts.plot(ts(oecd*100,frequency = 52, start = c(2020,1)),
ts(wwwi,frequency = 52, start = c(2020,1)),
ts(google_w*5,frequency = 52, start = c(2020,1)),
ts(wecon_oenb_test,frequency = 52, start = c(2020,10)),
col = c("darkgreen", "red","black","steelblue"),
xlab = "Time",
main = "Comparison Weekly Indicators",
lwd = 1
)
legend("bottomright", c("OECD Weekly Tracker","WIFO WWWI", "Google DESI", "OENB Weekly Indicator"), col=c("darkgreen", "red","black","steelblue"), lty=c(1), xpd=TRUE, bty="b",cex=0.75
)
ts.plot(ts(oecd*100,frequency = 52, start = c(2020,1)),
ts(wwwi,frequency = 52, start = c(2020,1)),
ts(google_w*5,frequency = 52, start = c(2020,1)),
ts(wecon_oenb_test,frequency = 52, start = c(2020,10)),
col = c("darkgreen", "red","black","steelblue"),
xlab = "Time",
main = "",
lwd = 1
)
ts.plot(ts(oecd*100,frequency = 52, start = c(2020,1)),
ts(wwwi,frequency = 52, start = c(2020,1)),
ts(google_w*5,frequency = 52, start = c(2020,1)),
ts(wecon_oenb_test,frequency = 52, start = c(2020,10)),
col = c("darkgreen", "red","black","steelblue"),
xlab = "Time",
main = "",
lwd = 1
)
legend("bottomright", c("OECD Weekly Tracker","WIFO WWWI", "Google DESI", "OENB Weekly Indicator"), col=c("darkgreen", "red","black","steelblue"), lty=c(1), xpd=TRUE, bty="b",cex=0.75
)
ggplot(Google_AT_daily, aes(x=time, y=value)) +
geom_line(color = "black") +
theme_light() +
labs(title = "Google Trends TrendEcon Daily Indicator AT (2006 - 2021)", x = "Years", y = "Austria's Google DESI")+
theme(plot.title = element_text(hjust = 0.5, face ="bold")) +
scale_x_date(date_labels="%b %y",date_breaks  ="24 month")
View(gdp)
View(VAR2_est)
fit_VAR1 <- VARselect(Data[,1:3],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag_VAR1 <- fit_VAR1$selection[1]  # AiC, Hq auch 2 , SC auch
lag_VAR1
VAR1_est <- VAR(y = Data[,1:3], p = lag_VAR1,type = "const")
summary(VAR1_est$varresult$gdp)
summary(VAR1_est)
acc_is_VAR1 <- forecast::accuracy(VAR1_est$varresult$gdp) # IS accuracy
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecast_VAR1<- predict(VAR1_est,n.ahead =3)
forecast_VAR1
View(forecast_VAR1)
forecast_VAR1$fcst
df_fcst <- forecast_VAR1$fcst
View(df_fcst)
df_fcst <- as.data.frame(forecast_VAR1$fcst)
View(df_fcst)
stargazer::stargazer(df_fcst,summary = F)
stargazer::stargazer(df_fcst,summary = FALSE)
df_fcst <- as.data.frame(forecast_VAR1$fcst$gdp)
stargazer::stargazer(df_fcst,summary = FALSE)
df_fcst <- as.data.frame(forecast_VAR1$fcst$cci)
stargazer::stargazer(df_fcst,summary = FALSE)
df_fcst <- as.data.frame(forecast_VAR1$fcst$google)
stargazer::stargazer(df_fcst,summary = FALSE)
### error in and OOS
error_VAR2 <- expanding_VAR2[[4]]
error_VAR2 <-error_VAR2[!is.na(error_VAR2)]
?predict
