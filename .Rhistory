geo     = "AT", time = paste(as.Date("2013-01-01"), Sys.Date())
)
ts_plot(ts_pick(ts_prcomp(immo_preis), "PC1"))
immo_preis <- ts_gtrends(
keyword = c("immowelt", "immobilienscout24", "Baufinanzierung", "Hauspreis"),
geo     = "AT", time = paste(as.Date("2013-01-01"), Sys.Date())
)
ts_plot(ts_pick(ts_prcomp(immo_preis), "PC1"))
immo_preis <- ts_gtrends(
keyword = c("immowelt", "Mieten", "immobilienscout24", "Baufinanzierung", "Hauspreis"),
geo     = "AT", time = paste(as.Date("2013-01-01"), Sys.Date())
)
ts_plot(ts_pick(ts_prcomp(immo_preis), "PC1"))
ts_plot(immo_preis)
x <-ts_prcomp(immo_preis, "PC1")
x <-ts_pick(ts_prcomp(immo_preis, "PC1"))
x <-ts_pick(ts_prcomp(immo_preis, "PC1"))
x <- ts_pick(ts_prcomp(immo_preis, "PC1"))
ts_plot(ts_pick(ts_prcomp(immo_preis), "PC1"))
(ts_prcomp(ts(immo_preis)), "PC1"))
(ts_prcomp(ts(immo_preis), "PC1"))
immo_preis <- ts_gtrends(
keyword = c("immowelt", "Mietpreise", "immobilienscout24", "Baufinanzierung", "Hauspreis"),
geo     = "AT", time = paste(as.Date("2013-01-01"), Sys.Date())
)
ts_plot(ts_pick(ts_prcomp(immo_preis), "PC1"))
immo_preis <- ts_gtrends(
keyword = c("immowelt", "Miete", "immobilienscout24", "Baufinanzierung", "Hauspreis"),
geo     = "AT", time = paste(as.Date("2013-01-01"), Sys.Date())
)
ts_plot(ts_pick(ts_prcomp(immo_preis), "PC1"))
immo_preis <- ts_gtrends(
keyword = c("Immobilien", "Miete", "immobilienscout24", "Baufinanzierung", "Hauspreis"),
geo     = "AT", time = paste(as.Date("2013-01-01"), Sys.Date())
)
ts_plot(ts_pick(ts_prcomp(immo_preis), "PC1"))
immo_preis <- ts_gtrends(
keyword = c("Immobilien", "Miete", "immobilienscout24", "Baufinanzierung", "Hauspreis"),
geo     = "AT", time = paste(as.Date("2010-01-01"), Sys.Date())
)
ts_plot(ts_pick(ts_prcomp(immo_preis), "PC1"))
immo_preis <- ts_gtrends(
keyword = c("Immobilien", "Miete", "immobilienscout24", "Baufinanzierung", "Hauspreis"),
geo     = "AT", time = paste(as.Date("2007-01-01"), Sys.Date())
)
ts_plot(ts_pick(ts_prcomp(immo_preis), "PC1"))
immo_preis <- ts_gtrends(
keyword = c("Immobilien", "Miete", "immobilienscout24", "Baufinanzierung", "Hauspreis"),
geo     = "AT", time = paste(as.Date("2010-01-01"), Sys.Date())
)
immo_preis <- ts_gtrends(
keyword = c("Immobilien", "Miete", "immobilienscout24", "Baufinanzierung", "Hauspreis"),
geo     = "AT", time = paste(as.Date("2007-01-01"), Sys.Date())
)
immo_preis <- ts_gtrends(
keyword = c("Immobilien", "Miete", "immobilienscout24", "Baufinanzierung", "Hauspreis"),
geo     = "AT", time = paste(as.Date("2006-01-01"), Sys.Date())
)
ts_plot(ts_pick(ts_prcomp(immo_preis), "PC1"))
immo_preis <- ts_gtrends(
keyword = c("Immobilien", "Miete", "immobilienscout24", "Baufinanzierung", "Hauspreis"),
geo     = "AT", time = paste(as.Date("2007-01-01"), Sys.Date())
)
ts_plot(ts_pick(ts_prcomp(immo_preis), "PC1"))
tic::use_tic()
usethis::browse_github_pat()
tic::use_tic()
tic::use_tic()
tic::use_ghactions_deploy()
GITHUB_PAT
tic::use_tic()
usethis::browse_github_pat()
usethis::create_github_token()
usethis::edit_r_environ()
tic::use_tic()
setwd("~/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT")
use_ghactions_deploy
use_ghactions_deploy()
tic::use_ghactions_deploy()
tic::before_deploy()
tic::deploy()
tic::after_deploy()
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("/Users/annevalder/Desktop/UNI /WU WIEN/SoSe_21/MA/data/Rcode")
getwd()
load("/Users/annevalder/Downloads/data.RData")
View(int)
load("/Users/annevalder/Downloads/data.RData")
### BRING ALL TO SAME TIME HORIZON ####
start <- start(pes)
end <- end(une)
int <- window(int, start=start, end=end) %>% ts_ts()
cc <- window(cc, start=start, end=end) %>% ts_ts()
une <- window(une, start=start, end=end) %>% ts_ts()
pes <- window(pes, start=start, end=end) %>% ts_ts()
cpi <- window(p, start=start, end=end) %>% ts_ts()
cpi <- window(p, start=start, end=end) %>% ts_ts()
composite_m <- cbind(pes, cc, une, cpi)
composite_m <- cbind(pes, cc, une)
View(composite_m)
composite_m %>%
as.data.frame() %>%
GGally::ggpairs() #var_pairs.png
adf.test(int)
library(tsbox)
library(dygraphs)
library(readxl)
library(tidyverse)
library(xtable)
adf.test(int)
Dint <- diff(int) # int not stationary
library(tseries)
library(tseries)
adf.test(int)
Dcc <- diff(cc) # cc stationary
rm(list=ls())
load("/Users/annevalder/Downloads/data.RData")
library(tsbox)
library(dygraphs)
library(readxl)
library(tidyverse)
library(xtable)
### BRING ALL TO SAME TIME HORIZON ####
start <- start(pes)
end <- end(une)
int <- window(int, start=start, end=end) %>% ts_ts()
cc <- window(cc, start=start, end=end) %>% ts_ts()
une <- window(une, start=start, end=end) %>% ts_ts()
pes <- window(pes, start=start, end=end) %>% ts_ts()
cpi <- window(p, start=start, end=end) %>% ts_ts()
composite_m <- cbind(pes, cc, une, cpi)
View(composite_m)
composite_m %>%
as.data.frame() %>%
GGally::ggpairs() #var_pairs.png
library(tseries)
adf.test(int)
adf.test(cc)
adf.test(une)
adf.test(pes)
adf.test(cpi)
adf.test(gdp)
adf.test(gdp)
gdp <- window(gdp, start=start, end=end) %>% ts_ts()
adf.test(gdp)
rm(list=ls())
load("/Users/annevalder/Downloads/data.RData")
View(gdp)
corona <- c("Inzidenz", "CoronafÃ¤lle", "Testcenter", "Impfung", "Lockdown")
?proc_keyword_init
library(trendecon)
?proc_keyword_init
zeit!
proc_keyword_init("Inzidenz",geo, from = "2021-02-01") # keywords[1]
zeit!
proc_keyword_init("Inzidenz",geo, from = "2014-01-01") # keywords[1]
View(une)
### BRING ALL TO SAME TIME HORIZON ####
start <- start(pes)
end <- end(une)
gdp <- window(gdp, start=start, end=end) %>% ts_ts()
view(gsp)
view(gdp)
rm(list=ls())
load("/Users/annevalder/Downloads/data.RData")
gdp <- ts_ts(gdp)
view(gdp)
rm(list=ls())
load("/Users/annevalder/Downloads/data.RData")
load("/Users/annevalder/Downloads/var.RData")
load("/Users/annevalder/Downloads/var.RData")
View(accs)
View(accs_main)
View(ccdat)
View(g2)
View(var6)
library(readr)
gdp_oecd_ <- read_csv("~/Downloads/DP_LIVE_12022022095746531.csv")
View(gdp_oecd_)
library(readr)
DP_LIVE_12022022095739562 <- read_csv("~/Downloads/DP_LIVE_12022022095739562.csv")
View(DP_LIVE_12022022095739562)
View(gdp_oecd_)
View(gdp_oecd_)
library(readr)
DP_LIVE_12022022095746531 <- read_csv("~/Downloads/DP_LIVE_12022022095746531.csv")
View(DP_LIVE_12022022095746531)
library(readr)
gdp_preperiod <- read_csv("~/Downloads/DP_LIVE_12022022095739562.csv")
View(gdp_preperiod)
library(readr)
gdp_preyear <- read_csv("~/Downloads/DP_LIVE_12022022095746531.csv")
View(gdp_preyear)
library(tseries)
load("/Users/annevalder/Downloads/data.RData")
library(tsbox)
library(dygraphs)
library(readxl)
library(tidyverse)
library(xtable)
### BRING ALL TO SAME TIME HORIZON ####
start <- start(pes)
end <- end(une)
int <- window(int, start=start, end=end) %>% ts_ts()
cc <- window(cc, start=start, end=end) %>% ts_ts()
une <- window(une, start=start, end=end) %>% ts_ts()
pes <- window(pes, start=start, end=end) %>% ts_ts()
cpi <- window(p, start=start, end=end) %>% ts_ts()
?ts_ts()
ts_gdp_preperiod <- ts_ts(gdp_preperiod)
ts_gdp_preperiod <- ts(gdp_preperiod)
View(ts_gdp_preperiod)
ts_gdp_preperiod <- ts(gdp_preperiod$Value)
View(gdp_preperiod)
ts_gdp_preperiod <- ts(gdp_preperiod$Value,start=c(2004), end = c(2021), frequency = 4)
ts_gdp_preperiod <- ts(gdp_preperiod$Value,start=c(2004), end = c(2022), frequency = 4)
ts_gdp_preperiod <-
view(ts_gdp_preperiod)
ts_gdp_preperiod <- ts(gdp_preperiod$Value,start=c(2004), end = c(2024), frequency = 4)
ts_gdp_preperiod <- ts(gdp_preperiod$Value,start=c(2004), end = c(2022), frequency = 4)
ts_gdp_preyear <-  ts(gdp_preyear$Value,start=c(2004), end = c(2022), frequency = 4)
View(gdp)
ts_gdp_preperiod <- ts(gdp_preperiod$Value) #,start=c(2004), end = c(2022), frequency = 4)
ts_gdp_preyear <-  ts(gdp_preyear$Value)#,start=c(2004), end = c(2022), frequency = 4)
ts_gdp_preperiod <- ts(gdp_preperiod$Value) #,start=c(2004), end = c(2022), frequency = 4)
ts_gdp_preyear <-  ts(gdp_preyear$Value)#,start=c(2004), end = c(2022), frequency = 4)
ts_gdp <- ts(gdp$value)
adf.test(gdp)
adf.test(ts_gdp)
adf.test(ts_gdp_preperiod)
adf.test(ts_gdp_preyear)
ts_gdp_preperiod <- ts(gdp_preperiod$Value) #,start=c(2004), end = c(2022), frequency = 4)
adf.test(ts_gdp_preperiod)
ts_gdp_preyear <-  ts(gdp_preyear$Value)#,start=c(2004), end = c(2022), frequency = 4)
adf.test(ts_gdp_preyear)
ts_gdp_preperiod <- ts(gdp_preperiod$Value, start=c(2006), frequency = 4)
ts_gdp_preperiod <- ts(gdp_preperiod$Value, start=c(2006), frequency = 4)
adf.test(ts_gdp_preperiod)
Dune <- diff(une) # une not stationary
adf.test(une)
adf.test(cpi)
adf.test(cc)
adf.test(int)
adf.test(cpi)
### VAR ##########
## check length 2007-01 until 2021-02: 12*14+2 = 170
vardat <- matrix(data=c(pes,cc,Dune,cpi), nrow = length(pes), ncol=4, byrow=FALSE)
View(vardat)
colnames(vardat) <- c("pes","cc","Dune","cpi")
var.AIC <- VAR(vardat,  type="none" , lag.max = 5, ic = c("AIC"))
# print(xtable::xtable(vardat))
library(vars)
var.AIC <- VAR(vardat,  type="none" , lag.max = 5, ic = c("AIC"))
var.SC <- VAR(vardat,  type="none" , lag.max = 5, ic = c("SC"))
var.AIC.c <- VAR(vardat,  type="const" , lag.max = 5, ic = c("AIC")) ## lag 2
var.SC.c <- VAR(vardat,  type="const" , lag.max = 5, ic = c("SC")) ## lag 1
AIC.woc <- cbind(AIC(var.AIC), BIC(var.AIC))
AIC.wc<- cbind(AIC(var.AIC.c), BIC(var.AIC.c))
SC.woc <- cbind(AIC(var.SC), BIC(var.SC))
SC.wc <- cbind(AIC(var.SC.c), BIC(var.SC.c))
MC.table <- rbind(AIC.woc, AIC.wc, SC.woc, SC.wc)
MC.table.names <- rbind("using AIC without constant", "using AIC with constant",
"using SC without constant","using SC with constant")
rownames(MC.table)<- MC.table.names
colnames(MC.table) <- cbind("AIC", "BIC")
#MC.table
print(xtable::xtable(MC.table,caption="Model Choice Results",label="tab:mc"),
sanitize.text.function=function(UR.table){UR.table},comment=FALSE)
View(AIC.wc)
View(AIC.woc)
View(AIC.wc)
View(var.AIC)
?VAR
library(stargazer)
library(latex2exp)
var.UR <- VAR(vardat,  type="none" , lag.max = 5, ic = c("SC"))
stargazer(var.UR$varresult, type = "latex", header = F, title = "unrestricted VAR(1)", label="tab:star1",
column.labels = c("$pes$","$cc$","$\\Delta{une}$","$cpi$"),
dep.var.caption = "dependent variables: $pes, cc, \\Delta{une}, cpi$",
dep.var.labels = c(""),
covariate.labels = c("$pes_{t-1}$","$cc_{t-1}$","$\\Delta{une_{t-1}}$","$int_{t-1}$","constant"))
sum2 <- data.frame(
var.UR$varresult$pes$residuals,
var.UR$varresult$cc$residuals,
var.UR$varresult$Dune$residuals,
var.UR$varresult$cpi$residuals)
colnames(sum2) <- c("$pes$ residuals","$cc$ residuals","$\\Delta{une}$ residuals","$cpi$ residuals")
print(xtable::autoformat(xtable::xtable(summary(sum2),auto=T,floating=F,caption="Residual Summary",label="tab:res")),comment=F,include.rownames = F,sanitize.text.function=function(sum2){sum2})
adf.test(var.UR$varresult$pes$residuals)
adf.test(var.UR$varresult$cc$residuals)
adf.test(var.UR$varresult$Dune$residuals)
adf.test(var.UR$varresult$cpi$residuals)
Normtest <- normality.test(var.UR) # H0: normality
print(Normtest)
plot(Normtest)
colnames(sum2) <- c("pes residuals","cc residuals","une residuals","int residuals")
Matrix=matrix(c((var(sum2$`pes residuals`)),
cov(sum2$`pes residuals`,sum2$`cc residuals`),
cov(sum2$`pes residuals`,sum2$`une residuals`),
cov(sum2$`pes residuals`,sum2$`int residuals`),
cov(sum2$`pes residuals`,sum2$`cc residuals`),
var(sum2$`cc residuals`),
cov(sum2$`cc residuals`,sum2$`une residuals`),
cov(sum2$`cc residuals`,sum2$`int residuals`),
cov(sum2$`pes residuals`,sum2$`une residuals`),
cov(sum2$`cc residuals`,sum2$`une residuals`),
var(sum2$`une residuals`),
cov(sum2$`cc residuals`,sum2$`int residuals`),
cov(sum2$`pes residuals`,sum2$`int residuals`),
cov(sum2$`cc residuals`,sum2$`int residuals`),
cov(sum2$`p`,sum2$`int residuals`),
var(sum2$`int residuals`)), nrow=4, ncol=4)
ser.test <- serial.test(var.UR) # H0: no serial correlation
ser.test
colnames(sum2) <- c("pes residuals","cc residuals","une residuals","int residuals")
Matrix=matrix(c((var(sum2$`pes residuals`)),
cov(sum2$`pes residuals`,sum2$`cc residuals`),
cov(sum2$`pes residuals`,sum2$`une residuals`),
cov(sum2$`pes residuals`,sum2$`int residuals`),
cov(sum2$`pes residuals`,sum2$`cc residuals`),
var(sum2$`cc residuals`),
cov(sum2$`cc residuals`,sum2$`une residuals`),
cov(sum2$`cc residuals`,sum2$`int residuals`),
cov(sum2$`pes residuals`,sum2$`une residuals`),
cov(sum2$`cc residuals`,sum2$`une residuals`),
var(sum2$`une residuals`),
cov(sum2$`cc residuals`,sum2$`int residuals`),
cov(sum2$`pes residuals`,sum2$`int residuals`),
cov(sum2$`cc residuals`,sum2$`int residuals`),
cov(sum2$`p`,sum2$`int residuals`),
var(sum2$`int residuals`)), nrow=4, ncol=4)
colnames(Matrix) <- c("$\\Delta{y}$","$\\Delta{int}$","$\\Delta{p}$","$\\Delta{M1}$")
rownames(Matrix) <- c("$\\Delta{y}$","$\\Delta{int}$","$\\Delta{p}$","$\\Delta{M1}$")
#Matrix
L <- t(chol(Matrix))
#print(xtable(L, digits = 5),comment=F)
print(xtable::autoformat(xtable::xtable(L,auto=T,floating=F,caption="Cholesky Decomposition Residuals",label="tab:chol")),comment=F,include.rownames = T,sanitize.text.function=function(L){L})
#### zero long run restrictions #####
BQm <- BQ(var.UR)
BQm
#### zero short run restrictions #####
resmat <- matrix(c(1,0,0,0,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1), ncol=5, nrow= 4, byrow = TRUE) # with const
resmat <- matrix(c(1,0,0,0,1,1,1,0,0,1,1,1,1,0,1,1), ncol=4, nrow= 4, byrow = TRUE) # without const
var.SRR <- restrict(var.UR, method="manual", resmat= resmat)
var.SRR <- restrict(var.UR, method="ser")
summary(var.SRR)
### IRF ####
irf.pes <- irf(var.SRR, impulse = "pes", response = "pes", boot = TRUE)
irf.cc <- irf(var.SRR, impulse = "pes", response = "cc", boot = TRUE)
irf.Dune <- irf(var.SRR, impulse = "pes", response = "Dune", boot = TRUE)
irf.cpi <- irf(var.SRR, impulse = "pes", response = "cpi", boot = TRUE)
par(mfrow=c(2,2))
plot(irf.pes)
plot(irf.cc)
plot(irf.Dune)
plot(irf.cpi)
par(mfrow=c(2,2))
plot(irf.pes)
plot(irf.cc)
plot(irf.Dune)
plot(irf.cpi)
#print(xtable(L, digits = 5),comment=F)
print(xtable::autoformat(xtable::xtable(L,auto=T,floating=F,caption="Cholesky Decomposition Residuals",label="tab:chol")),comment=F,include.rownames = T,sanitize.text.function=function(L){L})
plot(irf.pes)
plot(irf.cc)
plot(irf.Dune)
plot(irf.cpi)
pdat <- pesdat %>% as_tsibble(pivot_longer = FALSE)
#### FORECAST ACCURACY #####
library(fpp3)
library(fable)
pdat <- pesdat %>% as_tsibble(pivot_longer = FALSE)
fit <- auto.arima(pesdat[,"pes"])
library(rugarch)
library(rmgarch)
library(quantmod)
fit <- auto.arima(pesdat[,"pes"])
fit <- auto.arima(pesdat[,"pes"])
#### FORECAST ACCURACY #####
library(fpp3)
library(fable)
library(stargazer)
library(latex2exp)
# print(xtable::xtable(vardat))
library(vars)
library(tsbox)
library(dygraphs)
library(readxl)
library(tidyverse)
library(xtable)
fit <- auto.arima(pesdat[,"pes"])
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
fit <- auto.arima(pesdat[,"pes"])
View(pes_d)
fit <- auto.arima(pes_d$value)
plot(forecast(fit,h=3))
accuracy(fit)
var.AIC <- VAR(vardat,  type="none" , lag.max = 5, ic = c("AIC"))
var.SC <- VAR(vardat,  type="none" , lag.max = 5, ic = c("SC"))
var.AIC.c <- VAR(vardat,  type="const" , lag.max = 5, ic = c("AIC")) ## lag 2
var.SC.c <- VAR(vardat,  type="const" , lag.max = 5, ic = c("SC")) ## lag 1
var.AIC <- VAR(vardat,  type="none" , lag.max = 5, ic = c("AIC"))
var.SC <- VAR(vardat,  type="none" , lag.max = 5, ic = c("SC"))
# print(xtable::xtable(vardat))
library(vars)
var.AIC <- VAR(vardat,  type="none" , lag.max = 5, ic = c("AIC"))
var.SC <- VAR(vardat,  type="none" , lag.max = 5, ic = c("SC"))
var.AIC <- VAR(vardat,  type="none" , lag.max = 5, ic = c("aic"))
View(var.AIC)
### VAR ##########
## check length 2007-01 until 2021-02: 12*14+2 = 170
vardat <- matrix(data=c(pes,cc,Dune,cpi), nrow = length(pes), ncol=4, byrow=FALSE)
colnames(vardat) <- c("pes","cc","Dune","cpi")
# print(xtable::xtable(vardat))
library(vars)
var.AIC <- VAR(vardat,  type="none" , lag.max = 5, ic = c("aic"))
var.SC <- VAR(vardat,  type="none" , lag.max = 5, ic = c("SC"))
View(var.SC)
var.AIC.c$varresult
VARselect(vardat)
library(readr)
library(readxl)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tseries)
library(forecast)
library(vars)
getwd()
setwd("/Users/annevalder/Desktop/UNI /WU WIEN/SoSe_21/MA/Rcode")
getwd()
setwd("~/Desktop/Uni/WU WIEN/SoSe_21/MA/R-CODE")
### LOAD DATA ####
load(file="./r_data/data.RData")
setwd("~/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT")
library(flexdashboard)
library(tsbox)
library(dygraphs)
library(readr)
library(dplyr)
library(tidyr)
library(knitr)
library(ggplot2)
today <- as.character(Sys.Date())
keywords <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos", "Insolvenz","Inflation") #
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/raw/at/trendecon_sa.csv")
economic_sentiment <- Google_AT_daily %>%
select(time,value) %>%
ts_xts()
keywords <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos", "Insolvenz","Inflation") #
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/raw/at/trendecon_sa.csv")
economic_sentiment <- Google_AT_daily %>%
select(time,value) %>%
ts_xts()
View(Google_AT_daily)
library(flexdashboard)
library(tsbox)
library(dygraphs)
library(readr)
library(dplyr)
library(tidyr)
library(knitr)
library(ggplot2)
today <- as.character(Sys.Date())
keywords <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos", "Insolvenz","Inflation") #
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/raw/at/trendecon_sa.csv")
economic_sentiment <- Google_AT_daily %>%
select(time,value) %>%
ts_xts()
events <- read.csv2("https://raw.githubusercontent.com/anneval/MA_Dashboard/main/docs/Events.csv")
dygraph(economic_sentiment,group = "keywords")%>%
dyAxis("x", drawGrid = FALSE)%>%
dySeries("value", label = "Index")%>%
dyRangeSelector(dateWindow = c("2020-01-01", today))%>%
dyEvent(events)%>%
dyOptions(useDataTimezone = TRUE)
View(Google_AT_daily)
economic_sentiment <- Google_AT_daily %>%
select(time,value) %>%
ts_xts()
o
economic_sentiment <- Google_AT_daily %>%
#select(time,value) %>%
ts_xts()
View(economic_sentiment)
dygraph(economic_sentiment,group = "keywords")%>%
dyAxis("x", drawGrid = FALSE)%>%
dySeries("value", label = "Index")%>%
dyRangeSelector(dateWindow = c("2020-01-01", today))%>%
dyEvent(events)%>%
dyOptions(useDataTimezone = TRUE)
dygraph(economic_sentiment,group = "keywords")%>%
dyAxis("x", drawGrid = FALSE)%>%
dySeries("value", label = "Index")%>%
dyRangeSelector(dateWindow = c("2020-01-01", today))%>%
dyEvent(events) %>%
dyOptions(useDataTimezone = TRUE)
economic_sentiment <- Google_AT_daily %>%
select(time,value) %>%
ts_xts()
gdp_qtrly <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/RData/GDP_oecd.csv")
View(gdp_qtrly)
gdp_qtrly <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/RData/GDP_oecd.csv")[,6:7]
View(gdp_qtrly)
View(gdp_qtrly)
gdp_qtrly <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/RData/GDP_oecd.csv")[9:71,6:7]
gdp_qtrly <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/RData/GDP_oecd.csv")[,6:7]
colnames(gdp_qtrly)[colnames(gdp_qtrly) %in% c("TIME", "Value")] <- c("QDate", "Value")
View(gdp_qtrly)
View(Google_AT_daily)
