library(collapse)
library(urca)
library(macror) # for latex table adf
library(xtable) # latex table
rm(list=ls())
getwd()
t_0 <- as.Date("2006-01-01") #Setting start date for the series
t_1 <- as.Date("2021-07-01") #Setting end date for the series
t_2 <- as.Date("2021-12-31")
Date_q <- seq.Date(t_0,t_1,by="quarter")
Date_m <- seq.Date(t_0,t_2,by="month")
bigT <- length(Date_q)
M <- 6
Data   <- matrix(NA,bigT,M)
colnames(Data)  <- c("gdp", "cci", "google","gdp_ts", "cci_ts", "google_ts")
Data <- as.data.frame(Data)
rownames(Data)  <- as.Date(Date_q)
# abgerufen final am 11.02.2022
#Source: https://data.oecd.org/gdp/quarterly-gdp.htm#indicator-chart
gdp <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/RData/GDP_oecd.csv")[9:71,6:7]
colnames(gdp)[colnames(gdp) %in% c("TIME", "Value")] <- c("QDate", "value")
gdp <- cbind(gdp,Date_q)
#ts:
gdp_ts <- ts(gdp$value, start=c(2006,1), end = c(2021,3), frequency = 4)
Data[(Date_q%in%gdp$Date_q),1] <- gdp$value
Data$gdp_ts <- ts(Data$gdp, start=c(2006,1), end = c(2021,3), frequency = 4)
# abgerufen final am 11.02.2022
#Source: https://ec.europa.eu/info/business-economy-euro/indicators-statistics/economic-databases/business-and-consumer-surveys/download-business-and-consumer-survey-data/time-series_en#consumers
cci <- read.csv2("https://raw.githubusercontent.com/anneval/MA_data/main/RData/CCI.csv")[253:444,c(1,297)]
colnames(cci)[colnames(cci) %in% c("X", "CONS.AT.TOT.COF.BS.M")] <- c("time", "value")
cci <- cbind(cci,Date_m)
cci <- arrange(cci, Date_m)
cci$Date_q <- as.yearqtr(cci$Date_m)
cci$Date_q <- as.Date(cci$Date_q)
#cci$Date_q  <- as.character(cci$Date_m)
#cci$Date_q[CCI_mntly$Date_q == "2021 Q4"] <- "2021 Q3"
cci_qtrly <- cci %>% group_by(Date_q) %>%
summarise_all(mean)
cci_qtrly_63 <- cci_qtrly[1:63,]
Data[(Date_q%in%cci_qtrly_63$Date_q),2] <- (cci_qtrly_63$value)
Data$cci_ts <- ts(Data$cci, start=c(2006,1), end = c(2021,3), frequency = 4)
# abgerufen: daily update
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/raw/at/trendecon_sa.csv")
# transform to quarterly and then do ts:
Google_AT_daily$time <- as.Date(Google_AT_daily$time)
Google_AT_daily <- arrange(Google_AT_daily, time)
Google_AT_daily$Date_q <- as.yearqtr(Google_AT_daily$time)
Google_AT_daily$Date_q <- as.Date(Google_AT_daily$Date_q)
#Google_AT_daily$QDate  <- as.character(Google_AT_daily$QDate)
#Google_AT_daily$QDate[Google_AT_daily$QDate == "2022 Q1"] <- "2021 Q3"
#Google_AT_daily$QDate[Google_AT_daily$QDate == "2021 Q4"] <- "2021 Q3"
Google_AT_qtrly <- Google_AT_daily %>% group_by(Date_q) %>%
summarise_all(mean)
#rownames(Google_AT_qtrly)  <- as.Date(Date_q)
Google_AT_qtrly_63 <- Google_AT_qtrly[1:63,]
Data[(Date_q%in%Google_AT_qtrly_63$Date_q),3] <- (Google_AT_qtrly_63$value)
Data$google_ts <- ts(Data$google, start=c(2006,1), end = c(2021,3), frequency = 4)
Data_Var <- Data[,1:3]
Data$gdp_lag <- lag(Data$gdp)
Data_train <- Data[1:44,] # 70%
Data_test <- Data[45:63,] #30%
adfgdp <- adf.test(Data$gdp) # stationary
adfcci <- adf.test(Data$cci) # stationary
adfgoogle <- adf.test(Data$google) # not stat # test agao  after remove inlation
# not stationary since I included inflation...
adfgdp
adfcci
adfgoogle
adfgdpdiff <- adf.test(diff(Data$gdp))
adf.test(diff(Data$cci))
adf.test(diff(Data$google))
adf.test(diff(Data$gdp))
adf.test(diff(Data$cci))
adf.test(diff(Data$google))
adf.test(diff(Data$cci))
adf.test(diff(Data$gdp))
adf.test(diff(Data$cci))
adf.test(diff(Data$google))
kpss.test(Data$gdp) # stationary
kpss.test(Data$cci) #  stationary at 5%...0.09
kpss.test(Data$google) # stationary
pp.test(Data$gdp) # stationary
pp.test(Data$cci) # not stationary (0.21)
pp.test(Data$google) # stationary
par(mfrow = c(3,1))
acf(Data$gdp)
acf(Data$cci)
acf(Data$google)
par(mfrow = c(3,1))
pacf(Data$gdp)
pacf(Data$cci)
pacf(Data$google)
expanding_window_OLS <- function(data, dep_var, start = 19){
expanding_OLS <- list() # empty vector
predicted_OLS <- list()
resid_OLS <- list()
error_OLS <- c()
i <- 0
for(t in start:nrow(data)){ # go from 19 bis 63
i <- i+1 # first one is i=1
expanding_OLS[[i]] <- lm(formula = model, data = data[1:(t-1),]) # first train is 1:18
resid_OLS[[i]] <- resid(expanding_OLS[[i]])
predicted_OLS[i] <- predict(expanding_OLS, newdata = data[t,]) # change here into newdatda for forecast...
error_OLS[i] <- as.numeric(predicted_OLS[[i]]- data[t,1]) # against original GDP growth
Summary_OLS <- list(expanding_OLS,predicted_OLS, resid_OLS,error_OLS)
}
return(Summary_OLS)
}
dep_var <- "gdp"
model = gdp ~ gdp_lag
expanding_OLS1 <- expanding_window_OLS(Data[2:63,], dep_var, start = 19)
#predictions
pred1 <- do.call(rbind.data.frame, expanding_OLS1[[2]]) # NAs wegen lag!
Date_q_pred <- Date_q[20:63]
colnames(pred1) <- c("value")
pred1 <- as.ts(pred1, start=c(2010,4), end = c(2021,3), frequency = 4)
# Out of Sample error terms----------------------------------------------------------------
error_OLS1 <- expanding_OLS1[[4]]
error_OLS1 <-error_OLS1[!is.na(error_OLS1)]
MAE_OLS_OOS1 <- mean(abs(error_OLS1))
MAE_OLS_OOS1
RMSE_OLS_OOS1  <- sqrt(mean(error_OLS1^2))
RMSE_OLS_OOS1
MSE_OLS1 <- mean(error_OLS1^2)
MSE_OLS1
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_OLS1 <- expanding_OLS1[[3]]
final_resid_OLS1 <- resid_OLS1[[length(resid_OLS1)]]
RMSE_OLS_IS1    <- sqrt(mean(final_resid_OLS1^2))
RMSE_OLS_IS1
# Autocorrelation residuals:
checkresiduals(final_resid_OLS1)
plotexp_1 <- ts.plot(ts(Data[20:63,1],frequency = 4, start = c(2010,4),end = c(2021,3)),
ts(pred1,frequency = 4, start = c(2010,4),end = c(2021,3)),
col = c("black", "red"),
xlab = "Year",
ylab = "GDP growth (%)",
lwd = 1)
legend("bottomleft", c("GDP growth", "AR(1)"), col=c("black","red"), lty=c(1),
xpd=TRUE, bty="b", cex=0.75
)
model = gdp ~ cci
expanding_OLS2 <- expanding_window_OLS(Data, dep_var, start = 19)
pred2 <- do.call(rbind.data.frame, expanding_OLS2[[2]])
colnames(pred2) <- c("value")
Date_q_pred <- Date_q[19:63]
pred2 <- as.ts(pred2, start=c(2010,3), end = c(2021,3), frequency = 4)
# Out of Sample error terms----------------------------------------------------------------
error_OLS2 <- expanding_OLS2[[4]]
error_OLS2 <-error_OLS2[!is.na(error_OLS2)]
MAE_OLS_OOS2 <- mean(abs(error_OLS2))
MAE_OLS_OOS2
RMSE_OLS_OOS2   <- sqrt(mean(error_OLS2^2))
RMSE_OLS_OOS2
MSE_OLS2 <- mean(error_OLS2^2)
MSE_OLS2
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_OLS2 <- expanding_OLS2[[3]]
final_resid_OLS2 <- resid_OLS2[[length(resid_OLS2)]]
RMSE_OLS_IS2   <- sqrt(mean(final_resid_OLS2^2))
RMSE_OLS_IS2
# Autocorrelation residuals:
checkresiduals(final_resid_OLS2)
#plot(forecast(pred,h=3))
plotexp_2 <- ts.plot(ts(Data[19:63,1],frequency = 4, start = c(2010,3)),
ts(pred2,frequency = 4, start = c(2010,3)),
col = c("black", "red"),
xlab = "Year",
ylab = "GDP growth (%)",
lwd = 1)
legend("bottomleft", c("GDP growth", "CCI"), col=c("black","red"), lty=c(1),
xpd=TRUE, bty="b", cex=0.75
)
model = gdp ~ google
expanding_OLS3 <- expanding_window_OLS(Data, dep_var, start = 19)
pred3 <- do.call(rbind.data.frame, expanding_OLS3[[2]])
pred3
colnames(pred3) <- c("value")
Date_q_pred <- Date_q[19:63]
pred3 <- as.ts(pred3, start=c(2010,3), end = c(2021,3), frequency = 4)
# Out of Sample error terms----------------------------------------------------------------
error_OLS3 <- expanding_OLS3[[4]]
error_OLS3 <-error_OLS3[!is.na(error_OLS3)]
MAE_OLS_OOS3 <- mean(abs(error_OLS3))
MAE_OLS_OOS3
RMSE_OLS_OOS3 <- sqrt(mean(error_OLS3^2))
RMSE_OLS_OOS3
MSE_OLS3 <- mean(error_OLS3^2)
MSE_OLS3
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_OLS3 <- expanding_OLS3[[3]]
final_resid_OLS3 <- resid_OLS3[[length(resid_OLS3)]]
RMSE_OLS_IS3    <- sqrt(mean(final_resid_OLS3^2))
RMSE_OLS_IS3
# Autocorrelation residuals:
checkresiduals(final_resid_OLS3)
fit <- auto.arima(Data[,"gdp"], trace = TRUE,  ic = c("aic")) #MA(1)
arima <- Arima(Data[,"gdp"], model=fit)
summary(arima) # IS errors
forecast_MA1 <-predict(arima,n.ahead = 3)
forecast::accuracy(arima)
accuracy(Data[,"gdp"],arima$fitted)
adf.test(arima$residuals)
stargazer::stargazer(fit$var.coef)
forecast_MA1 <-predict(arima,n.ahead = 3)
forecast_MA1$pred
accuracy(Data[,"gdp"],arima$fitted)
#forecast <- forecast(Data[,"gdp"], model = arima, h = 10)$fitted # We make a forecast three periods ahead and we extract the fitted values from the object forecast.#predict forecast same here h=...
acc_oos_MA1 <-forecast::accuracy(Data$gdp,forecast_MA1$pred)
future = forecast(arima, h = 3) # same results as predict and nahead but only this way plotting works!
plot(future)
adf.test(arima$residuals)
arma1 <- arima(Data$gdp, order = c(1,0,1))
ar2ma1 <- arima(Data$gdp, order = c(2,0,1))
ar1 <- arima(Data$gdp, order = c(1,0,0))
ar2 <- arima(Data$gdp, order = c(2,0,0))
ma1 <- arima(Data$gdp, order = c(0,0,1))
AIC <- AIC(arma1, ar2ma1, ar1, ar2,ma1)
BIC<- BIC(arma1, ar2ma1, ar1, ar2,ma1)
ab<- cbind(AIC, BIC)
stargazer::stargazer(arma1,ar2ma1,ar1,ar2,ma1)
ARMA_11 <- Arima(Data$gdp, order = c(1,0,1))
summary(ARMA_11)
forecast::accuracy(ARMA_11)
adf.test(ARMA_11$residuals)
forecast_ARMA1 <-predict(ARMA_11,n.ahead = 3)
forecast_ARMA1$pred
acc_oos_ARMA1 <-forecast::accuracy(Data$gdp,forecast_ARMA1$pred)
future = forecast(ARMA_11, h = 3) # same results as predict and nahead but only this way plotting works!
plot(future)
var.AIC <- VAR(Data[,1:3],  type="none" , lag.max = 2, ic = c("AIC"))
var.AIC.c <- VAR(Data[,1:3],  type="const" , lag.max = 2, ic = c("AIC")) ## lag 2
AIC.woc <- cbind(AIC(var.AIC), BIC(var.AIC))
AIC.wc<- cbind(AIC(var.AIC.c), BIC(var.AIC.c))
MC.table <- rbind(AIC.woc, AIC.wc)
MC.table.names <- rbind("using AIC without constant", "using AIC with constant"
)
rownames(MC.table)<- MC.table.names
colnames(MC.table) <- cbind("AIC", "BIC")
print(xtable::xtable(MC.table,caption="Model Choice Results",label="tab:mc"),
sanitize.text.function=function(UR.table){UR.table},comment=FALSE)
View(MC.table)
View(Data)
fit_VAR1 <- VARselect(Data[,1:3],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag_VAR1 <- fit_VAR1$selection[1]  # AiC, Hq auch 2 , SC auch
lag_VAR1
VAR1_est <- VAR(y = Data[,1:3], p = lag_VAR1,type = "const")
summary(VAR1_est$varresult$gdp)
forecast::accuracy(VAR1_est$varresult$gdp) # IS accuracy
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecast_VAR1<- predict(VAR1_est,n.ahead =3)
forecast_VAR1
###### OOS accuracy?
acc_oos_VAR1 <-forecast::accuracy(Data$gdp,forecast_VAR1$fcst$gdp)
View(acc_oos_VAR1)
resid_VAR1 <- data.frame(
VAR1_est$varresult$gdp$residuals,
VAR1_est$varresult$cci$residuals,
VAR1_est$varresult$google$residuals)
resid_VAR1 <- data.frame(
VAR1_est$varresult$gdp$residuals,
VAR1_est$varresult$cci$residuals,
VAR1_est$varresult$google$residuals)
plot(Normtest_VAR1)
Normtest_VAR1 <- normality.test(VAR1_est) # H0: normality
print(Normtest_VAR1)
plot(Normtest_VAR1)
Normtest_VAR1 <- normality.test(VAR1_est) # H0: normality
print(Normtest_VAR1)
plot(Normtest_VAR1)
heckresiduals(VAR1_est)
checkresiduals(VAR1_est)
checkresiduals(VAR1_est)
checkresiduals(VAR1_est$varresult$gdp)
df <- as.data.frame(Data[,1:3])
View(df)
df[,"Residuals"]  <- as.numeric(residuals(VAR1_est$varresult$gdp$residuals))
adf.test(VAR1_est$varresult$gdp$residuals) # stationary
adf.test(VAR1_est$varresult$cci$residuals) #stationary
adf.test(VAR1_est$varresult$google$residuals)#stationary
fit_VAR1 <- VARselect(Data[,1:3],type = "const")
View(fit_VAR1)
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag_VAR1 <- fit_VAR1$selection[1]  # AiC, Hq auch 2 , SC auch
lag_VAR1
VAR1_est <- VAR(y = Data[,1:3], p = lag_VAR1,type = "const")
summary(VAR1_est$varresult$gdp)
VAR1_est <- VAR(y = Data[,1:3], p = 2,type = "const")
summary(VAR1_est$varresult$gdp)
VAR1_est <- VAR(y = Data[,1:3], p = 3,type = "const")
summary(VAR1_est$varresult$gdp)
adf.test(VAR1_est$varresult$gdp$residuals) # stationary
VAR1_est <- VAR(y = Data[,1:3], p = 4,type = "const")
summary(VAR1_est$varresult$gdp)
adf.test(VAR1_est$varresult$gdp$residuals) # stationary
adf.test(VAR1_est$varresult$gdp$residuals) # stationary
VAR1_est <- VAR(y = Data[,1:3], p = 3,type = "const")
adf.test(VAR1_est$varresult$gdp$residuals) # stationary
# Autocorrelation residuals:
checkresiduals(final_resid_OLS3)
checkresiduals(final_resid_OLS3)
checkresiduals(VAR1_est$varresult$gdp)
checkresiduals(VAR1_est$varresult$gdp)
fit_VAR1 <- VARselect(Data[,1:3],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag_VAR1 <- fit_VAR1$selection[1]  # AiC, Hq auch 2 , SC auch
lag_VAR1
VAR1_est <- VAR(y = Data[,1:3], p =lag_VAR1 ,type = "const")
checkresiduals(VAR1_est$varresult$gdp)
VAR1_est <- VAR(y = Data[,1:3], p =4 ,type = "const")
checkresiduals(VAR1_est$varresult$gdp)
durbinWatsonTest(VAR1_est$varresult$gdp)  # Thereby, a small p-value of < 2.2e-16 indicates there is significant autocorrelation remaining in the residuals in the model below.
library(car)
durbinWatsonTest(VAR1_est$varresult$gdp)  # Thereby, a small p-value of < 2.2e-16 indicates there is significant autocorrelation remaining in the residuals in the model below.
VAR1_est <- VAR(y = Data[,1:3], p =lag_VAR1 ,type = "const")
adf.test(VAR1_est$varresult$gdp$residuals) # stationary
adf.test(VAR1_est$varresult$cci$residuals) #stationary
adf.test(VAR1_est$varresult$google$residuals)#stationary
adf.test(VAR1_est$varresult$gdp$residuals) # stationary
Normtest_VAR1 <- normality.test(VAR1_est) # H0: normality
plot(Normtest_VAR1)
library(car)
durbinWatsonTest(VAR1_est$varresult$gdp)  # Thereby, a small p-value of < 2.2e-16 indicates there is significant autocorrelation remaining in the residuals in the model below.
#breusch_godfrey
ser.test_VAR1 <- serial.test(VAR1_est) # H0: no serial correlation, here cannot reject H0 of no correlation
ser.test_VAR1
fit_VAR2 <- VARselect(Data[,c(1,3)],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag_VAR2 <- fit_VAR2$selection[1]  # AiC, Hq auch 2 , SC auch
lag_VAR2
VAR2_est
VAR2_est <- VAR(y = Data[,c(1,3)], p = lag_VAR2,type = "const")
summary(VAR2_est$varresult$gdp)
forecast::accuracy(VAR2_est$varresult$gdp) # IS accuracy
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecast_VAR2 <- predict(VAR2_est,n.ahead =3)
forecast_VAR2
###### OOS accuracy?
acc_oos_VAR2 <-forecast::accuracy(Data$gdp,forecast_VAR2$fcst$gdp)
plot(forecast_VAR2)
resid_VAR2 <- data.frame(
VAR2_est$varresult$gdp$residuals,
VAR2_est$varresult$google$residuals)
adf.test(VAR2_est$varresult$gdp$residuals) # not!!!! stationary#stationary stil have autocorrelation!!!
adf.test(VAR2_est$varresult$google$residuals)#stationary
Normtest_VAR2 <- normality.test(VAR2_est) # H0: normality
print(Normtest_VAR2)
plot(Normtest_VAR2)
library(car)
durbinWatsonTest(VAR2_est$varresult$google)  # Thereby, a small p-value of < 2.2e-16 indicates there is significant autocorrelation remaining in the residuals in the model below.
ser.test_VAR2 <- serial.test(VAR2_est) # H0: no serial correlation
ser.test_VAR2
checkresiduals(arima)
checkresiduals(ARMA_11)
#breusch_godfrey
ser.test_VAR1 <- serial.test(VAR1_est) # H0: no serial correlation, here cannot reject H0 of no correlation
ser.test_VAR1
#breusch_godfrey
ser.test_VAR1 <- serial.test(VAR1_est$varresult$gdp) # H0: no serial correlation, here cannot reject H0 of no correlation
#breusch_godfrey
ser.test_VAR1 <- serial.test(VAR1_est) # H0: no serial correlation, here cannot reject H0 of no correlation
serial.test
?serial.test
#breusch_godfrey
ser.test_VAR1 <- serial.test(VAR1_est,type=BG) # H0: no serial correlation, here cannot reject H0 of no correlation
#breusch_godfrey
ser.test_VAR1 <- serial.test(VAR1_est,type="BG") # H0: no serial correlation, here cannot reject H0 of no correlation
ser.test_VAR1
summary(VAR1_est$varresult$gdp)
stargazer::stargazer(VAR1_est$varresult)
forecast::accuracy(VAR1_est$varresult) # IS accuracy
forecast::accuracy(VAR1_est$varresult) # IS accuracy
$gdp
fit_VAR1 <- VARselect(Data[,1:3],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag_VAR1 <- fit_VAR1$selection[1]  # AiC, Hq auch 2 , SC auch
lag_VAR1
VAR1_est <- VAR(y = Data[,1:3], p =lag_VAR1 ,type = "const")
summary(VAR1_est$varresult$gdp)
summary(VAR1_est$varresult)
VAR1_est
summary(VAR1_est$varresult$gdp)
summary(VAR1_est)
forecast::accuracy(VAR1_est$varresult$gdp) # IS accuracy
summary(VAR1_est)
VAR1_est <- VAR(y = Data[,1:3], p =3 ,type = "const")
adf.test(VAR1_est$varresult$gdp$residuals) # stationary
#breusch_godfrey
ser.test_VAR1 <- serial.test(VAR1_est,type="") # H0: no serial correlation, here cannot reject H0 of no correlation
#breusch_godfrey
ser.test_VAR1 <- serial.test(VAR1_est,type="PT.asymptotic") # H0: no serial correlation, here cannot reject H0 of no correlation
ser.test_VAR1
#breusch_godfrey
ser.test_VAR1 <- serial.test(VAR1_est,type="") # H0: no serial correlation, here cannot reject H0 of no correlation
#breusch_godfrey
ser.test_VAR1 <- serial.test(VAR1_est,type="PT.adjusted") # H0: no serial correlation, here cannot reject H0 of no correlation
ser.test_VAR1
Normtest_VAR1 <- normality.test(VAR1_est) # H0: normality
print(Normtest_VAR1)
arch.test(VAR1_est)
plot(ser.test_VAR1, names = "PES")
plot(ser.test_VAR1, names = "GDP")
VAR_Est_CUSUM <- stability(VAR1_est, type = "OLS-CUSUM")
plot(VAR_Est_CUSUM)
breusch_godfrey(VAR1_est$varresult$gdp)
library(fable)
breusch_godfrey(VAR1_est$varresult$gdp)
breusch_godfrey(VAR1_est)
breusch_godfrey(VAR1_est$varresult)
residuals <- residuals(VAR1_es)
residuals <- residuals(VAR1_est)
View(residuals)
vars::serial.test(resid = residuals)
breusch_godfrey(fit$aicc$resid)
lmtest::bgtest(residuals)
Box.test(residuals)
vars::serial.test(resid = residuals[,3])
vars::serial.test(resid = VAR1_est$varresult$gdp)
#breusch_godfrey
ser.test_VAR1 <- serial.test(VAR1_est,type="PT.adjusted") # H0: no serial correlation, here cannot reject H0 of no correlation
ser.test_VAR1
bgtest(VAR1_est)
bgtest(VAR1_est$varresult)
Box.test(VAR1_est)
Box.test(VAR1_est$varresult$gdp)
Box.test(VAR1_est$varresult$gdp)
VAR_Est_CUSUM <- stability(VAR1_est, type = "OLS-CUSUM")
plot(VAR_Est_CUSUM)
acf(final_resid_OLS3)
ser.test_VAR1 <- serial.test(VAR1_est,type="")
ser.test_VAR1 <- serial.test(VAR1_est,type="BG")
#breusch_godfrey
ser.test_VAR1_PT <- serial.test(VAR1_est,type="PT.adjusted") # H0: no serial correlation, here cannot reject H0 of no correlation
ser.test_VAR_BG <- serial.test(VAR1_est,type="BG")
ser.test_VAR1_PT
ser.test_VAR_BG
ser.test_m3bg <- serial.test(final_resid_OLS3,type="BG")
bgtest(y ~ x1 + x2, order=3, data=df)
bgtest(expanding_OLS3, order=3, data=df)
View(expanding_OLS3)
bgtest(expanding_OLS3[1][45], order=3, data=df)
bgtest(final_resid_OLS3, order=3, data=df)
bgtest(final_resid_OLS3, order=3, data=df)
# Autocorrelation residuals:
checkresiduals(final_resid_OLS3)
checkresiduals(final_resid_OLS3)
bgtest(gdp ~ google, order=3, data=Data)
bgtest(gdp ~ google, order=3, data=Data)
bgtest(gdp ~  gdp_lag + cci, order=3, data=Data)
durbinWatsonTest(final_resid_OLS4)
durbinWatsonTest(final_resid_OLS3)
durbinWatsonTest(expanding_OLS3)
durbinWatsonTest(expanding_OLS3[1])
durbinWatsonTest(expanding_OLS3[1]¢[45])
durbinWatsonTest(expanding_OLS3[1][45])
View(expanding_OLS3)
durbinWatsonTest(expanding_OLS3[1][45]$residuals)
durbinWatsonTest(expanding_OLS3$residuals)
# Autocorrelation residuals:
checkresiduals(final_resid_OLS4)
# Autocorrelation residuals:
checkresiduals(final_resid_OLS3)
bgtest(gdp ~ google, order=3, data=Data)
bgtest(gdp ~ google, order=10, data=Data)
bgtest(gdp ~ google, order=4, data=Data)
bgtest(gdp ~ google, order=5, data=Data)
bgtest(gdp ~ google, order=1, data=Data)
bgtest(gdp ~ google, order=10, data=Data)
bgtest(gdp ~ google, order=0, data=Data)
bgtest(gdp ~ google, order=1, data=Data)
bgtest(gdp ~ google, order=2, data=Data)
bgtest(gdp ~ google, order=3, data=Data)
bgtest(gdp ~ google, order=4, data=Data)
# Autocorrelation residuals:
checkresiduals(final_resid_OLS3)
#breusch_godfrey
ser.test_VAR1_PT <- serial.test(VAR1_est,type="PT.adjusted") # H0: no serial correlation, here cannot reject H0 of no correlation
ser.test_VAR1_PT
ser.test_VAR_BG
checkresiduals(VAR1_est)
checkresiduals(VAR1_est$varresult$gdp)
VAR1_est <- VAR(y = Data[,1:3], p = lag_VAR1,type = "const")
checkresiduals(VAR1_est$varresult$gdp)
checkresiduals(VAR1_est$varresult$gdp)
VAR1_est <- VAR(y = Data[,1:3], p = lag_VAR1,type = "const")
fit_VAR1 <- VARselect(Data[,1:3],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag_VAR1 <- fit_VAR1$selection[1]  # AiC, Hq auch 2 , SC auch
VAR1_est <- VAR(y = Data[,1:3], p = lag_VAR1,type = "const")
summary(VAR1_est$varresult$gdp)
summary(VAR1_est)
VAR1_est <- VAR(y = Data[,1:3], p = lag_VAR1,type = "const")
summary(VAR1_est$varresult$gdp)
summary(VAR1_est)
fit_VAR1 <- VARselect(Data[,1:3],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag_VAR1 <- fit_VAR1$selection[1]  # AiC, Hq auch 2 , SC auch
lag_VAR1
VAR1_est <- VAR(y = Data[,1:3], p = lag_VAR1,type = "const")
summary(VAR1_est$varresult$gdp)
summary(VAR1_est)
forecast::accuracy(VAR1_est$varresult$gdp) # IS accuracy
View(VAR1_est)
VAR1_est <- VAR(y = Data[,1:3], p = lag_VAR1,type = "const")
