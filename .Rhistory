pred_mod5 <- predict(mod6, Data_test)
summary(mod6)
forecast:accuracy(mod6)
forecast:accuracy(mod5)
mod1 <- lm(gdp ~ lag(gdp), data = Data_train)
pred_mod1 <- predict(mod1, Data_test)
pred_mod1
summary(mod1)
forecast::accuracy(mod1)
forecast::accuracy(mod6)
forecast::accuracy(pred_mod5)
##OOS
pred_mod5 <- predict(mod6, Data_test)
pred_mod5
rmse(Data_test,pred_mod5)
error <- Data_test$gdp - pred_mod5
RMSE <- sqrt(mean(error^2))
RMSE
error <- Data_test$gdp - pred_mod5
error <- drop_na(error)
error <-error[!is.na(error)]
RMSE <- sqrt(mean(error^2))
RMSE
acc <- (Data_test$gdp,pred_mod5)
acc <- accuracy(Data_test$gdp,pred_mod5)
error
error <- Data_test$gdp - pred_mod5
error
mod3<- lm(gdp ~ google, data = Data_train)
pred_mod3 <- predict(mod3, Data_test)
summary(mod3)
forecast::accuracy(mod3)
acc <- accuracy(Data_test$gdp,pred_mod3)
acc
acc <-forecast::accuracy(Data_test$gdp,pred_mod3)
acc
acc <-forecast::accuracy(Data_test$gdp,pred_mod5)
acc_oos
acc_oos <-forecast::accuracy(Data_test$gdp,pred_mod5)
acc_oos
acc_oos <-forecast::accuracy(Data_test$gdp,pred_mod5)
mod5<- lm(gdp ~ lag(gdp) + google, data = Data_train)
pred_mod5 <- predict(mod5, Data_test)
error <- Data_test$gdp - pred_mod5
error <-error[!is.na(error)]
RMSE <- sqrt(mean(error^2))
RMSE
error
summary(mod5)
forecast::accuracy(mod5)
acc_oos <-forecast::accuracy(Data_test$gdp,pred_mod5)
acc_oos
forecast::accuracy(mod5)
p <- predict(v, n.ahead=8)
p$exo.fcst
acc_oos <-forecast::accuracy(Data_test$gdp,p$fcst$gdp)
acc_oos <-forecast::accuracy(testdata$gdp,p$fcst$gdp)
acc_oos <-forecast::accuracy(testdata,p$fcst$gdp)
View(acc_oos)
acc_oos_VAR< <-forecast::accuracy(testdata,p$fcst$gdp)
acc_oos_VAR <-forecast::accuracy(testdata,p$fcst$gdp)
View(acc_oos_VAR)
forecast::accuracy(v)
dat <- ts(Data[,1:3], frequency = 4, start = c(2006, 1))
start=c(2017, 1)
end = c(2016,4)
trainingdata <- window(dat, end = end)
testdata <- window(dat, start=start)
v <- VAR(trainingdata, p=2)
p <- predict(v, n.ahead=8)
View(p)
res <- residuals(v)
fits <- fitted(v)
acc_oos_VAR <-forecast::accuracy(testdata,p$fcst$gdp) # works!!! validated against test dat
acc_oos_VAR <-forecast::accuracy(testdata,p$fcst$cci)
acc_oos_VAR <-forecast::accuracy(testdata,p$fcst$google)
View(acc_oos_VAR)
acc_oos_VAR <-forecast::accuracy(testdata,p$fcst$cci)
View(acc_oos_VAR)
acc_oos_VAR <-forecast::accuracy(testdata,p$fcst$gdp) # works!!! validated against test dat
View(acc_oos_VAR)
acc_is_VAR <-forecast::accuracy(trainingdata,v$varresult$gdp$fitted.values) # works!!! validated against test dat
View(acc_is_VAR)
summary(v)
summary(v$varresult$gdp)
View(v)
RMSE_OLS_IS    <- sqrt(mean(res^2))
acc_is_VAR <-forecast::accuracy(trainingdata,v$varresult$gdp$fitted.values) # works!!! validated against
acc_oos_VAR <-forecast::accuracy(testdata,p$fcst$gdp) # works!!! validated against test dat
acc_is_VAR <-forecast::accuracy(trainingdata,v$varresult$gdp$fitted.values) # works!!! validated against
View(v)
res <- residuals(v$varresult$gdp)
RMSE_OLS_IS    <- sqrt(mean(res^2))
res <- residuals(v)
acc_is_VAR <-forecast::accuracy(trainingdata,v$varresult) # works!!! validated against
acc_is_VAR <-forecast::accuracy(trainingdata,v$varresult$gdp) # works!!! validated against
res <- resid(v)
final_resid_OLS <- res[[length(res)]]
RMSE_OLS_IS    <- sqrt(mean(res^2))
RMSE_OLS_IS
acc_is_VAR <-forecast::accuracy(trainingdata,v$varresult$gdp$fitted.values) # works!!! validated against
acc_is_VAR
res <- residuals(v)
View(res)
RMSE_OLS_IS    <- sqrt(mean(res^2))
fits <- fitted(v)
View(fits)
acc_is_VAR <-forecast::accuracy(trainingdata,fits$gdp) # works!!! validated against
fits <- fitted(v)
fits
v <- VAR(dat, p=2)
acc_is_VAR <-forecast::accuracy(trainingdata,v$varresult$gdp$fitted.values) # works!!! validated against
View(acc_is_VAR)
v <- VAR(trainingdata, p=2)
summary(v$varresult$gdp)
p <- predict(v, n.ahead=8)
res <- residuals(v)
fits <- fitted(v)
res <- residuals(v$varresult$gdp)
RMSE <- sqrt(mean(res^2))
acc_is_VAR <-forecast::accuracy(trainingdata,v$varresult$gdp$fitted.values) # works!!! validated against
View(acc_is_VAR)
View(acc_is_VAR)
RMSE
RMSE*2
View(v)
acc_is_VAR <-forecast::accuracy(trainingdata,v$varresult$gdp$residuals) # works!!! validated against
View(acc_is_VAR)
acc_is_VAR <-forecast::accuracy(trainingdata,v$varresult$gdp$fitted.values) # works!!! validated against
sqrt(mean(v$residuals^2))
x <-sqrt(mean(v$residuals^2))
res <- residuals(v$varresult$gdp)
x <-sqrt(mean(res^2))
acc_is_VAR <-forecast::accuracy(v$varresult$gdp$fitted.values) # works!!! validated against
acc_is_VAR <-forecast::accuracy(trainingdata,v$varresult$gdp$fitted.values) # works!!! validated against
acc_is_VAR <-accuracy(trainingdata,v$varresult$gdp$fitted.values) # works!!! validated against
acc_is_VAR
acc_is_VAR <-forecast::accuracy(trainingdata,v$varresult$gdp$fitted.values) # works!!! validated against
p <- predict(v)
View(p)
View(v)
Yselect <- VARselect(Data[,1:3],type = "const")
lag
lag
Yselect <- VARselect(Data[,1:3],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag <- Yselect$selection[1]  # AiC, Hq auch 2 , SC auch
lag
VAR_est <- VAR(y = Data[,1:3], p = lag)
summary(VAR_est)
summary(VAR_est$varresult$gdp)
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est, )
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est,n.ahead = 3 )
forecasts
plot(forecasts)
rmse(Data[,4:6],forecasts)
#pred <- predict(arima.OOS,n.ahead = 3) # same !
#fore <- forecast(arima.OOS,h=3) # same !
autoplot(forecast(y_pred,h=3)) # forecast 1Q  ahead!!!
library(collapse)
# keep orginals ones though,...
Data_Var <-flag(Data_Var, 1:2)
# keep orginals ones though,...
Data_Var <-flag(DataÂ¢[1:3], 1:2)
# keep orginals ones though,...
Data_Var <-flag(Data[1:3], 1:2)
View(Data_Var)
Data_Var <- full_join(Data[,1:3],Data_Var)
View(Data_Var)
Data_Var <- outer_join(Data[,1:3],Data_Var)
Data_Var <- join(Data[,1:3],Data_Var)
Data_Var <- cbind(Data[,1:3],Data_Var)
View(Data_Var)
View(v)
model= gdp ~ L1.gdp +L2.gdp + L1.cci +L2.cci +L1.google + L2.google
expanding_OLS <- expanding_window_OLS(Data_Var[3:63,], dep_var, start = 13) # adjust start???
expanding_window_OLS <- function(data, dep_var, start = 13){ # change to 12
expanding_OLS <- list() # empty vector
predicted_OLS <- list()
resid_OLS <- list()
error_OLS <- c()
i <- 0
for(t in start:nrow(data)){#t in 13:51
i <- i+1
expanding_OLS[[i]] <- lm(formula = model, data = data[1:(t-1),]) # start at 13-1 so 12!
resid_OLS[[i]] <- resid(expanding_OLS[[i]])
predicted_OLS[[i]] <- predict(expanding_OLS[[i]],newdata = data[t,])#[t,])
error_OLS[i]  <- as.numeric(predicted_OLS[[i]] - data[t,]) # anpassen je nach dem welchs
Summary_OLS <- list(expanding_OLS,predicted_OLS,resid_OLS,error_OLS)
}
return(Summary_OLS)
}
expanding_OLS <- expanding_window_OLS(Data_Var[3:63,], dep_var, start = 13) # adjust start???
dep_var <- "gdp"
expanding_OLS <- expanding_window_OLS(Data_Var[3:63,], dep_var, start = 13) # adjust start???
#predictions
pred <- do.call(rbind.data.frame, expanding_OLS[[2]]) # NAS wegen lag!
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred[3:51]
Date_q_pred <- Date_q[13:63]
rownames(pred) <- Date_q_pred[3:51]
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred[3:51]
Date_q_pred <- Date_q[13:63]
pred <- as.ts(pred, start=c(2009,3), end = c(2021,3), frequency = 4)
ts.plot(pred)
### error in and OOS
error_OLS <- expanding_OLS[[4]]
error_OLS <-error_OLS[!is.na(error_OLS)]
MAE_OLS_OOS <- mean(abs(error_OLS))
MAE_OLS_OOS
RMSE_OLS_OOS  <- sqrt(mean(error_OLS^2))
RMSE_OLS_OOS
MSE_OLS <- mean(error_OLS^2)
MSE_OLS
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_OLS <- expanding_OLS[[3]]
final_resid_OLS <- resid_OLS[[length(resid_OLS)]]
RMSE_OLS_IS    <- sqrt(mean(final_resid_OLS^2))
RMSE_OLS_IS
dat <- ts(Data[,1:3], frequency = 4, start = c(2006, 1))
start=c(2017, 1)
trainingdata <- window(dat, end = end)
testdata <- window(dat, start=start)
v <- VAR(trainingdata, p=4)
summary(v$varresult$gdp)
p <- predict(v, n.ahead=8)
acc_is_VAR <-forecast::accuracy(trainingdata,v$varresult$gdp$fitted.values) # works!!! validated against
acc_oos_VAR <-forecast::accuracy(testdata,p$fcst$gdp) # works!!! validated against test dat
View(acc_is_VAR)
View(acc_oos_VAR)
sum2 <- data.frame(
VAR_est$varresult$gdp$residuals,
VAR_est$varresult$cci$residuals,
VAR_est$varresult$google$residuals)
adf.test( VAR_est$varresult$gdp$residuals) # stationary
adf.test(VAR_est$varresult$cci$residuals) #stationary
adf.test(VAR_est$varresult$google$residuals)#stationary
adf.test( VAR_est$varresult$gdp$residuals) # stationary
adf.test(VAR_est$varresult$cci$residuals) #stationary
adf.test(VAR_est$varresult$google$residuals)#stationary
adf.test(VAR_est$varresult$gdp$residuals) # stationary
adf.test(VAR_est$varresult$cci$residuals) #stationary
adf.test(VAR_est$varresult$google$residuals)#stationary
adf.test(VAR_est$varresult$gdp$residuals) # stationary
adf.test(VAR_est$varresult$google$residuals)#stationary
Normtest <- normality.test(VAR_est) # H0: normality
print(Normtest)
ser.test <- serial.test(VAR_est) # H0: no serial correlation
ser.test
durbinWatsonTest(VAR_est)
library(lmtest)
library(lmtest)
durbinWatsonTest(VAR_est)
dwtest(VAR_est)
dwtest(VAR_est)
library(car)
durbinWatsonTest(VAR_est)
durbinWatsonTest(VAR_est$varresult)
durbinWatsonTest(VAR_est$varresult$gdp)
durbinWatsonTest(v$varresult$gdp)
v <- VAR(trainingdata, p=10) # change t0 2.!!!
durbinWatsonTest(v$varresult$gdp)
v <- VAR(trainingdata, p=12) # change t0 2.!!!
durbinWatsonTest(v$varresult$gdp)
durbin.watson(v$varresult$gdp)
durbinWatsonTest(v$varresult$gdp)
durbinWatsonTest(VAR_est$varresult$gdp)
durbinWatsonTest(VAR_est$varresult$cci)
durbinWatsonTest(VAR_est$varresult$google)
durbinWatsonTest(VAR_est$varresult$gdo)
durbinWatsonTest(VAR_est)
durbinWatsonTest(VAR_est)
durbinWatsonTest(VAR_est$varresult$gdp$residuals)
durbinWatsonTest(VAR_est$varresult$gdp$fitted.values)
durbinWatsonTest(VAR_est$varresult$gdp)
ser.test <- serial.test(VAR_est) # H0: no serial correlation
ser.test
?VAR_est
?VARMA
v <- VAR(trainingdata, p=4) # change t0 2.!!!
varma <- VARMA(trainingdata, p = 4, q = 1, include.mean = T,
fixed = NULL, beta=NULL, sebeta=NULL,
prelim = F, details = F, thres = 2)
library(mts)
install.packages("mts")
library(mts)
install.packages("MTS")
library(MTS)
library(MTS)
varma <- VARMA(trainingdata, p = 4, q = 1, include.mean = T,
fixed = NULL, beta=NULL, sebeta=NULL,
prelim = F, details = F, thres = 2)
varma <- VARMA(trainingdata, p = 0, q = 1, include.mean = T,
fixed = NULL, beta=NULL, sebeta=NULL,
prelim = F, details = F, thres = 2)
varma <- VARMA(trainingdata, p = 0, q = 1)
varma
durbinWatsonTest(varma)
durbinWatsonTest(varma$data)
durbinWatsonTest(varma$data)
durbinWatsonTest(varma$residuals)
View(varma)
summary(varma)
varma$coef
varma <- VARMA(Data, p = 0, q = 1)
Yselect <- VARselect(trainingdata,type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag <- Yselect$selection[1]  # AiC, Hq auch 2 , SC auch
lag
VAR_est <- VAR(y = Data[,1:3], p = lag)
VAR_est <- VAR(y = trainingdata, p = lag)
lag
VAR_est <- VAR(y = trainingdata, p = lag)
Data[,1:3]
Data[,1:3]
Data[,1:3]
summary(VAR_est$varresult$gdp)
lag
VAR_est <- VAR(y = Data[,1:3], p = lag)
summary(VAR_est$varresult$gdp)
# AR(1) model
arima <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("aic")) #2,0,0 # lower RMSE
#arima <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("bic")) #1,0,0
summary(arima) # Ins sample RMSE!
x_train <- Data_train[,"gdp"]
rss <- sum((y_train - x_train) ** 2)
tss <- sum((x_train - mean(x_train)) ** 2)
R_squared <- 1 - rss/tss
rss <- sum((y_train - x_train) ** 2)
tss <- sum((x_train - mean(x_train)) ** 2)
y_train <- forecast(arima, h = 3)$fitted # We make a forecast one hour ahead and we extract the fitted values from the object forecast.
x_train <- Data_train[,"gdp"]
rss <- sum((y_train - x_train) ** 2)
tss <- sum((x_train - mean(x_train)) ** 2)
R_squared <- 1 - rss/tss
y_pred <- forecast(Data_test[,"gdp"], model = arima, h=3)$fitted # We call the forecast function passing the testing data through the ARIMA model fitted with the training data and we extract the fitted values.
y_test <- Data_test[,"gdp"]
sd_test <- sd(y_test)
RMSE <- rmse(y_test, y_pred)
MAE <- mae(y_test, y_pred)
rss <- sum((y_test - y_pred) ** 2)
tss <- sum((y_test - mean(y_test)) ** 2)
#pred <- predict(arima.OOS,n.ahead = 3) # same !
#fore <- forecast(arima.OOS,h=3) # same !
plot(forecast(y_pred,h=3)) # forecast 1Q  ahead!!!
dep_var <- "gdp"
model = gdp ~ gdp_lag
expanding_OLS <- expanding_window_OLS(Data[2:63,], dep_var, start = 13)
#predictions
pred <- do.call(rbind.data.frame, expanding_OLS[[2]]) # NAS wegen lag!
expanding_OLS <- expanding_window_OLS(Data[2:63,], dep_var, start = 13)
model = gdp ~ cci
expanding_OLS <- expanding_window_OLS(Data, dep_var, start = 13)
pred <- do.call(rbind.data.frame, expanding_OLS[[2]])
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred
Date_q_pred <- Date_q[13:63]
pred <- as.ts(pred, start=c(2009,1), end = c(2021,3), frequency = 4)
ts.plot(pred)
error_OLS <- expanding_OLS[[4]]
error_OLS <-error_OLS[!is.na(error_OLS)]
MAE_OLS_OOS <- mean(abs(error_OLS))
RMSE_OLS_OOS    <- sqrt(mean(error_OLS^2))
RMSE_OLS_OOS
MSE_OLS
# R-Sq
actual <- Data[13:63,"gdp"]
model = gdp ~ cci
expanding_OLS <- expanding_window_OLS(Data, dep_var, start = 13)
pred <- do.call(rbind.data.frame, expanding_OLS[[2]])
colnames(pred) <- c("value")
Date_q_pred <- Date_q[13:63]
pred <- as.ts(pred, start=c(2009,1), end = c(2021,3), frequency = 4)
ts.plot(pred)
error_OLS <-error_OLS[!is.na(error_OLS)]
MAE_OLS_OOS <- mean(abs(error_OLS))
MAE_OLS_OOS
RMSE_OLS_OOS    <- sqrt(mean(error_OLS^2))
MSE_OLS <- mean(error_OLS^2)
# R-Sq
actual <- Data[13:63,"gdp"]
rss <- sum((pred - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
rsq
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_OLS <- expanding_OLS[[3]]
final_resid_OLS <- resid_OLS[[length(resid_OLS)]]
RMSE_OLS_IS    <- sqrt(mean(final_resid_OLS^2))
RMSE_OLS_IS
forecast(pred,h=3)
plot(forecast(pred,h=3))
plot(forecast(pred,h=10))
plot(forecast(pred,h=3))
plot(naive (pred,h=3))
#predictions
pred <- do.call(rbind.data.frame, expanding_OLS[[2]]) # NAS wegen lag!
View(pred)
51+13
51+12
View(expanding_OLS)
pred_mod3 <- predict(mod3, Google_AT_qtrly)
# do new data set where google all periods
colnames(Google_AT_qtrly) <- c("google")
View(Google_AT_qtrly)
# do new data set where google all periods
colnames(Google_AT_qtrly$value) <- c("google")
# abgerufen: daily update
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/raw/at/trendecon_sa.csv")
# transform to quarterly and then do ts:
Google_AT_daily$time <- as.Date(Google_AT_daily$time)
Google_AT_daily <- arrange(Google_AT_daily, time)
Google_AT_daily$Date_q <- as.yearqtr(Google_AT_daily$time)
Google_AT_daily$Date_q <- as.Date(Google_AT_daily$Date_q)
#Google_AT_daily$QDate  <- as.character(Google_AT_daily$QDate)
#Google_AT_daily$QDate[Google_AT_daily$QDate == "2022 Q1"] <- "2021 Q3"
#Google_AT_daily$QDate[Google_AT_daily$QDate == "2021 Q4"] <- "2021 Q3"
Google_AT_qtrly <- Google_AT_daily %>% group_by(Date_q) %>%
summarise_all(mean)
#rownames(Google_AT_qtrly)  <- as.Date(Date_q)
Google_AT_qtrly_63 <- Google_AT_qtrly[1:63,]
Data[(Date_q%in%Google_AT_qtrly_63$Date_q),3] <- (Google_AT_qtrly_63$value)
Data$google_ts <- ts(Data$google, start=c(2006,1), end = c(2021,3), frequency = 4)
# do new data set where google all periods
colnames(Google_AT_qtrly$value) <- c("google")
View(Google_AT_qtrly)
# do new data set where google all periods
colnames(Google_AT_qtrly) <- c("Date_q","time","google")
mod3<- lm(gdp ~ google, data = Data_train)
pred_mod3 <- predict(mod3, Google_AT_qtrly)
pred_mod3
pred_mod3 <- predict(mod3, Google_AT_qtrly[,45:65])
pred_mod3 <- predict(mod3, Google_AT_qtrly[45:65,])
pred_mod3
acc_oss <-forecast::accuracy(Data_test$gdp,pred_mod3)
acc_oss
acc_oss <-forecast::accuracy(Data_test$gdp,pred_mod3)
pred_mod2 <- predict(mod3, Data_test)
forecast::accuracy(mod3) # IS accuracy
acc_oss <-forecast::accuracy(Data_test$gdp,pred_mod3)
pred_mod3 <- predict(mod3, Data_test)
acc_oss <-forecast::accuracy(Data_test$gdp,pred_mod3)
acc_oss
pred_mod3 <- predict(mod3, n.ahead = 3)
acc_oss <-forecast::accuracy(Data_test$gdp,pred_mod3)
#pred_mod3 <- predict(mod3, Google_AT_qtrly[45:65,])
pred_mod3
Data_train
Data_train
pred_mod3 <- predict(mod3, n.ahead = 4)
#pred_mod3 <- predict(mod3, Google_AT_qtrly[45:65,])
pred_mod3
pred_mod3 <- predict(mod3, n.ahead = 5)
acc_oss <-forecast::accuracy(Data_test$gdp,pred_mod3)
pred_mod3 <- predict(mod3, Data_test)
summary(mod3)
forecast::accuracy(mod3) # IS accuracy
acc_oss <-forecast::accuracy(Data_test$gdp,pred_mod3)
acc_oss
library(trendecon)
#library(tidyverse)
library(tsbox)
library(trendecon)
#library(tidyverse)
library(tsbox)
# Specify region to Austria
# Select keywords: arbitraily chosen
geo <- "AT"
keywords <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos","Insolvenz")#, "Inflation")
proc_keyword_init("Inzidenz",geo, from = "2014-01-01")
1+1
proc_keyword_init("CoronafÃ¤lle",geo, from = "2014-01-01")
1+1
proc_keyword_init("Testcenter",geo, from = "today+5-y")
proc_keyword_init("Testcenter",geo, from = "2015-01-01")
proc_keyword_init("Testcenter",geo, from = "2014-01-01")
1+1
#proc_keyword_init("Inzidenz",geo, from = "2014-01-01")
#proc_keyword_init("CoronafÃ¤lle",geo, from = "2014-01-01")
#proc_keyword_init("Testcenter",geo, from = "2014-01-01")
#proc_keyword_init("Impfung",geo, from = "2014-01-01") not included
proc_keyword_init("Lockdown",geo, from = "2014-01-01")
1+1
#proc_keyword_init("Inzidenz",geo, from = "2014-01-01")
#proc_keyword_init("CoronafÃ¤lle",geo, from = "2014-01-01")
#proc_keyword_init("Testcenter",geo, from = "2014-01-01")
#proc_keyword_init("Impfung",geo, from = "2014-01-01") not included
#proc_keyword_init("Lockdown",geo, from = "2014-01-01")
proc_keyword_init("Pandemie",geo, from = "2014-01-01")
1+1
proc_index(corona,"AT", "corona")
proc_index(corona,"AT", "corona")
corona <- c("Inzidenz", "CoronafÃ¤lle", "Testcenter", "Lockdown", "Pandemie")
proc_index(corona,"AT", "corona")
1#1
# Consumption
consumption <- c("Shopping", "Klamotten", "Autokauf", "Restaurant", "MÃ¶bel") # wirtschaft, Klamotten, Autokauf, Electorics,Food & Drink, Furniture
proc_keyword_init("Shopping",geo, from = "2014-01-01")
1
#proc_keyword_init("Shopping",geo, from = "2014-01-01")
proc_keyword_init("Klamotten",geo, from = "2014-01-01")
proc_keyword_init("Autokauf",geo, from = "2014-01-01")
1+1
