# test stimmt!
#error <- Data_test$gdp - pred_mod5
#error <-error[!is.na(error)]
#RMSE <- sqrt(mean(error^2))
#RMSE
mod6<- lm(gdp ~ lag(gdp) + cci + google, data = Data_train)
summary(mod6)
sqrt(mean(mod6$residuals^2)) # IS
forecast::accuracy(mod6) # IS
##OOS
pred_mod6 <- predict(mod6, Data_test)
acc_oos6 <-forecast::accuracy(Data_test$gdp,pred_mod6)
acc_oos6
predictnew <- predict(mod6,)
forecast::accuracy(mod6) # IS
acc_is6 <- forecast::accuracy(mod6) # IS
acc_is6
acc_oos5
mod1 <- lm(gdp ~ lag(gdp), data = Data_train)
summary(mod1)
sqrt(mean(mod1$residuals^2)) # IS
forecast::accuracy(mod1)
pred_mod1 <- predict(mod1, Data_test)
pred_mod1
acc_oss1 <-forecast::accuracy(Data_test$gdp,pred_mod1)
acc_oss1
forecast_mod1 <- predict(mod1, n.ahead = 3)
#plot(forecast_mod1)
#Data_cci <- cci_qtrly[,c(1,3)]
#colnames(Data_cci) <- c("time", "cci") kann forecasten mit dereinen observation mehr aber kann nicht evaluaten... no equivalent gdp value
mod2 <- lm(gdp ~ cci, data = Data_train)
summary(mod2)
sqrt(mean(mod2$residuals^2)) # IS
forecast::accuracy(mod2)
#pred_mod2
pred_mod2 <- predict(mod2,Data_test)
#ts.plot(pred_mod2)
#fore <- predict(mod2,newdata = Data_cci) # predict cci ...
acc_oss2 <-forecast::accuracy(Data_test$gdp,pred_mod2)
acc_oss2
#pred_test <- predict(mod2, cci_test)
#mod2$coefficients
# do new data set where google all periods
#colnames(Google_AT_qtrly) <- c("Date_q","time","google")
Data_google <- Google_AT_qtrly[,c(1,3)]
colnames(Data_google) <- c("time", "google")
mod3<- lm(gdp ~ google, data = Data_train)
summary(mod3)
sqrt(mean(mod3$residuals^2)) # IS
forecast::accuracy(mod3) # IS accuracy
pred_mod3 <- predict(mod3, Data_test)
#pred_mod3 <- predict(mod3, Google_AT_qtrly[45:65,])
pred_mod3
acc_oss3 <-forecast::accuracy(Data_test$gdp,pred_mod3)
acc_oss3
fore <- predict(newdata = Data_google,mod3)
#ts.plot(fore)
##ts.plot(Google_AT_qtrly$value)
mod4<- lm(gdp ~ lag(gdp) + cci, data = Data_train)
summary(mod4)
sqrt(mean(mod4$residuals^2)) # IS
forecast::accuracy(mod4) # IS accuracy
pred_mod4 <- predict(mod4, Data_test)
pred_mod4
acc_oss4 <-forecast::accuracy(Data_test$gdp,pred_mod4)
acc_oss4
mod5<- lm(gdp ~ lag(gdp) + google, data = Data_train)
summary(mod5)
sqrt(mean(mod5$residuals^2)) # IS
forecast::accuracy(mod5) # IS accuracy
pred_mod5 <- predict(mod5, Data_test)
acc_oos5 <-forecast::accuracy(Data_test$gdp,pred_mod5)
acc_oos5
# test stimmt!
#error <- Data_test$gdp - pred_mod5
#error <-error[!is.na(error)]
#RMSE <- sqrt(mean(error^2))
#RMSE
mod6<- lm(gdp ~ lag(gdp) + cci + google, data = Data_train)
summary(mod6)
sqrt(mean(mod6$residuals^2)) # IS
acc_is6 <- forecast::accuracy(mod6) # IS
##OOS
pred_mod6 <- predict(mod6, Data_test)
acc_oos6 <-forecast::accuracy(Data_test$gdp,pred_mod6)
acc_oos6
#predictnew <- predict(mod6,)
comparison_OLS_OOS <- rbind("OLS_OOS" = acc_oos1,acc_oos2,acc_oos3,acc_oos4,acc_oos5,acc_oos6)
acc_oss1 <-forecast::accuracy(Data_test$gdp,pred_mod1)
acc_oss1
mod1 <- lm(gdp ~ lag(gdp), data = Data_train)
summary(mod1)
sqrt(mean(mod1$residuals^2)) # IS
forecast::accuracy(mod1)
pred_mod1 <- predict(mod1, Data_test)
pred_mod1
acc_oos1 <-forecast::accuracy(Data_test$gdp,pred_mod1)
acc_oos1
forecast_mod1 <- predict(mod1, n.ahead = 3)
#plot(forecast_mod1)
comparison_OLS_OOS <- rbind("OLS_OOS" = acc_oos1,acc_oos2,acc_oos3,acc_oos4,acc_oos5,acc_oos6)
#Data_cci <- cci_qtrly[,c(1,3)]
#colnames(Data_cci) <- c("time", "cci") kann forecasten mit dereinen observation mehr aber kann nicht evaluaten... no equivalent gdp value
mod2 <- lm(gdp ~ cci, data = Data_train)
summary(mod2)
sqrt(mean(mod2$residuals^2)) # IS
forecast::accuracy(mod2)
#pred_mod2
pred_mod2 <- predict(mod2,Data_test)
#ts.plot(pred_mod2)
#fore <- predict(mod2,newdata = Data_cci) # predict cci ...
acc_oos2 <-forecast::accuracy(Data_test$gdp,pred_mod2)
acc_oos2
#pred_test <- predict(mod2, cci_test)
#mod2$coefficients
# do new data set where google all periods
#colnames(Google_AT_qtrly) <- c("Date_q","time","google")
Data_google <- Google_AT_qtrly[,c(1,3)]
colnames(Data_google) <- c("time", "google")
mod3<- lm(gdp ~ google, data = Data_train)
summary(mod3)
sqrt(mean(mod3$residuals^2)) # IS
forecast::accuracy(mod3) # IS accuracy
pred_mod3 <- predict(mod3, Data_test)
#pred_mod3 <- predict(mod3, Google_AT_qtrly[45:65,])
pred_mod3
acc_oos3 <-forecast::accuracy(Data_test$gdp,pred_mod3)
acc_oos3
fore <- predict(newdata = Data_google,mod3)
#ts.plot(fore)
##ts.plot(Google_AT_qtrly$value)
mod4<- lm(gdp ~ lag(gdp) + cci, data = Data_train)
summary(mod4)
sqrt(mean(mod4$residuals^2)) # IS
forecast::accuracy(mod4) # IS accuracy
pred_mod4 <- predict(mod4, Data_test)
pred_mod4
acc_oos4 <-forecast::accuracy(Data_test$gdp,pred_mod4)
acc_oos4
mod5<- lm(gdp ~ lag(gdp) + google, data = Data_train)
summary(mod5)
sqrt(mean(mod5$residuals^2)) # IS
forecast::accuracy(mod5) # IS accuracy
pred_mod5 <- predict(mod5, Data_test)
acc_oos5 <-forecast::accuracy(Data_test$gdp,pred_mod5)
acc_oos5
# test stimmt!
#error <- Data_test$gdp - pred_mod5
#error <-error[!is.na(error)]
#RMSE <- sqrt(mean(error^2))
#RMSE
mod6<- lm(gdp ~ lag(gdp) + cci + google, data = Data_train)
summary(mod6)
sqrt(mean(mod6$residuals^2)) # IS
acc_is6 <- forecast::accuracy(mod6) # IS
##OOS
pred_mod6 <- predict(mod6, Data_test)
acc_oos6 <-forecast::accuracy(Data_test$gdp,pred_mod6)
acc_oos6
#predictnew <- predict(mod6,)
comparison_OLS_OOS <- rbind("OLS_OOS" = acc_oos1,acc_oos2,acc_oos3,acc_oos4,acc_oos5,acc_oos6)
View(comparison_OLS_OOS)
mod1 <- lm(gdp ~ lag(gdp), data = Data_train)
summary(mod1)
sqrt(mean(mod1$residuals^2)) # IS
acc_is1 <-forecast::accuracy(mod1)
pred_mod1 <- predict(mod1, Data_test)
pred_mod1
acc_oos1 <-forecast::accuracy(Data_test$gdp,pred_mod1)
acc_oos1
forecast_mod1 <- predict(mod1, n.ahead = 3)
#plot(forecast_mod1)
#Data_cci <- cci_qtrly[,c(1,3)]
#colnames(Data_cci) <- c("time", "cci") kann forecasten mit dereinen observation mehr aber kann nicht evaluaten... no equivalent gdp value
mod2 <- lm(gdp ~ cci, data = Data_train)
summary(mod2)
sqrt(mean(mod2$residuals^2)) # IS
acc_is2 <-forecast::accuracy(mod2)
#pred_mod2
pred_mod2 <- predict(mod2,Data_test)
#ts.plot(pred_mod2)
#fore <- predict(mod2,newdata = Data_cci) # predict cci ...
acc_oos2 <-forecast::accuracy(Data_test$gdp,pred_mod2)
acc_oos2
#pred_test <- predict(mod2, cci_test)
#mod2$coefficients
# do new data set where google all periods
#colnames(Google_AT_qtrly) <- c("Date_q","time","google")
Data_google <- Google_AT_qtrly[,c(1,3)]
colnames(Data_google) <- c("time", "google")
mod3<- lm(gdp ~ google, data = Data_train)
summary(mod3)
sqrt(mean(mod3$residuals^2)) # IS
acc_is3 <- forecast::accuracy(mod3) # IS accuracy
pred_mod3 <- predict(mod3, Data_test)
#pred_mod3 <- predict(mod3, Google_AT_qtrly[45:65,])
pred_mod3
acc_oos3 <-forecast::accuracy(Data_test$gdp,pred_mod3)
acc_oos3
fore <- predict(newdata = Data_google,mod3)
#ts.plot(fore)
##ts.plot(Google_AT_qtrly$value)
mod4<- lm(gdp ~ lag(gdp) + cci, data = Data_train)
summary(mod4)
sqrt(mean(mod4$residuals^2)) # IS
acc_is4 <-forecast::accuracy(mod4) # IS accuracy
pred_mod4 <- predict(mod4, Data_test)
pred_mod4
acc_oos4 <-forecast::accuracy(Data_test$gdp,pred_mod4)
acc_oos4
mod5<- lm(gdp ~ lag(gdp) + google, data = Data_train)
summary(mod5)
sqrt(mean(mod5$residuals^2)) # IS
acc_is5 <- forecast::accuracy(mod5) # IS accuracy
pred_mod5 <- predict(mod5, Data_test)
acc_oos5 <-forecast::accuracy(Data_test$gdp,pred_mod5)
acc_oos5
# test stimmt!
#error <- Data_test$gdp - pred_mod5
#error <-error[!is.na(error)]
#RMSE <- sqrt(mean(error^2))
#RMSE
mod6<- lm(gdp ~ lag(gdp) + cci + google, data = Data_train)
summary(mod6)
sqrt(mean(mod6$residuals^2)) # IS
acc_is6 <- forecast::accuracy(mod6) # IS
##OOS
pred_mod6 <- predict(mod6, Data_test)
acc_oos6 <-forecast::accuracy(Data_test$gdp,pred_mod6)
acc_oos6
#predictnew <- predict(mod6,)
comparison_OLS_IS <- rbind("OLS_IS" = acc_is1,acc_is2,acc_is3,acc_is4,acc_is5,acc_is6)
comparison_OLS_OOS <- rbind("OLS_OOS" = acc_oos1,acc_oos2,acc_oos3,acc_oos4,acc_oos5,acc_oos6)
comparison_OOS <- data.frame("OLS_OOS" = comparison_OLS_IS,
"OLS_IS" = comparison_OLS_OOS)
comparison_OLS <- data.frame("OLS_OOS" = comparison_OLS_IS,
"OLS_IS" = comparison_OLS_OOS)
stargazer::stargazer(comparison_OLS)
stargazer::stargazer(comparison_OLS, summary = F)
stargazer::stargazer(comparison_OLS, summary = FALSE)
stargazer::stargazer(mod1,mod2,mod3,mod4,mod5,mod6)
stargazer::stargazer(comparison_OLS_IS, summary = FALSE)
?stargazer
stargazer::stargazer(comparison_OLS_IS, summary = FALSE,colnames = c("ME","RMSE","MAE","MPE","MAPE"))
stargazer::stargazer(comparison_OLS_IS, summary = FALSE,colnames = TRUE)
stargazer::stargazer(comparison_OLS_IS, summary = FALSE,colnames = TRUE)
stargazer::stargazer(comparison_OLS_OOS, summary = FALSE,colnames = TRUE)
acc_oos6
acc_is5 <- forecast::accuracy(mod5) # IS accuracy
acc_is5
model = gdp ~ cci
expanding_OLS2 <- expanding_window_OLS(Data, dep_var, start = 19)
pred <- do.call(rbind.data.frame, expanding_OLS2[[2]])
model = gdp ~ cci
expanding_OLS2 <- expanding_window_OLS(Data, dep_var, start = 19)
expanding_window_OLS <- function(data, dep_var, start = 19){ # change to 12
expanding_OLS <- list() # empty vector
predicted_OLS <- list()
resid_OLS <- list()
error_OLS <- c()
i <- 0
for(t in start:nrow(data)){#t in 13:51
i <- i+1
expanding_OLS[[i]] <- lm(formula = model, data = data[1:(t-1),]) # start at 13-1 so 12!
resid_OLS[[i]] <- resid(expanding_OLS[[i]])
predicted_OLS[[i]] <- predict(expanding_OLS[[i]],newdata = data[t,])#[t,])
error_OLS[i]  <- as.numeric(predicted_OLS[[i]] - data[t,]) # anpassen je nach dem welchs
Summary_OLS <- list(expanding_OLS,predicted_OLS,resid_OLS,error_OLS)
}
return(Summary_OLS)
}
model = gdp ~ cci
expanding_OLS2 <- expanding_window_OLS(Data, dep_var, start = 19)
pred <- do.call(rbind.data.frame, expanding_OLS2[[2]])
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred
Date_q_pred <- Date_q[19:63]
pred <- as.ts(pred, start=c(2010,3), end = c(2021,3), frequency = 4)
ts.plot(pred)
dep_var <- "gdp"
model = gdp ~ gdp_lag
expanding_OLS1 <- expanding_window_OLS(Data[2:63,], dep_var, start = 19)
knitr::opts_chunk$set(echo = TRUE)
adfgdp <- adf.test(Data$gdp) # stationary
adfcci <- adf.test(Data$cci) # stationary
adfgoogle <- adf.test(Data$google) # not stat # test agao  after remove inlation
t_0 <- as.Date("2006-01-01") #Setting start date for the series
t_1 <- as.Date("2021-07-01") #Setting end date for the series
t_2 <- as.Date("2021-12-31")
Date_q <- seq.Date(t_0,t_1,by="quarter")
Date_m <- seq.Date(t_0,t_2,by="month")
bigT <- length(Date_q)
M <- 6
Data   <- matrix(NA,bigT,M)
colnames(Data)  <- c("gdp", "cci", "google","gdp_ts", "cci_ts", "google_ts")
Data <- as.data.frame(Data)
rownames(Data)  <- as.Date(Date_q)
# abgerufen final am 11.02.2022
#Source: https://data.oecd.org/gdp/quarterly-gdp.htm#indicator-chart
gdp <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/RData/GDP_oecd.csv")[9:71,6:7]
colnames(gdp)[colnames(gdp) %in% c("TIME", "Value")] <- c("QDate", "value")
gdp <- cbind(gdp,Date_q)
#ts:
gdp_ts <- ts(gdp$value, start=c(2006,1), end = c(2021,3), frequency = 4)
Data[(Date_q%in%gdp$Date_q),1] <- gdp$value
Data$gdp_ts <- ts(Data$gdp, start=c(2006,1), end = c(2021,3), frequency = 4)
# abgerufen final am 11.02.2022
#Source: https://ec.europa.eu/info/business-economy-euro/indicators-statistics/economic-databases/business-and-consumer-surveys/download-business-and-consumer-survey-data/time-series_en#consumers
cci <- read.csv2("https://raw.githubusercontent.com/anneval/MA_data/main/RData/CCI.csv")[253:444,c(1,297)]
colnames(cci)[colnames(cci) %in% c("X", "CONS.AT.TOT.COF.BS.M")] <- c("time", "value")
cci <- cbind(cci,Date_m)
cci <- arrange(cci, Date_m)
# abgerufen: daily update
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/raw/at/trendecon_sa.csv")
# transform to quarterly and then do ts:
Google_AT_daily$time <- as.Date(Google_AT_daily$time)
Google_AT_daily <- arrange(Google_AT_daily, time)
library(readr)
library(readxl)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tseries)
library(forecast)
library(vars)
library(GGally)
library(Metrics)
library(caret)
library(collapse)
library(urca)
library(macror) # for latex table adf
library(xtable) # latex table
t_0 <- as.Date("2006-01-01") #Setting start date for the series
t_1 <- as.Date("2021-07-01") #Setting end date for the series
t_2 <- as.Date("2021-12-31")
Date_q <- seq.Date(t_0,t_1,by="quarter")
Date_m <- seq.Date(t_0,t_2,by="month")
bigT <- length(Date_q)
M <- 6
Data   <- matrix(NA,bigT,M)
colnames(Data)  <- c("gdp", "cci", "google","gdp_ts", "cci_ts", "google_ts")
Data <- as.data.frame(Data)
rownames(Data)  <- as.Date(Date_q)
# abgerufen final am 11.02.2022
#Source: https://data.oecd.org/gdp/quarterly-gdp.htm#indicator-chart
gdp <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/RData/GDP_oecd.csv")[9:71,6:7]
colnames(gdp)[colnames(gdp) %in% c("TIME", "Value")] <- c("QDate", "value")
gdp <- cbind(gdp,Date_q)
#ts:
gdp_ts <- ts(gdp$value, start=c(2006,1), end = c(2021,3), frequency = 4)
Data[(Date_q%in%gdp$Date_q),1] <- gdp$value
Data$gdp_ts <- ts(Data$gdp, start=c(2006,1), end = c(2021,3), frequency = 4)
# abgerufen final am 11.02.2022
#Source: https://ec.europa.eu/info/business-economy-euro/indicators-statistics/economic-databases/business-and-consumer-surveys/download-business-and-consumer-survey-data/time-series_en#consumers
cci <- read.csv2("https://raw.githubusercontent.com/anneval/MA_data/main/RData/CCI.csv")[253:444,c(1,297)]
colnames(cci)[colnames(cci) %in% c("X", "CONS.AT.TOT.COF.BS.M")] <- c("time", "value")
cci <- cbind(cci,Date_m)
cci <- arrange(cci, Date_m)
cci$Date_q <- as.yearqtr(cci$Date_m)
cci$Date_q <- as.Date(cci$Date_q)
#cci$Date_q  <- as.character(cci$Date_m)
#cci$Date_q[CCI_mntly$Date_q == "2021 Q4"] <- "2021 Q3"
cci_qtrly <- cci %>% group_by(Date_q) %>%
summarise_all(mean)
cci_qtrly_63 <- cci_qtrly[1:63,]
Data[(Date_q%in%cci_qtrly_63$Date_q),2] <- (cci_qtrly_63$value)
Data$cci_ts <- ts(Data$cci, start=c(2006,1), end = c(2021,3), frequency = 4)
# abgerufen: daily update
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/raw/at/trendecon_sa.csv")
# transform to quarterly and then do ts:
Google_AT_daily$time <- as.Date(Google_AT_daily$time)
Google_AT_daily <- arrange(Google_AT_daily, time)
Google_AT_daily$Date_q <- as.yearqtr(Google_AT_daily$time)
Google_AT_daily$Date_q <- as.Date(Google_AT_daily$Date_q)
#Google_AT_daily$QDate  <- as.character(Google_AT_daily$QDate)
#Google_AT_daily$QDate[Google_AT_daily$QDate == "2022 Q1"] <- "2021 Q3"
#Google_AT_daily$QDate[Google_AT_daily$QDate == "2021 Q4"] <- "2021 Q3"
Google_AT_qtrly <- Google_AT_daily %>% group_by(Date_q) %>%
summarise_all(mean)
#rownames(Google_AT_qtrly)  <- as.Date(Date_q)
Google_AT_qtrly_63 <- Google_AT_qtrly[1:63,]
Data[(Date_q%in%Google_AT_qtrly_63$Date_q),3] <- (Google_AT_qtrly_63$value)
Data$google_ts <- ts(Data$google, start=c(2006,1), end = c(2021,3), frequency = 4)
adfgdp <- adf.test(Data$gdp) # stationary
adfcci <- adf.test(Data$cci) # stationary
adfgoogle <- adf.test(Data$google) # not stat # test agao  after remove inlation
# not stationary since I included inflation...
adfgdp
adfcci
adfgoogle
adfgdpdiff <- adf.test(diff(Data$gdp))
adf.test(diff(Data$cci))
adf.test(diff(Data$google))
fit_VAR1 <- VARselect(Data[,1:3],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag_VAR1 <- fit_VAR1$selection[1]  # AiC, Hq auch 2 , SC auch
lag_VAR1
VAR1_est <- VAR(y = Data[,1:3], p = lag_VAR1,type = "const")
summary(VAR1_est$varresult$gdp)
forecast::accuracy(VAR1_est$varresult$gdp) # IS accuracy
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecast_VAR1<- predict(VAR1_est,n.ahead =3)
forecast_VAR1
###### OOS accuracy?
acc_oos_VAR1 <-forecast::accuracy(Data$gdp,forecast_VAR1$fcst$gdp)
plot(forecast_VAR1)
stargazer::stargazer(VAR1_est$varresult)
resid_VAR1 <- data.frame(
VAR1_est$varresult$gdp$residuals,
VAR1_est$varresult$cci$residuals,
VAR1_est$varresult$google$residuals)
adf.test(VAR1_est$varresult$gdp$residuals) # stationary
adf.test(VAR1_est$varresult$cci$residuals) #stationary
adf.test(VAR1_est$varresult$google$residuals)#stationary
plot(VAR1_est$varresult$gdp$residuals)
adf.test(VAR1_est$varresult$gdp$residuals) # not stationary
VAR1_est$varresult$gdp
acf(VAR1_est$varresult$gdp$residuals)
fit_VAR1 <- VARselect(Data[,1:3])#,type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag_VAR1 <- fit_VAR1$selection[1]  # AiC, Hq auch 2 , SC auch
lag_VAR1
summary(VAR1_est$varresult$gdp)
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecast_VAR1<- predict(VAR1_est,n.ahead =3)
forecast_VAR1
###### OOS accuracy?
acc_oos_VAR1 <-forecast::accuracy(Data$gdp,forecast_VAR1$fcst$gdp)
plot(forecast_VAR1)
stargazer::stargazer(VAR1_est$varresult)
adf.test(VAR1_est$varresult$gdp$residuals) # not stationary
fit_VAR1 <- VARselect(Data[,1:3],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag_VAR1 <- fit_VAR1$selection[1]  # AiC, Hq auch 2 , SC auch
lag_VAR1
VAR1_est <- VAR(y = Data[,1:3], p = lag_VAR1,type = "const")
summary(VAR1_est$varresult$gdp)
forecast::accuracy(VAR1_est$varresult$gdp) # IS accuracy
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecast_VAR1<- predict(VAR1_est,n.ahead =3)
forecast_VAR1
###### OOS accuracy?
acc_oos_VAR1 <-forecast::accuracy(Data$gdp,forecast_VAR1$fcst$gdp)
plot(forecast_VAR1)
stargazer::stargazer(VAR1_est$varresult)
resid_VAR1 <- data.frame(
VAR1_est$varresult$gdp$residuals,
VAR1_est$varresult$cci$residuals,
VAR1_est$varresult$google$residuals)
adf.test(VAR1_est$varresult$gdp$residuals) # not stationary
acf(VAR1_est$varresult$gdp$residuals)
adf.test(VAR1_est$varresult$cci$residuals) #stationary
adf.test(VAR1_est$varresult$google$residuals)#stationary
fit_VAR1 <- VARselect(Data[,1:3],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag_VAR1 <- fit_VAR1$selection[1]  # AiC, Hq auch 2 , SC auch
lag_VAR1
VAR1_est <- VAR(y = Data[,1:3], p = lag_VAR1,type = "const")
VAR1_est <- VAR(y = Data[,4:6], p = lag_VAR1,type = "const")
summary(VAR1_est$varresult$gdp)
adf.test(VAR1_est$varresult$gdp$residuals) # not stationary
acf(VAR1_est$varresult$gdp$residuals)
adf.test(VAR1_est$varresult$cci$residuals) #stationary
adf.test(VAR1_est$varresult$google$residuals)#stationary
adf.test(VAR1_est$varresult$cci$residuals) #stationary
adf.test(VAR1_est$varresult$google$residuals)#stationary
View(fit_VAR1)
View(Data)
lmtest::bgtest(VAR1_est$varresult$gdp$residuals)
Box.test(VAR1_est$varresult$gdp$residuals)
lmtest::bgtest(VAR1_est)
lmtest::bgtest(VAR1_est$varresult)
lmtest::bgtest(VAR1_est$varresult$gdp_ts)
durbinWatsonTest(VAR1_est$varresult$google)  # Thereby, a small p-value of < 2.2e-16 indicates there is significant autocorrelation remaining in the residuals in the model below.
library(car)
durbinWatsonTest(VAR1_est$varresult$google$residuals)  # Thereby, a small p-value of < 2.2e-16 indicates there is significant autocorrelation remaining in the residuals in the model below.
durbinWatsonTest(VAR1_est$varresult$google)  # Thereby, a small p-value of < 2.2e-16 indicates there is significant autocorrelation remaining in the residuals in the model below.
#breusch_godfrey
ser.test_VAR1 <- serial.test(VAR1_est) # H0: no serial correlation, here cannot reject H0 of no correlation
ser.test_VAR1
#breusch_godfrey
ser.test_VAR1 <- serial.test(VAR1_est$varresult$google$residuals) # H0: no serial correlation, here cannot reject H0 of no correlation
VAR1_est
VAR1_est
ser.test_VAR1
arch.test(VAR1_est)
arch.test(VAR1_est$varresult$gdp)
arch.test(VAR1_est$varresult)
arch.test(VAR1_est)
checkresiduals(VAR1_est$varresult$gdp$residuals))
checkresiduals(VAR1_est$varresult$gdp$residuals)
library(readr)
library(readxl)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tseries)
library(forecast)
library(vars)
library(GGally)
library(Metrics)
library(caret)
library(collapse)
library(urca)
library(macror) # for latex table adf
library(xtable) # latex table
