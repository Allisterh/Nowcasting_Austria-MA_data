"using SC without constant","using SC with constant")
rownames(MC.table)<- MC.table.names
colnames(MC.table) <- cbind("AIC", "BIC")
print(xtable::xtable(MC.table,caption="Model Choice Results",label="tab:mc"),
sanitize.text.function=function(UR.table){UR.table},comment=FALSE)
sum2 <- data.frame(
VAR_est$varresult$gdp$residuals,
VAR_est$varresult$cci$residuals,
VAR_est$varresult$google$residuals)
Yselect_3 <- VARselect(Data_train[,c(1,3)])               # computes information criteria
lag <- Yselect_3$selection[1]
lag
VAR_est_3 <- VAR(y = Data_train[,c(1,3)], p = lag)
summary(VAR_est_3)
Yselect_3 <- VARselect(Data[,c(1,3)])               # computes information criteria
lag <- Yselect_3$selection[1]
lag
VAR_est_3 <- VAR(y = Data_train[,c(1,3)], p = lag)
summary(VAR_est_3)
# AR(1) model
arima <- auto.arima(Data[,"gdp"], trace = TRUE,  ic = c("aic")) #2,0,0 # lower RMSE
#arima <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("bic")) #1,0,0
summary(arima) # Ins sample RMSE!
y_train <- forecast(arima, h = 3)$fitted # We make a forecast one hour ahead and we extract the fitted values from the object forecast.
x_train <- Data_train[,"gdp"]
rss <- sum((y_train - x_train) ** 2)
tss <- sum((x_train - mean(x_train)) ** 2)
R_squared <- 1 - rss/tss
paste(c("R-squared:", round(R_squared, 4)))
#accuracy(cafe.test$fitted)
y_pred <- forecast(Data_test[,"gdp"], model = arima, h=3)$fitted # We call the forecast function passing the testing data through the ARIMA model fitted with the training data and we extract the fitted values.
y_test <- Data_test[,"gdp"]
sd_test <- sd(y_test)
RMSE <- rmse(y_test, y_pred)
MAE <- mae(y_test, y_pred)
rss <- sum((y_test - y_pred) ** 2)
tss <- sum((y_test - mean(y_test)) ** 2)
R_squared <- 1 - rss/tss
errors <- as.ts(y_test - y_pred)
adf.test(errors)
#pred <- predict(arima.OOS,n.ahead = 3) # same !
#fore <- forecast(arima.OOS,h=3) # same !
plot(forecast(y_pred,h=3)) # forecast 1Q  ahead!!!
# AR(1) model
arima <- auto.arima(Data[,"gdp"], trace = TRUE,  ic = c("aic")) #2,0,0 # lower RMSE
AR_4 <- Arima(Data[,"gdp"], order=c(0,0,1))
summary(AR_4)
y_train <- forecast(AR_4, h = 3)$fitted # We make a forecast one hour ahead and we extract the fitted values from the object forecast.
x_train <- Data_train[,"gdp"]
rss <- sum((y_train - x_train) ** 2)
tss <- sum((x_train - mean(x_train)) ** 2)
R_squared <- 1 - rss/tss
paste(c("R-squared:", round(R_squared, 4)))
errors <- as.ts(y_train - x_train) # if whole set (MA(1)) and AR(2)...whole data
adf.test(errors) # stationaryy
y_pred <- forecast(Data_test[,"gdp"], model = AR_4, h=3)$fitted # We call the forecast function passing the testing data through the ARIMA model fitted with the training data and we extract the fitted values.
y_test <- Data_test[,"gdp"]
sd_test <- sd(y_test)
RMSE <- rmse(y_test, y_pred)
MAE <- mae(y_test, y_pred)
rss <- sum((y_test - y_pred) ** 2)
tss <- sum((y_test - mean(y_test)) ** 2)
R_squared <- 1 - rss/tss
plot(forecast(y_pred,h=3))
errors <- as.ts(y_test - y_pred) # not stationary!!
adf.test(errors) # data train (AR(2)) stationary, non stat for MA(1)
arima <- auto.arima(Data[,"gdp"], trace = TRUE,  ic = c("aic")) #2,0,0 # lower RMSE
summary(arima) # 001
arma1 <- arima(Data$gdp, order = c(1,0,1))
ar2ma1 <- arima(Data$gdp, order = c(2,0,1))
ar1 <- arima(Data$gdp, order = c(1,0,0))
ar2 <- arima(Data$gdp, order = c(2,0,0))
ma1 <- arima(Data$gdp, order = c(0,0,1))
AIC <- AIC(arma1, ar2ma1, ar1, ar2,ma1)
BIC<- BIC(arma1, ar2ma1, ar1, ar2,ma1)
ab<- cbind(AIC, BIC)
View(ab)
AR_4 <- Arima(Data[,"gdp"], order=c(1,0,1))
summary(AR_4)
y_train <- forecast(AR_4, h = 3)$fitted # We make a forecast one hour ahead and we extract the fitted values from the object forecast.
x_train <- Data_train[,"gdp"]
rss <- sum((y_train - x_train) ** 2)
tss <- sum((x_train - mean(x_train)) ** 2)
R_squared <- 1 - rss/tss
paste(c("R-squared:", round(R_squared, 4)))
errors <- as.ts(y_train - x_train) # if whole set (MA(1)) and AR(2)...whole data
adf.test(errors) # stationaryy
y_pred <- forecast(Data_test[,"gdp"], model = AR_4, h=3)$fitted # We call the forecast function passing the testing data through the ARIMA model fitted with the training data and we extract the fitted values.
y_test <- Data_test[,"gdp"]
sd_test <- sd(y_test)
RMSE <- rmse(y_test, y_pred)
RMSE
MAE <- mae(y_test, y_pred)
rss <- sum((y_test - y_pred) ** 2)
tss <- sum((y_test - mean(y_test)) ** 2)
R_squared <- 1 - rss/tss
R_squared
plot(forecast(y_pred,h=3))
autoplot(forecast(cafe.train))
errors <- as.ts(y_test - y_pred) # not stationary!! OOS
adf.test(errors) # data train (AR(2)) stationary, non stat for MA(1)
AR_4 <- Arima(Data[,"gdp"], order=c(2,0,0))
summary(AR_4)
y_train <- forecast(AR_4, h = 3)$fitted # We make a forecast one hour ahead and we extract the fitted values from the object forecast.
x_train <- Data_train[,"gdp"]
rss <- sum((y_train - x_train) ** 2)
tss <- sum((x_train - mean(x_train)) ** 2)
R_squared <- 1 - rss/tss
paste(c("R-squared:", round(R_squared, 4)))
errors <- as.ts(y_train - x_train) # if whole set (MA(1)) and AR(2)...whole data
adf.test(errors) # stationaryy
y_pred <- forecast(Data_test[,"gdp"], model = AR_4, h=3)$fitted # We call the forecast function passing the testing data through the ARIMA model fitted with the training data and we extract the fitted values.
y_test <- Data_test[,"gdp"]
sd_test <- sd(y_test)
RMSE <- rmse(y_test, y_pred)
MAE <- mae(y_test, y_pred)
rss <- sum((y_test - y_pred) ** 2)
tss <- sum((y_test - mean(y_test)) ** 2)
R_squared <- 1 - rss/tss
R_squared
plot(forecast(y_pred,h=3))
errors <- as.ts(y_test - y_pred) # not stationary!! OOS
errors <- as.ts(y_test - y_pred) # not stationary!! OOS
adf.test(errors) # data train (AR(2)) stationary, non stat for MA(1)
AR_4 <- Arima(Data[,"gdp"], order=c(2,0,0))
summary(AR_4)
fcast <- forecast(AR_4, h=3)
print(summary(fcast))
remotes::install_github("pwkraft/pmisc")
library(pwkraft/pmisc)
library(pmisc)
library(pwkraft)
arimatex(AR_4, tex = T, fixed = NULL, pr = F)
arimatex(AR_4$arma, tex = T, fixed = NULL, pr = F)
arimatex(fcast, tex = T, fixed = NULL, pr = F)
arimatex(AR_4, tex = T, fixed = NULL, pr = F)
arimatex(ar1, tex = T, fixed = NULL, pr = F)
View(AR_4)
arimatex(AR_4$coef, tex = T, fixed = NULL, pr = F)
arimatex(AR_4, tex = T, fixed = NULL, pr = F)
View(AR_4)
AR_4 <- stats::arima(Data[,"gdp"], order=c(2,0,0))
summary(AR_4)
stargazer::stargazer(AR_4)
AR_1 <- stats::arima(Data[,"gdp"], order=c(1,0,0))
summary(AR_1)
AR_2 <- stats::arima(Data[,"gdp"], order=c(2,0,0))
summary(AR_2)
AR_1 <- stats::arima(Data[,"gdp"], order=c(1,0,0))
summary(AR_1)
AR_4 <- stats::arima(Data[,"gdp"], order=c(4,0,0))
summary(AR_4)
ARMA_1 <- stats::arima(Data[,"gdp"], order=c(1,0,1))
summary(ARMA_1)
MA_1 <- stats::arima(Data[,"gdp"], order=c(0,0,1))
summary(MA_1)
stargazer::stargazer(AR_1,AR_2,AR_4,ARMA_1,MA_1)
AR_4 <- stats::arima(Data[,"gdp"], order=c(1,0,0))
summary(AR_4)
AR_4 <- stats::arima(Data_train[,"gdp"], order=c(1,0,0))
summary(AR_4)
y_train <- forecast(AR_4, h = 3)$fitted # We make a forecast one hour ahead and we extract the fitted values from the object forecast.
x_train <- Data_train[,"gdp"]
rss <- sum((y_train - x_train) ** 2)
tss <- sum((x_train - mean(x_train)) ** 2)
R_squared <- 1 - rss/tss
paste(c("R-squared:", round(R_squared, 4)))
errors <- as.ts(y_train - x_train) # if whole set (MA(1)) and AR(2)...whole data
adf.test(errors) # stationaryy
y_pred <- forecast(Data_test[,"gdp"], model = AR_4, h=3)$fitted # We call the forecast function passing the testing data through the ARIMA model fitted with the training data and we extract the fitted values.
y_test <- Data_test[,"gdp"]
sd_test <- sd(y_test)
RMSE <- rmse(y_test, y_pred)
MAE <- mae(y_test, y_pred)
rss <- sum((y_test - y_pred) ** 2)
tss <- sum((y_test - mean(y_test)) ** 2)
R_squared <- 1 - rss/tss
RMSE
AR_1 <- stats::arima(Data[,"gdp"], order=c(1,0,0))
summary(AR_1)
AR_1 <- stats::arima(Data[,"gdp"], order=c(1,0,0))
summary(AR_1)
AR_4 <- stats::arima(Data[,"gdp"], order=c(4,0,0))
summary(AR_4)
ARMA_1 <- stats::arima(Data[,"gdp"], order=c(1,0,1))
summary(ARMA_1)
MA_1 <- stats::arima(Data[,"gdp"], order=c(0,0,1))
summary(MA_1)
Data$gdp_lag2 <- lag(Data$gdp_lag)
dep_var <- "gdp"
model = gdp ~ gdp_lag + gdp_lag2
expanding_OLS <- expanding_window_OLS(Data[3:63,], dep_var, start = 13)
#predictions
pred <- do.call(rbind.data.frame, expanding_OLS[[2]]) # NAS wegen lag!
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred[3:51]
Date_q_pred <- Date_q[13:63]
pred <- as.ts(pred, start=c(2009,3), end = c(2021,3), frequency = 4)
ts.plot(pred)
### error in and OOS
error_OLS <- expanding_OLS[[4]]
error_OLS <-error_OLS[!is.na(error_OLS)]
MAE_OLS_OOS <- mean(abs(error_OLS))
MAE_OLS_OOS
RMSE_OLS_OOS  <- sqrt(mean(error_OLS^2))
RMSE_OLS_OOS
MSE_OLS <- mean(error_OLS^2)
MSE_OLS
RMSE_OLS_OOS
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_OLS <- expanding_OLS[[3]]
final_resid_OLS <- resid_OLS[[length(resid_OLS)]]
RMSE_OLS_IS    <- sqrt(mean(final_resid_OLS^2))
RMSE_OLS_IS
RMSE_OLS_OOS
RMSE_OLS_IS
# keep orginals ones though,...
Data_Var <-flag(Data[1:3], 1:2)
Data_Var <- cbind(Data[,1:3],Data_Var)## all have lag 2....
model= gdp ~ L1.gdp +L2.gdp + L1.cci +L2.cci +L1.google + L2.google
expanding_OLS <- expanding_window_OLS(Data_Var[3:63,], dep_var, start = 13) # adjust start???
#predictions
pred <- do.call(rbind.data.frame, expanding_OLS[[2]]) # NAS wegen lag!
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred[3:51]
Date_q_pred <- Date_q[13:63]
pred <- as.ts(pred, start=c(2009,3), end = c(2021,3), frequency = 4)
ts.plot(pred)
### error in and OOS
error_OLS <- expanding_OLS[[4]]
error_OLS <-error_OLS[!is.na(error_OLS)]
MAE_OLS_OOS <- mean(abs(error_OLS))
MAE_OLS_OOS
RMSE_OLS_OOS  <- sqrt(mean(error_OLS^2))
RMSE_OLS_OOS
MSE_OLS <- mean(error_OLS^2)
MSE_OLS
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_OLS <- expanding_OLS[[3]]
final_resid_OLS <- resid_OLS[[length(resid_OLS)]]
RMSE_OLS_IS    <- sqrt(mean(final_resid_OLS^2))
RMSE_OLS_IS
Yselect <- VARselect(Data[,1:3],type = "const")
#Yselect <- VARselect(Data[,4:6],type = "none") #lag 2      # computes information criteria
lag <- Yselect$selection[1]  # AiC, Hq auch 2 , SC auch
lag
VAR_est <- VAR(y = Data_train[,c(1,3)], p = lag,type = "const")
summary(VAR_est$varresult$gdp)
forecast::accuracy(VAR_est$varresult$gdp) # IS accuracy
dat <- ts(Data_train[,1:3], frequency = 4, start = c(2006, 1))
start=c(2017, 1)
end = c(2016,4)
trainingdata <- window(dat, end = end)
testdata <- window(dat, start= start)
v <- VAR(trainingdata, p=2,type = "const") # change t0 2.!!!
summary(v$varresult$gdp)
p <- predict(v, n.ahead=3)
p$fcst$gdp
ts.plot(p$fcst$gdp)
acc_is_VAR <-forecast::accuracy(trainingdata,v$varresult$gdp$fitted.values) # works!!! validated against
View(acc_is_VAR)
testdata <- window(dat, start= start)
testdata <- window(dat, star t= start)
View(dat)
testdata <- window(dat, start= start)
testdata <- window(dat, start= start)
testdata <- window(dat, start = start)
start=c(2017,1)
end = c(2016,4)
trainingdata <- window(dat, end = end)
testdata <- window(dat, start = start)
dat <- ts(Data_train[,1:3], frequency = 4, start = c(2006, 1))
start=c(2017,1)
end = c(2016,4)
trainingdata <- window(dat, end = end)
testdata <- window(dat, start = start)
model = gdp ~ cci
expanding_OLS2 <- expanding_window_OLS(Data, dep_var, start = 19)
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred
Date_q_pred <- Date_q[13:63]
pred <- as.ts(pred, start=c(2009,1), end = c(2021,3), frequency = 4)
ts.plot(pred)
error_OLS2 <- expanding_OLS2[[4]]
error_OLS2 <-error_OLS2[!is.na(error_OLS2)]
MAE_OLS_OOS2 <- mean(abs(error_OLS2))
MAE_OLS_OOS2
RMSE_OLS_OOS2   <- sqrt(mean(error_OLS2^2))
RMSE_OLS_OOS2
MSE_OLS2 <- mean(error_OLS2^2)
MSE_OLS2
# R-Sq
actual <- Data[13:63,"gdp"]
rss <- sum((pred - actual) ^ 2)  ## residual sum of squares
# R-Sq
actual <- Data[19:63,"gdp"]
model = gdp ~ cci
expanding_OLS2 <- expanding_window_OLS(Data, dep_var, start = 19)
a
pred <- do.call(rbind.data.frame, expanding_OLS2[[2]])
View(Data_test)
View(Data_train)
pred <- as.ts(pred, start=c(2010,3), end = c(2021,3), frequency = 4)
ts.plot(pred)
# R-Sq
actual <- Data[19:63,"gdp"]
RMSE_OLS_OOS2   <- sqrt(mean(error_OLS2^2))
rss <- sum((pred - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
rsq
rss <- sum(error_OLS2^2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
rsq
model = gdp ~ google
expanding_OLS3 <- expanding_window_OLS(Data, dep_var, start = 19)
pred <- do.call(rbind.data.frame, expanding_OLS3[[2]])
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred
Date_q_pred <- Date_q[19:63]
pred <- as.ts(pred, start=c(2009,1), end = c(2021,3), frequency = 4)
pred <- as.ts(pred, start=c(2010,3), end = c(2021,3), frequency = 4)
ts.plot(pred)
### error in and OOS
error_OLS3 <- expanding_OLS3[[4]]
error_OLS3 <-error_OLS[!is.na(error_OLS3)]
MAE_OLS_OOS3 <- mean(abs(error_OLS3))
MAE_OLS_OOS3
RMSE_OLS_OOS3    <- sqrt(mean(error_OLS3^2))
RMSE_OLS_OOS3
MSE_OLS3 <- mean(error_OLS3^2)
MSE_OLS3
rss <- sum(error_OLS2^2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
rsq
rss <- sum(error_OLS3^2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
rsq
dep_var <- "gdp"
model = gdp ~ gdp_lag
expanding_OLS1 <- expanding_window_OLS(Data[2:63,], dep_var, start = 19)
#predictions
pred <- do.call(rbind.data.frame, expanding_OLS1[[2]]) # NAS wegen lag!
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred[2:51]
rownames(pred) <- Date_q_pred[2:51]
Date_q_pred <- Date_q[19:63]
pred <- as.ts(pred, start=c(2010,3), end = c(2021,3), frequency = 4)
ts.plot(pred)
### error in and OOS
error_OLS1 <- expanding_OLS1[[4]]
error_OLS1 <-error_OLS1[!is.na(error_OLS1)]
MAE_OLS_OOS1 <- mean(abs(error_OLS1))
MAE_OLS_OOS1
RMSE_OLS_OOS1  <- sqrt(mean(error_OLS1^2))
RMSE_OLS_OOS1
MSE_OLS1 <- mean(error_OLS1^2)
MSE_OLS1
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_OLS1 <- expanding_OLS1[[3]]
final_resid_OLS1 <- resid_OLS1[[length(resid_OLS1)]]
RMSE_OLS_IS1    <- sqrt(mean(final_resid_OLS1^2))
RMSE_OLS_IS1
# R-Sq
actual <- Data[19:63,"gdp"]
rss <- sum(resid_OLS2^2)  ## residual sum of squares
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_OLS2 <- expanding_OLS2[[3]]
RMSE_OLS_IS2   <- sqrt(mean(final_resid_OLS2^2))
RMSE_OLS_IS2
rss <- sum(resid_OLS2^2)  ## residual sum of squares
rss <- sum(resid_OLS2)  ## residual sum of squares
model = gdp ~ cci
expanding_OLS2 <- expanding_window_OLS(Data, dep_var, start = 19)
colnames(pred) <- c("value")
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred
Date_q_pred <- Date_q[19:63]
pred <- as.ts(pred, start=c(2010,3), end = c(2021,3), frequency = 4)
ts.plot(pred)
error_OLS2 <- expanding_OLS2[[4]]
error_OLS2 <-error_OLS2[!is.na(error_OLS2)]
MAE_OLS_OOS2 <- mean(abs(error_OLS2))
MAE_OLS_OOS2
RMSE_OLS_OOS2   <- sqrt(mean(error_OLS2^2))
RMSE_OLS_OOS2
MSE_OLS2 <- mean(error_OLS2^2)
MSE_OLS2
# R-Sq
actual <- Data[19:63,"gdp"]
rss <- sum(resid_OLS2^2)  ## residual sum of squares
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_OLS2 <- expanding_OLS2[[3]]
rss <- sum(resid_OLS2^2)  ## residual sum of squares
final_resid_OLS2 <- resid_OLS2[[length(resid_OLS2)]]
rss <- sum(final_resid_OLS2^2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
rsq
model = gdp ~ google
expanding_OLS3 <- expanding_window_OLS(Data, dep_var, start = 19)
pred <- do.call(rbind.data.frame, expanding_OLS3[[2]])
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred
Date_q_pred <- Date_q[19:63]
pred <- as.ts(pred, start=c(2010,3), end = c(2021,3), frequency = 4)
ts.plot(pred)
### error in and OOS
error_OLS3 <- expanding_OLS3[[4]]
error_OLS3 <-error_OLS[!is.na(error_OLS3)]
MAE_OLS_OOS3 <- mean(abs(error_OLS3))
MAE_OLS_OOS3
RMSE_OLS_OOS3    <- sqrt(mean(error_OLS3^2))
RMSE_OLS_OOS3
MSE_OLS3 <- mean(error_OLS3^2)
MSE_OLS3
# forecast pred on newly data how do i incporpare that???
colnames(Google_AT_qtrly) <- c("Date_q","time","google")
x <- predict(expanding_OLS[[1]][[51]],Google_AT_qtrly[64:65,]) # used last estimated model ...
RMSE_OLS_OOS3
model = gdp ~ google
expanding_OLS3 <- expanding_window_OLS(Data, dep_var, start = 19)
expanding_OLS3 <- expanding_window_OLS(Data, dep_var, start = 19)
pred <- do.call(rbind.data.frame, expanding_OLS3[[2]])
expanding_OLS3 <- expanding_window_OLS(Data, dep_var, start = 19)
pred <- do.call(rbind.data.frame, expanding_OLS3[[2]])
colnames(pred) <- c("value")
pred <- as.ts(pred, start=c(2010,3), end = c(2021,3), frequency = 4)
ts.plot(pred)
### error in and OOS
error_OLS3 <- expanding_OLS3[[4]]
error_OLS3 <-error_OLS[!is.na(error_OLS3)]
MAE_OLS_OOS3 <- mean(abs(error_OLS3))
MAE_OLS_OOS3
RMSE_OLS_OOS3    <- sqrt(mean(error_OLS3^2))
RMSE_OLS_OOS3
MSE_OLS3 <- mean(error_OLS3^2)
MSE_OLS3
model = gdp ~ gdp_lag + cci
expanding_OLS4 <- expanding_window_OLS(Data[2:63,], dep_var, start = 19)
#predictions
pred <- do.call(rbind.data.frame, expanding_OLS4[[2]]) # NAS wegen lag!
colnames(pred) <- c("value")
rownames(pred) <- Date_q_pred[2:51]
Date_q_pred <- Date_q[19:63]
pred <- as.ts(pred, start=c(2010,3), end = c(2021,3), frequency = 4)
ts.plot(pred)
# Errors
error_OLS4 <- expanding_OLS4[[4]]
error_OLS4 <-error_OLS4[!is.na(error_OLS)]
MAE_OLS_OOS4 <- mean(abs(error_OLS4))
MAE_OLS_OOS4
RMSE_OLS_OOS4  <- sqrt(mean(error_OLS4^2))
RMSE_OLS_OOS4
MSE_OLS4 <- mean(error_OLS4^2)
MSE_OLS4
library(readr)
library(readxl)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tseries)
library(forecast)
library(vars)
library(GGally)
library(Metrics)
library(caret)
library(collapse)
library(urca)
t_0 <- as.Date("2006-01-01") #Setting start date for the series
t_1 <- as.Date("2021-07-01") #Setting end date for the series
t_2 <- as.Date("2021-12-31")
Date_q <- seq.Date(t_0,t_1,by="quarter")
Date_m <- seq.Date(t_0,t_2,by="month")
bigT <- length(Date_q)
M <- 6
Data   <- matrix(NA,bigT,M)
colnames(Data)  <- c("gdp", "cci", "google","gdp_ts", "cci_ts", "google_ts")
Data <- as.data.frame(Data)
rownames(Data)  <- as.Date(Date_q)
# abgerufen final am 11.02.2022
#Source: https://data.oecd.org/gdp/quarterly-gdp.htm#indicator-chart
gdp <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/RData/GDP_oecd.csv")[9:71,6:7]
colnames(gdp)[colnames(gdp) %in% c("TIME", "Value")] <- c("QDate", "value")
gdp <- cbind(gdp,Date_q)
#ts:
gdp_ts <- ts(gdp$value, start=c(2006,1), end = c(2021,3), frequency = 4)
Data[(Date_q%in%gdp$Date_q),1] <- gdp$value
Data$gdp_ts <- ts(Data$gdp, start=c(2006,1), end = c(2021,3), frequency = 4)
# abgerufen final am 11.02.2022
#Source: https://ec.europa.eu/info/business-economy-euro/indicators-statistics/economic-databases/business-and-consumer-surveys/download-business-and-consumer-survey-data/time-series_en#consumers
cci <- read.csv2("https://raw.githubusercontent.com/anneval/MA_data/main/RData/CCI.csv")[253:444,c(1,297)]
colnames(cci)[colnames(cci) %in% c("X", "CONS.AT.TOT.COF.BS.M")] <- c("time", "value")
cci <- cbind(cci,Date_m)
cci <- arrange(cci, Date_m)
cci$Date_q <- as.yearqtr(cci$Date_m)
cci$Date_q <- as.Date(cci$Date_q)
#cci$Date_q  <- as.character(cci$Date_m)
#cci$Date_q[CCI_mntly$Date_q == "2021 Q4"] <- "2021 Q3"
cci_qtrly <- cci %>% group_by(Date_q) %>%
summarise_all(mean)
cci_qtrly_63 <- cci_qtrly[1:63,]
Data[(Date_q%in%cci_qtrly_63$Date_q),2] <- (cci_qtrly_63$value)
Data$cci_ts <- ts(Data$cci, start=c(2006,1), end = c(2021,3), frequency = 4)
