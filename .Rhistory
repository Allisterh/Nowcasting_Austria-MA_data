#predictions
pred_VAR2 <- do.call(rbind.data.frame, expanding_VAR2[[2]])
colnames(pred_VAR2) <- c("value")
Date_q_pred <- Date_q[21:69]
pred_VAR2 <- as.ts(pred_VAR2, start=c(2011,1), end = c(2023,1), frequency = 4)
plot(pred_VAR2)
### error in and OOS
error_VAR2 <- expanding_VAR2[[4]]
error_VAR2 <-error_VAR2[!is.na(error_VAR2)]
MAE_VAR2_OOS <- mean(abs(error_VAR2))
MAE_VAR2_OOS
RMSE_VAR2_OOS  <- sqrt(mean(error_VAR2^2))
RMSE_VAR2_OOS
MSE_VAR2 <- mean(error_VAR2^2)
MSE_VAR2
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_VAR2 <- expanding_VAR2[[3]]
final_resid_VAR2 <- resid_VAR2[[length(resid_VAR2)]]
RMSE_VAR2_IS    <- sqrt(mean(final_resid_VAR2^2))
RMSE_VAR2_IS
plot(pred_VAR2)
comparison_errors <- data.frame(     "RMSE_OOS" = RMSE_VAR2_OOS,
"RMSE_IS" = RMSE_VAR2_IS,
"MAE_OOS" = MAE_VAR2_OOS)
stargazer::stargazer(comparison_errors,summary=FALSE)
fit_VAR1 <- VARselect(Data[,1:3],type = "const")
lag_VAR1 <- fit_VAR1$selection[1]
#lag_VAR1
VAR1_est <- vars::VAR(y = Data[,1:3], p = lag_VAR1,type = "const")
VAR1_est <- vars::VAR(y = Data[,1:3], p = 2,type = "const")
summary(VAR1_est$varresult$gdp)
acc_is_VAR1 <- forecast::accuracy(VAR1_est$varresult$gdp) # IS accuracy
stargazer::stargazer(acc_is_VAR1)
forecast_VAR1<- predict(VAR1_est,n.ahead =4)
forecast_VAR1
df_fcst <- as.data.frame(forecast_VAR1$fcst$google)
stargazer::stargazer(df_fcst,summary = FALSE)
###### OOS accuracy
acc_oos_VAR1 <-forecast::accuracy(Data$gdp,forecast_VAR1$fcst$gdp)
plot(forecast_VAR1)
stargazer::stargazer(acc_oos_VAR1)
acc_is_VAR1 <- forecast::accuracy(VAR1_est$varresult$gdp) # IS accuracy
stargazer::stargazer(acc_is_VAR1)
forecast_VAR1<- predict(VAR1_est,n.ahead =4)
forecast_VAR1
df_fcst <- as.data.frame(forecast_VAR1$fcst$google)
stargazer::stargazer(df_fcst,summary = FALSE)
###### OOS accuracy
acc_oos_VAR1 <-forecast::accuracy(Data$gdp,forecast_VAR1$fcst$gdp)
plot(forecast_VAR1)
stargazer::stargazer(acc_oos_VAR1)
# create new dataset with lags first:
Data_Var <-flag(Data[1:3], 1:2)
Data_Var <- cbind(Data[,1:3],Data_Var)
model= gdp ~ L1.gdp +L2.gdp + L1.cci +L2.cci +L1.google + L2.google
expanding_VAR2 <- expanding_window_OLS(Data_Var[3:69,], dep_var, start = 20)
#predictions
pred_VAR2 <- do.call(rbind.data.frame, expanding_VAR2[[2]])
colnames(pred_VAR2) <- c("value")
Date_q_pred <- Date_q[21:69]
pred_VAR2 <- as.ts(pred_VAR2, start=c(2011,1), end = c(2023,1), frequency = 4)
plot(pred_VAR2)
### error in and OOS
error_VAR2 <- expanding_VAR2[[4]]
error_VAR2 <-error_VAR2[!is.na(error_VAR2)]
MAE_VAR2_OOS <- mean(abs(error_VAR2))
MAE_VAR2_OOS
RMSE_VAR2_OOS  <- sqrt(mean(error_VAR2^2))
RMSE_VAR2_OOS
MSE_VAR2 <- mean(error_VAR2^2)
MSE_VAR2
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_VAR2 <- expanding_VAR2[[3]]
final_resid_VAR2 <- resid_VAR2[[length(resid_VAR2)]]
RMSE_VAR2_IS    <- sqrt(mean(final_resid_VAR2^2))
RMSE_VAR2_IS
RMSE_VAR2_OOS
plot(pred_VAR2)
### error in and OOS
error_VAR2 <- expanding_VAR2[[4]]
error_VAR2 <-error_VAR2[!is.na(error_VAR2)]
MAE_VAR2_OOS <- mean(abs(error_VAR2))
MAE_VAR2_OOS
RMSE_VAR2_OOS  <- sqrt(mean(error_VAR2^2))
RMSE_VAR2_OOS
RMSE_VAR2_IS
stargazer::stargazer(acc_oos_VAR1)
stargazer::stargazer(df_fcst,summary = FALSE)
forecast_VAR1
summary(VAR1_est$varresult$gdp)
stargazer::stargazer(acc_oos_VAR1)
acc_is_VAR1 <- forecast::accuracy(VAR1_est$varresult$gdp) # IS accuracy
stargazer::stargazer(acc_is_VAR1)
acc_is_VAR1
forecast_VAR1
df_fcst <- as.data.frame(forecast_VAR1$fcst$gdp)
stargazer::stargazer(df_fcst,summary = FALSE)
###### OOS accuracy
acc_oos_VAR1 <-forecast::accuracy(Data$gdp,forecast_VAR1$fcst$gdp)
plot(forecast_VAR1)
stargazer::stargazer(acc_oos_VAR1)
plot(forecast_VAR1)
pred_VAR2 <- as.ts(pred_VAR2, start=c(2011,1), end = c(2023,1), frequency = 4)
plot(pred_VAR2)
### error in and OOS
error_VAR2 <- expanding_VAR2[[4]]
error_VAR2 <-error_VAR2[!is.na(error_VAR2)]
MAE_VAR2_OOS <- mean(abs(error_VAR2))
MAE_VAR2_OOS
RMSE_VAR2_OOS  <- sqrt(mean(error_VAR2^2))
RMSE_VAR2_OOS
MSE_VAR2 <- mean(error_VAR2^2)
MSE_VAR2
RMSE_VAR2_OOS
# IS error terms----------------------------------------------------------------
# IS: If you are forecasting for an observation that was part of the data sample - it is in-sample forecast.
resid_VAR2 <- expanding_VAR2[[3]]
final_resid_VAR2 <- resid_VAR2[[length(resid_VAR2)]]
RMSE_VAR2_IS    <- sqrt(mean(final_resid_VAR2^2))
RMSE_VAR2_IS
summary(VAR1_est$varresult$gdp)
stargazer::stargazer(summary(VAR1_est$varresult$gdp))
stargazer::stargazer(summary(VAR1_est$varresult$gdp))
x <- summary(VAR1_est$varresult$gdp)
stargazer::stargazer(summary())
stargazer::stargazer(summary(x))
View(x)
summary(VAR1_est$varresult$gdp)
stargazer::stargazer(df_fcst,summary = FALSE)
summary(VAR1_est$varresult)
summary(VAR1_est$varresult)
summary(VAR1_est)
summary(VAR1_est$varresult$gdp)
summary(VAR1_est)
gdp <- window(gdp_ts, end = c(2022, 4))
#Midas regression
midas1 <- midas_r(gdp ~ mls(gdp, 1, 1),start = NULL)
summary(midas1)
coef(midas1)
acc_is_m1<-forecast::accuracy(gdp,midas1$fitted.values)
cci_ts <- ts(cci$value, start=c(2006,1), end = c(2023,3), frequency = 12)
cci <-window(cci_ts, end = c(2022, 12))
#Midas regression
midas2 <- midas_r(gdp ~ mls(cci, 0, 3),start = NULL)
summary(midas2)
coef(midas2)
acc_is_m2<-forecast::accuracy(gdp,midas2$fitted.values)
#### forecasts:
fcst_cci <-window(cci_ts, start = c(2023,1),end = c(2023,3))
fcst_cci <-as.data.frame(window(cci_ts, start = c(2023,1),end = c(2023, 3)))
colnames(fcst_cci)  <- c("cci")
fcst_midas2 <- midasr::forecast(midas2,newdata = fcst_cci, method = "static")
fcst_midas2
google_ts <-ts(Google_AT_daily$value[1:6301], start=c(2006,1), frequency = 365.25)
google <- window(google_ts, end = c(2022,344 ))
google <- as.numeric(google)
y <- c(1:length(google))
datey <- (y-1)*3+1
test <-mlsd(google, 0, datey)
midas3 <- midas_r(gdp ~ mls(gdp, 1, 1) + mls(google, 0, 91),start = NULL)
summary(midas3)
coef(midas3)
acc_is_m3<-forecast::accuracy(gdp,midas3$fitted.values)
#### forecasts:
google_fcst <- as.data.frame(window(google_ts,start=c(2023, 1), end = c(2023,92)))
colnames(google_fcst)  <- c("google")
#1 quarter is 5752/62= 91.30159
fcst_midas3 <- midasr::forecast(midas3,newdata =google_fcst , method = "dynamic")
fcst_midas3
#Midas regression
midas4 <- midas_r(gdp ~ mls(gdp, 1, 1) + mls(cci, 0, 3),
start = NULL)
summary(midas4)
coef(midas4)
acc_is_m4<-forecast::accuracy(gdp,midas4$fitted.values)
#### forecasts:
fcst_midas4 <- midasr::forecast(midas4,newdata = fcst_cci, method = "static")
fcst_midas4
#Midas regression
midas5 <- midas_r(gdp ~ mls(gdp, 1, 1) + mls(google, 0, 91),start = NULL)
summary(midas5)
coef(midas5)
acc_is_m5<-forecast::accuracy(gdp,midas5$fitted.values)
#### forecasts:
fcst_midas5 <- midasr::forecast(midas5,newdata = google_fcst, method = "static")
fcst_midas5
#Midas regression
midas6 <- midas_r(gdp ~ mls(gdp, 1, 1) + mls(cci, 0, 3) + mls(google, 0, 91),
start = NULL)
summary(midas6)
coef(midas6)
acc_is_m6<-forecast::accuracy(gdp,midas6$fitted.values)
#### forecasts:
newdata <- list(fcst_cci,google_fcst)
fcst_midas6 <- midasr::forecast(midas6,newdata = newdata, method = "static")
fcst_midas6
#Midas regression
midas7 <- midas_r(gdp ~ mls(cci, 0, 3) + mls(google, 0, 91),
start = NULL)
summary(midas7)
coef(midas7)
acc_is_m7<-forecast::accuracy(gdp,midas7$fitted.values)
#### forecasts:
fcst_midas7 <- midasr::forecast(midas7,newdata = newdata, method = "static")
fcst_midas7$mean
MIDAS <- rbind(acc_is_m2,acc_is_m3,acc_is_m4,acc_is_m5,acc_is_m6,acc_is_m7)
rownames(MIDAS)  <- c("CCI", "DESI", "AR(1) & CCI","AR(1) & DESI", "AR(1) & CCI & DESI", "CCI & DESI")
print(xtable::xtable(MIDAS,caption="LOOCV results",label="LOOCVresults"),
sanitize.text.function=function(UR.table){UR.table},comment=FALSE)
MIDAS <- rbind(acc_is_m2,acc_is_m3,acc_is_m4,acc_is_m5,acc_is_m6,acc_is_m7)
rownames(MIDAS)  <- c("CCI", "DESI", "AR(1) & CCI","AR(1) & DESI", "AR(1) & CCI & DESI", "CCI & DESI")
print(xtable::xtable(MIDAS,caption="MIDAS results",label="MIDASresults"),
sanitize.text.function=function(UR.table){UR.table},comment=FALSE)
MIDAS <- rbind(acc_is_m1,acc_is_m2,acc_is_m3,acc_is_m4,acc_is_m5,acc_is_m6,acc_is_m7)
rownames(MIDAS)  <- c("AR(1)","CCI", "DESI", "AR(1) & CCI","AR(1) & DESI", "AR(1) & CCI & DESI", "CCI & DESI")
print(xtable::xtable(MIDAS,caption="MIDAS results",label="MIDASresults"),
sanitize.text.function=function(UR.table){UR.table},comment=FALSE)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
getwd()
library(readr)
library(readxl)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tseries)
library(forecast)
library(vars)
library(GGally)
library(Metrics)
library(caret)
library(collapse)
library(urca)
library(tsbox)
library(lubridate)
library(dygraphs)
#library(macror) # for latex table adf
library(xtable) # latex table
library(midasr) # Mixed data sampling models
library(BVAR)
# set uo Data Matrix
t_0 <- as.Date("2006-01-01") #Setting start date for the series
t_1 <- as.Date("2023-01-01") #Setting end date for the series
t_2 <- as.Date("2023-03-01")
Date_q <- seq.Date(t_0,t_1,by="quarter")
Date_m <- seq.Date(t_0,t_2,by="month")
bigT <- length(Date_q)
M <- 6
Data   <- matrix(NA,bigT,M)
colnames(Data)  <- c("gdp", "cci", "google","gdp_ts", "cci_ts", "google_ts")
Data <- as.data.frame(Data)
rownames(Data)  <- as.Date(Date_q)
# accessed last 11.02.2022
#Source: https://data.oecd.org/gdp/quarterly-gdp.htm#indicator-chart
#gdp <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/RData/GDP_oecd.csv")[9:78,6:7]
gdp <- read_csv("https://raw.githubusercontent.com/anneval/MA_data/main/RData/DP_LIVE_22062023141754411.csv")[10:78,6:7]
colnames(gdp)[colnames(gdp) %in% c("TIME", "Value")] <- c("QDate", "value")
gdp <- cbind(gdp,Date_q)
#ts:
gdp_ts <- ts(gdp$value, start=c(2006,1), end = c(2023,1), frequency = 4)
Data[(Date_q%in%gdp$Date_q),1] <- gdp$value
Data$gdp_ts <- ts(Data$gdp, start=c(2006,1), end = c(2023,1), frequency = 4)
# accessed last 11.02.2022
#Source: https://ec.europa.eu/info/business-economy-euro/indicators-statistics/economic-databases/business-and-consumer-surveys/download-business-and-consumer-survey-data/time-series_en#consumers
cci <- read_csv2("https://raw.githubusercontent.com/anneval/MA_data/main/RData/CCI_mtly_neu.csv")[253:459,c(1,297)]
colnames(cci)[colnames(cci) %in% c("...1", "CONS.AT.TOT.COF.BS.M")] <- c("time", "value")
cci <- cbind(cci,Date_m)
cci <- arrange(cci, Date_m)
cci$Date_q <- as.yearqtr(cci$Date_m)
cci$Date_q <- as.Date(cci$Date_q)
cci_qtrly <- cci %>% group_by(Date_q) %>%
summarise_all(mean)
cci_qtrly_69 <- cci_qtrly[1:69,]
#Data[(Date_q%in%cci_qtrly_63$Date_q),2] <- (cci_qtrly_63$value)
Data[(Date_q%in%cci_qtrly$Date_q),2] <- cci_qtrly$value
cci_ts <- ts(Data$cci, start=c(2006,1), end = c(2023,1), frequency = 4)
#series gets updated daily via Github workflow
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/raw/at/trendecon_sa.csv")
# transform to quarterly
Google_AT_daily$time <- as.Date(Google_AT_daily$time)
Google_AT_daily <- arrange(Google_AT_daily, time)
Google_AT_daily$Date_q <- as.yearqtr(Google_AT_daily$time)
Google_AT_daily$Date_q <- as.Date(Google_AT_daily$Date_q)
Google_AT_qtrly <- Google_AT_daily %>% group_by(Date_q) %>%
summarise_all(mean)
Google_AT_qtrly_69 <- Google_AT_qtrly[1:69,]
Data[(Date_q%in%Google_AT_qtrly_69$Date_q),3] <- (Google_AT_qtrly_69$value)
google_ts <- ts(Data$google, start=c(2006,1), end = c(2023,1), frequency = 4)
set.seed(123)
Data <- Data[,1:3]
mn <- bv_minnesota( lambda = bv_lambda(mode = 0.2, sd = 0.4, min = 0.0001, max = 5),alpha = bv_alpha(mode = 2), var = 1e07)
soc <- bv_soc(mode = 1, sd = 1, min = 1e-04, max = 50)
sur <- bv_sur(mode = 1, sd = 1, min = 1e-04, max = 50)
priors <- bv_priors(hyper = "auto", mn = mn, soc = soc, sur = sur)
mh <- bv_metropolis(scale_hess = c(0.05, 0.0001, 0.0001),adjust_acc = TRUE, acc_lower = 0.25, acc_upper = 0.45)
coef(run)
run <- bvar(Data, lags = 2, n_draw = 15000, n_burn = 5000, n_thin = 1,priors = priors, mh = mh, verbose = TRUE)
print(run)
plot(run)
plot(run, type = "dens",vars_response = "gdp")
plot(density(run))
plot(run$beta)
summary(pred, vars = 1L)
### forecasting
#resid <-residuals(run)
#fitted <- fitted(run)
pred  <- predict(run, horizon = 4, conf_bands = c(0.05, 0.16))
#plot(run$beta)
#x <- density(run) # so nur densities von hypermparameters
x <-density(run, vars_response = "gdp")
plot(x)
plot(run, type = "dens",vars_response = "gdp")
summary(pred, vars = 1L)
pred_fore <- c(0.33,-1.05,-0.10,0.12)
pred_fore <- as.data.frame(pred_fore)
acc_oos_VAR1 <-forecast::accuracy(Data$gdp,pred_fore$pred_fore)
summary(pred)
test <- as.data.frame(pred$fcast)
test <- as.data.frame(test)
acc_oos_BVAR <-forecast::accuracy(Data$gdp,pred$fcst)
View(acc_oos_BVAR)
plot(pred)
plot(predict(run), area = TRUE, t_back = 32,vars = c("gdp", "cci", "google"))
View(acc_oos_VAR1)
RMSE_in_BVAR_gd <-sqrt (mean (resid_gdp^2))
RMSE_in_BVAR_cci <-sqrt (mean (resid_cci^2))
RMSE_in_BVAR_go <-sqrt (mean (resid_google^2))
RMSE_in_BVARall <-sqrt (mean (residuals(run)^2))
resid <- residuals(run)
resid_gdp <- resid[,1]
resid_cci <- resid[,2]
resid_google <- resid[,3]
coef(run)
RMSE_in_BVAR_gd <-sqrt (mean (resid_gdp^2))
RMSE_in_BVAR_cci <-sqrt (mean (resid_cci^2))
RMSE_in_BVAR_go <-sqrt (mean (resid_google^2))
RMSE_in_BVARall <-sqrt (mean (residuals(run)^2))
density(run)
RMSE_in_BVARall
RMSE_in_BVAR_gd
density(run)
plot(density(run))
#density(run)
#plot(density(run))
#plot(run$beta)
#x <- density(run) # so nur densities von hypermparameters
x <-density(run, vars_response = "gdp")
plot(x)
run_mcmc <- as.mcmc(run, vars = "lambda")
geweke.diag(run_mcmc)
plot(run_mcmc)
plot(run, type = "full", vars = "google")
plot(density(pred$fcast))
coef(run)
tidy <- tidy(run,vars_response = "gdp")
augment <- augment(run)
augmentpred <- augment(pred)
plot(density(run, vars_impulse = 1))
plot(residuals(run))
plot(fitted(run))
irf(run)
plot(irf(run))
fevd(run)
plot(fevd(run))
summary(irf(run))
plot(run, type= c("density"))
plot(run, "trace", "ml")
plot(run, type = "irf", vars_response = 2)
plot(run, type = "fcast", vars = 2)
plot(predict(run))
plot(predict(run, conf_bands = 0.25), orientation = "h")
plot(predict(run), col = "transparent", area = TRUE)
summary(predict(run))
coef(summary)
coef(run)
summary(run)
stargazer::stargazer(summary(run))
stargazer::stargazer(coef(run))
# from https://www.rdocumentation.org/packages/BVAR/versions/1.0.4
# Load the package
library("BVAR")
# Access a subset of the fred_qd dataset
data <- fred_qd[, c("GDPC1", "CPIAUCSL", "UNRATE", "FEDFUNDS")]
# Transform it to be stationary
data <- fred_transform(data, codes = c(5, 5, 5, 1), lag = 4)
# Estimate using default priors and MH step
x <- bvar(data, lags = 1)
# Estimate using default priors and MH step
x <- bvar(data, lags = 1)
# Check convergence via trace and density plots
plot(x)
# Calculate and store forecasts and impulse responses
predict(x) <- predict(x, horizon = 20)
# Calculate and store forecasts and impulse responses
predict(x) <- predict(x, horizon = 20)
irf(x) <- irf(x, horizon = 20, identification = TRUE)
# Plot forecasts and impulse responses
plot(predict(x))
plot(irf(x))
logLik(run)
set.seed(123)
Data <- Data[,1:3]
mn <- bv_minnesota( lambda = bv_lambda(mode = 0.2, sd = 0.4, min = 0.0001, max = 5),alpha = bv_alpha(mode = 2), var = 1e07)
soc <- bv_soc(mode = 1, sd = 1, min = 1e-04, max = 50)
sur <- bv_sur(mode = 1, sd = 1, min = 1e-04, max = 50)
soc <- bv_soc(mode = 1, sd = 1, min = 1e-04, max = 50)
sur <- bv_sur(mode = 1, sd = 1, min = 1e-04, max = 50)
priors <- bv_priors(hyper = "auto", mn = mn, soc = soc, sur = sur)
mh <- bv_metropolis(scale_hess = c(0.05, 0.0001, 0.0001),adjust_acc = TRUE, acc_lower = 0.25, acc_upper = 0.45)
run <- bvar(Data, lags = 2, n_draw = 15000, n_burn = 5000, n_thin = 1,priors = priors, mh = mh, verbose = TRUE)
run <- bvar(Data, lags = 2, n_draw = 15000, n_burn = 5000, n_thin = 1,priors = priors, mh = mh, verbose = TRUE)
print(run)
print(run)
resid <- residuals(run)
resid_gdp <- resid[,1]
resid_cci <- resid[,2]
resid_google <- resid[,3]
coef(run)
stargazer::stargazer(coef(run))
#, vars_impulse = "gdp-lag1")
vcov(run)
print(run)
RMSE_in_BVAR_gd <-sqrt (mean (resid_gdp^2))
RMSE_in_BVAR_cci <-sqrt (mean (resid_cci^2))
RMSE_in_BVAR_go <-sqrt (mean (resid_google^2))
#density(run)
#plot(density(run))
#plot(run$beta)
#x <- density(run) # so nur densities von hypermparameters
x <-density(run, vars_response = "gdp")
RMSE_in_BVAR_gd
RMSE_in_BVARall
### forecasting
#resid <-residuals(run)
#fitted <- fitted(run)
pred  <- predict(run, horizon = 4, conf_bands = c(0.05, 0.16))
summary(pred, vars = 1L)
stargazer::stargazer(summary(pred, vars = 1L))
summary(pred, vars = 1L))
summary(pred, vars = 1L)
pred_fore <- c(0.29,-1.06,-0.07,0.12)
pred_fore <- as.data.frame(pred_fore)
acc_oos_VAR1 <-forecast::accuracy(Data$gdp,pred_fore$pred_fore)
acc_oos_VAR1
summary(pred)
View(pred)
test <- as.data.frame(pred$fcast)
test <- as.data.frame(test)
acc_oos_BVAR <-forecast::accuracy(Data$gdp,pred$fcst)
acc_oos_BVAR
acc_oos_BVAR <-forecast::accuracy(Data,pred$fcst)
acc_oos_BVAR <-forecast::accuracy(Data$gdp,pred$fcst)
acc_oos_BVAR
summary(pred)
test <- as.data.frame(pred$fcast)
test <- as.data.frame(test)
acc_oos_BVAR <-forecast::accuracy(Data$gdp,pred$fcst)
View(acc_oos_VAR1)
View(acc_oos_VAR1)
plot(pred)
plot(predict(run), area = TRUE, t_back = 32,vars = c("gdp", "cci", "google"))
run_mcmc <- as.mcmc(run, vars = "lambda")
geweke.diag(run_mcmc)
plot(run_mcmc)
plot(run, type = "full", vars = "google")
plot(run, type = "full", vars = "gdp")
plot(run, vars = "gdp")
plot(run, type = "full", vars = "gdp")
geweke.diag(run_mcmc)
plot(geweke.diag(run_mcmc))
plot(run_mcmc)
plot(run_mcmc, type = "full", vars = "gdp")
plot(run, type = "full", vars = "gdp")
vcov(run)
coef(run)
tidy <- tidy(run,vars_response = "gdp")
augment <- augment(run)
augmentpred <- augment(pred)
vcov(run)
coef(run)
tidy <- tidy(run,vars_response = "gdp")
augment <- augment(run)
augmentpred <- augment(pred)
library(BVARverse)
# NOT RUN {
# Access a subset of the fred_qd dataset
data <- fred_qd[, c("CPIAUCSL", "UNRATE", "FEDFUNDS")]
# Estimate a BVAR using one lag, default settings and very few draws
x <- bvar(data, lags = 1, n_draw = 1000L, n_burn = 200L, verbose = FALSE)
# Create tidy tibbles from the outputs
tidy(x)
tidy(predict(x))
# NOT RUN {
# Access a subset of the fred_qd dataset
data <- fred_qd[, c("CPIAUCSL", "UNRATE", "FEDFUNDS")]
library(BVARverse)
# NOT RUN {
# Access a subset of the fred_qd dataset
data <- fred_qd[, c("CPIAUCSL", "UNRATE", "FEDFUNDS")]
# Transform it to be stationary
data <- fred_transform(data, codes = c(5, 5, 1), lag = 4)
# Estimate a BVAR using one lag, default settings and very few draws
x <- bvar(data, lags = 1, n_draw = 1000L, n_burn = 200L, verbose = FALSE)
# Create tidy tibbles from the outputs
tidy(x)
t <- tidy(irf(x))
tidy(predict(x))
# }
aug <- augment(x)
bv_ggplot(x)
