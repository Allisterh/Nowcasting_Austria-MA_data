stop_if_no_data <- function(keyword, geo) {
files_indicator <- grep(keyword,
list.files(path_raw(tolower(geo))),
value = TRUE,
fixed = TRUE)
files_indicator_raw <- grep(keyword,
list.files(path_draws(tolower(geo))),
value = TRUE,
fixed = TRUE)
if (length(files_indicator) == 0 & (length(files_indicator_raw) == 0)) {
stop("No existing files found for keyword '", keyword, "' Have you run proc_keyword_init()?")
}
}
check_when_last_processed <- function(keyword, geo) {
if (!exists(".latest_google_date")) .latest_google_date <<- as.Date("2099-01-01")
previous_google_date <- latest_google_date(keyword, geo)
if (previous_google_date > .latest_google_date) .latest_google_date <<- previous_google_date
message(".latest_google_date: ", .latest_google_date)
message("previous_google_date: ", previous_google_date)
return(previous_google_date)
}
latest_google_date <- function(keyword, geo) {
if (fs::file_exists(path_keyword(keyword, geo, "sa"))) {
max(read_keyword(keyword, geo, "sa")$time)
} else {
as.Date("1900-01-01")
}
}
proc_keyword("arbeitslos","AT")
# proc functions work on the file system
#' Build paths from base directory
#'
#' The base directory is obtained by `getOption("path_trendecon")`. If the
#' option is not present, the base directory defaults to the parent directory
#' of the current working directory. To set the option, run
#'
#'     options(path_trendecon = "~/path/to/base/dir")
#'
#' @param ... Character vector of subdirectories relative to the base
#'     directory.
#'
#' @return The full path to the base directory, or (if provided as a
#' parameter), the path to the subdirectory.
#' @seealso [R.utils::setOption]
#' @export
#' @examples
#' path_trendecon("data-raw")
#'
path_trendecon <- function(...) {
base <- getOption("path_trendecon", default = normalizePath("."))
fs::path(base, ...)
}
# all subdirectoryies are specified here. Don't mention any subdirs in the code
# dir to store the individual draws. Not stricly needed but useful for research.
path_draws <- function(...) {
path_trendecon("indicator_raw", ...)
}
# dir to store the raw data
path_raw <- function(...) {
path_trendecon("raw", ...)
}
# dir to store the daily data for download. Uses this name, because we link
# there from the website.
# FIXME set up a user friendly system to download series for DE AT CH at all freqs.
path_daily <- function(...) {
path_trendecon("daily", ...)
}
path_data <- function(...) {
path_trendecon("data", ...)
}
# #' Build paths from `data-raw` directory
# #'
# #' @param ... Character vector of subdirectories relative to the `data-raw`
# #'     directory.
# #'
# #' @return The full path to the `data-raw` directory, or (if provided as a
# #' parameter), the path to the subdirectory.
# #' @seealso [path_trendecon]
# #' @export
# path_data_raw <- function(...) {
#   path_trendecon(...)
# }
# #' Build paths from `data` directory
# #'
# #' @param ... Character vector of subdirectories relative to the `data`
# #'     directory.
# #'
# #' @return The full path to the `data` directory, or (if provided as a
# #' parameter), the path to the subdirectory.
# #' @seealso [path_trendecon]
# #' @export
# path_data <- function(...) {
#   message("deprecated use of path_data()")
#   path_trendecon("..", "data", ...)
# }
create_dir_if_needed <- function(x) {
if (!dir.exists(x)) {
message("create", x)
dir.create(x, recursive = TRUE)
}
x
}
create_data_dirs <- function(){
create_dir_if_needed(path_data())
create_dir_if_needed(path_raw())
}
#' Build path to indicator data file
#'
#' Builds path to indicator files of the form
#' `/{base_dir}/data-raw/indicator/{keyword}_{suffix}.csv`.
#'
#' @param keyword Keyword (character vector) for which to construct the path
#'     to the indicator.
#' @param geo geographical area
#' @param suffix Character vector for file suffix.
#' @seealso [path_trendecon]
#' @export
path_keyword <- function(keyword, geo = "AT", suffix = "sa") {
normalizePath(path_raw(tolower(geo), paste0(keyword, "_", suffix, ".csv")), mustWork = FALSE)
}
# read_keyword("Insolvenz")
read_keyword <- function(keyword, geo = "AT", suffix = "sa") {
readr::read_csv(path_keyword(keyword, geo, suffix), col_types = cols())
}
#' Read keyword indicator data from disk
#'
#' Reads keyword indicators from csv files from
#' `/{base_dir}/data-raw/indicator/{keyword}_{suffix}.csv` where `{keyword}`
#' is one of the keywords in parameter `keywords`.
#'
#' @param keywords A vector of keywords.
#' @param geo geographical area.
#' @param suffix Suffix in file names, defaults to `"sa"`. Common for all
#'     keywords.
#' @param id Category id, defaults to `NULL`.
#'
#' @return A tibble with columns `keyword`, `time`, `value`.
#' @export
read_keywords <- function(keywords, geo = "AT", suffix = "sa", id = NULL) {
read_keywords_one <- function(keyword) {
ans <-
read_keyword(keyword, geo = geo, suffix = suffix) %>%
mutate(keyword = keyword) %>%
select(keyword, id, time, value)
if (!is.null(id)) {
ans <- filter(ans, id == !!id) %>%
select(-id)
}
ans
}
bind_rows(lapply(keywords, read_keywords_one))
}
#' Write csv file for keyword indicator
#'
#' Writes csv file for keyword indicator to
#' `/{base_dir}/data-raw/indicator/{keyword}_{suffix}.csv`.
#'
#' @param x Tibble of data to write to file.
#' @param suffix Character vector for file suffix, defaults to `"sa"`.
#' @inheritParams path_keyword
#' @seealso [path_keyword]
#' @export
write_keyword <- function(x, keyword, geo, suffix = "sa") {
path <- path_keyword(keyword, geo, suffix)
create_dir_if_needed(dirname(path))
write_csv(x, path)
}
proc_keyword("arbeitslos","AT")
View(path_raw)
proc_keyword("arbeitslos","AT")
View(proc_keyword_latest)
data <- read.csv("https://raw.githubusercontent.com/trendecon/data/master/data/ch/trendecon_sa.csv")
tsbox::ts_plot(data, title = "Switzerland")
data <- read.csv("https://raw.githubusercontent.com/trendecon/data/master/data/de/trendecon_sa.csv")
tsbox::ts_plot(data, title = "Germany")
data <- read.csv("https://raw.githubusercontent.com/trendecon/data/master/data/at/trendecon_sa.csv")
tsbox::ts_plot(data, title = "Austria")
knitr::opts_chunk$set(echo = TRUE)
lapply(keywords, proc_keyword)
keywords <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos", "Insolvenz")
lapply(keywords, proc_keyword)
View(data)
View(data)
wk <- filter(data,data$keyword =="Wirtschaftskrise")
adf.test(wk$value)
ts_plot(wk)
ka <- filter(data,data$keyword =="Kurzarbeit")
adf.test(ka$value)
ts_plot(ka)
gtrendecon::proc_all()
library(trendecon)
knitr::opts_chunk$set(echo = TRUE)
getwd()
lapply(keywords, proc_keyword) # do stepwise?
library(trendecon)
lapply(keywords, proc_keyword) # do stepwise?
proc_keyword("arbeitslos","AT")
proc_keyword("Wirtschaftskrise","AT")
proc_keyword("Kurzarbeit","AT")
# read in all data series from the last step (seas. adjust)
data <- read_keywords(keywords,geo = "AT", id = "seas_adj")
# read in all data series from the last step (seas. adjust)
data <- read_keywords(keyword,geo = "AT", id = "seas_adj")
keyword <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos") #Insolvenz
# read in all data series from the last step (seas. adjust)
data <- read_keywords(keyword,geo = "AT", id = "seas_adj")
View(data)
# Combine the adjusted key word series to one overall sentinment series using PCA!
# make sure all keywords have the same span
data <- data %>%
filter(time <= min(ts_summary(data)$end))
library(tidyverse)
# Combine the adjusted key word series to one overall sentinment series using PCA!
# make sure all keywords have the same span
data <- data %>%
filter(time <= min(ts_summary(data)$end))
library(forecast)
# Combine the adjusted key word series to one overall sentinment series using PCA!
# make sure all keywords have the same span
data <- data %>%
filter(time <= min(ts_summary(data)$end))
library(tsbox)
# Combine the adjusted key word series to one overall sentinment series using PCA!
# make sure all keywords have the same span
data <- data %>%
filter(time <= min(ts_summary(data)$end))
x_prcomp <- filter(ts_prcomp(data), id == "PC1") %>%
select(-id) %>%
ts_scale()
# determine PC sign based on average correlation with actual time series
values  <- mapply(getElement, split(data, data$keyword), "value")
corsign <- mean(cor(values, x_prcomp$value))
if(corsign < 0) {
x_prcomp$value <- -x_prcomp$value
}
if (index_name == "trendecon") {
x_prcomp$value <- -x_prcomp$value
}
# Final Index
write_keyword(x_prcomp, index_name, geo, "sa")
geo ="AT"
# Final Index
write_keyword(x_prcomp, index_name, geo, "sa")
# Final Index
write_keyword(x_prcomp, geo, "sa")
# Final Index
x <- write_keyword(x_prcomp, geo, "sa")
ts.plot(x)
plot(x)
x_prcomp$value <- -x_prcomp$value
# Final Index
write_keyword(x_prcomp, geo, "sa")
plot(x)
plot(x_prcomp)
ts.plot(x_prcomp$value)
kw_econsent <- c(
"Wirtschaftskrise",
"Kurzarbeit",
"arbeitslos",
)
#1-create a variable holding the set of keywords used for the series:
kw_econsent <- c(
"Wirtschaftskrise",
"Kurzarbeit",
"arbeitslos"
)
proc_index(kw_econsent, "AT")
proc_index(kw_econsent, "AT", "econsent")
indices_in_production <- c(
<...>,
indices_in_production <- c(
"econsent"
)
proc_index(keywords,"AT", trendecon)
keywords <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos") #Insolvenz
proc_index(keywords,"AT", trendecon)
proc_index(keywords,"AT", trendecon)
proc_index(keywords,"AT", "trendecon")
remotes::install_github("rstudio/bslib")
---
title: "Economic Sentiment & GDP Nowcasting Austria"
output:
flexdashboard::flex_dashboard:
theme:
version: 4
bootswatch: minty
orientation: rows
vertical_layout: fill
social: ["menu"]
navbar:
- {icon: "fa-github",
title: "Data",
href: "https://github.com/anneval/MA", align: right, target: blank}
- {title: "R package", href: "https://trendecon.github.io/trendecon/", align: right, target: blank}
---
library(flexdashboard)
dygraph(Google_AT_daily,group = "keywords")%>%
dyAxis("x", drawGrid = FALSE)%>%
dySeries("value", label = "Index")%>%
dyEvent("2020-3-16", "Lockdown #1", labelLoc = "bottom")%>%
dyEvent("2020-5-1", "End of Lockdown #1", labelLoc = "bottom")%>%
dyEvent("2020-9-14", "Mandatory wearing of masks", labelLoc = "bottom")%>%
dyEvent("2020-11-3", "Lockdown 'light'", labelLoc = "bottom")%>%
dyEvent("2020-11-17", "Lockdown #2", labelLoc = "bottom")%>%
dyEvent("2020-12-6", "End of Lockdown #2", labelLoc = "bottom")%>%
dyEvent("2020-12-26", "Lockdown #3", labelLoc = "bottom")%>%
dyEvent("2021-2-7", "End of Lockdown #3", labelLoc = "bottom")%>%
dyEvent("2021-4-1", "Regional Lockdown (Vienna, Burgenland, Lower Austria)", labelLoc = "bottom")%>%
dyEvent("2021-4-11", "End of Regional Lockdown", labelLoc = "bottom")%>%
dyEvent("2021-5-19", "Easing measures - gastronomy, tourism, sports", labelLoc = "bottom")%>%
dyEvent("2021-6-10", "Easing measures - less social distancing", labelLoc = "bottom")%>%
dyEvent("2021-7-01", "Easing measures - night gastronomy", labelLoc = "bottom")%>%
dyEvent("2021-11-15", "Lockdown for unvaccinated") %>%
dyEvent("2021-11-22", "Lockdown #4", labelLoc = "bottom")%>%
dyEvent("2021-12-12", "End of Lockdown #4", labelLoc = "bottom")%>%
dyEvent("2022-01-31", "End of Lockdown for unvaccinated", labelLoc = "bottom") %>%
dyRangeSelector(dateWindow = c("2020-01-01", today))%>%
dyOptions(useDataTimezone = TRUE)
library(flexdashboard)
library(tsbox)
library(dygraphs)
library(readr)
library(dplyr)
library(tidyr)
library(knitr)
library(ggplot2)
today <- as.character(Sys.Date())
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/trendecon/data/master/data/at/trendecon_sa.csv")
ts_plot(Google_AT_daily)
dygraph(Google_AT_daily,group = "keywords")%>%
dyAxis("x", drawGrid = FALSE)%>%
dySeries("value", label = "Index")%>%
dyEvent("2020-3-16", "Lockdown #1", labelLoc = "bottom")%>%
dyEvent("2020-5-1", "End of Lockdown #1", labelLoc = "bottom")%>%
dyEvent("2020-9-14", "Mandatory wearing of masks", labelLoc = "bottom")%>%
dyEvent("2020-11-3", "Lockdown 'light'", labelLoc = "bottom")%>%
dyEvent("2020-11-17", "Lockdown #2", labelLoc = "bottom")%>%
dyEvent("2020-12-6", "End of Lockdown #2", labelLoc = "bottom")%>%
dyEvent("2020-12-26", "Lockdown #3", labelLoc = "bottom")%>%
dyEvent("2021-2-7", "End of Lockdown #3", labelLoc = "bottom")%>%
dyEvent("2021-4-1", "Regional Lockdown (Vienna, Burgenland, Lower Austria)", labelLoc = "bottom")%>%
dyEvent("2021-4-11", "End of Regional Lockdown", labelLoc = "bottom")%>%
dyEvent("2021-5-19", "Easing measures - gastronomy, tourism, sports", labelLoc = "bottom")%>%
dyEvent("2021-6-10", "Easing measures - less social distancing", labelLoc = "bottom")%>%
dyEvent("2021-7-01", "Easing measures - night gastronomy", labelLoc = "bottom")%>%
dyEvent("2021-11-15", "Lockdown for unvaccinated") %>%
dyEvent("2021-11-22", "Lockdown #4", labelLoc = "bottom")%>%
dyEvent("2021-12-12", "End of Lockdown #4", labelLoc = "bottom")%>%
dyEvent("2022-01-31", "End of Lockdown for unvaccinated", labelLoc = "bottom") %>%
dyRangeSelector(dateWindow = c("2020-01-01", today))%>%
dyOptions(useDataTimezone = TRUE)
keywords <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos") #Insolvenz
dygraph(Google_AT_daily,group = "keywords")%>%
dyAxis("x", drawGrid = FALSE)%>%
dySeries("value", label = "Index")%>%
dyEvent("2020-3-16", "Lockdown #1", labelLoc = "bottom")%>%
dyEvent("2020-5-1", "End of Lockdown #1", labelLoc = "bottom")%>%
dyEvent("2020-9-14", "Mandatory wearing of masks", labelLoc = "bottom")%>%
dyEvent("2020-11-3", "Lockdown 'light'", labelLoc = "bottom")%>%
dyEvent("2020-11-17", "Lockdown #2", labelLoc = "bottom")%>%
dyEvent("2020-12-6", "End of Lockdown #2", labelLoc = "bottom")%>%
dyEvent("2020-12-26", "Lockdown #3", labelLoc = "bottom")%>%
dyEvent("2021-2-7", "End of Lockdown #3", labelLoc = "bottom")%>%
dyEvent("2021-4-1", "Regional Lockdown (Vienna, Burgenland, Lower Austria)", labelLoc = "bottom")%>%
dyEvent("2021-4-11", "End of Regional Lockdown", labelLoc = "bottom")%>%
dyEvent("2021-5-19", "Easing measures - gastronomy, tourism, sports", labelLoc = "bottom")%>%
dyEvent("2021-6-10", "Easing measures - less social distancing", labelLoc = "bottom")%>%
dyEvent("2021-7-01", "Easing measures - night gastronomy", labelLoc = "bottom")%>%
dyEvent("2021-11-15", "Lockdown for unvaccinated") %>%
dyEvent("2021-11-22", "Lockdown #4", labelLoc = "bottom")%>%
dyEvent("2021-12-12", "End of Lockdown #4", labelLoc = "bottom")%>%
dyEvent("2022-01-31", "End of Lockdown for unvaccinated", labelLoc = "bottom") %>%
dyRangeSelector(dateWindow = c("2020-01-01", today))%>%
dyOptions(useDataTimezone = TRUE)
?ts_xts
dygraph(Google_AT_daily,group = "keywords")%>%
dyAxis("x", drawGrid = FALSE)%>%
dySeries("value", label = "Index")%>%
dyRangeSelector(dateWindow = c("2020-01-01", today))%>%
dyOptions(useDataTimezone = TRUE)
View(Google_AT_daily)
economic_sentiment <- Google_AT_daily %>%
select(time,value) %>%
ts_xts()
dygraph(Google_AT_daily,group = "keywords")%>%
dyAxis("x", drawGrid = FALSE)%>%
dySeries("value", label = "Index")%>%
dyRangeSelector(dateWindow = c("2020-01-01", today))%>%
dyOptions(useDataTimezone = TRUE)
dygraph(economic_sentiment,group = "keywords")%>%
dyAxis("x", drawGrid = FALSE)%>%
dySeries("value", label = "Index")%>%
dyRangeSelector(dateWindow = c("2020-01-01", today))%>%
dyOptions(useDataTimezone = TRUE)
#DO TOMORROW!
proc_keyword_init("Insolvenz","AT")#bankruptcy
knitr::opts_chunk$set(echo = TRUE)
library(trendecon)
library(tidyverse)
library(tsbox)
keywords <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos") #Insolvenz
geo ="AT"
proc_index(keywords,"AT", "trendecon")
1+1
#DO TOMORROW!
proc_keyword_init("Insolvenz","AT")#bankruptcy
library(flexdashboard)
library(tsbox)
library(dygraphs)
library(readr)
library(dplyr)
library(tidyr)
library(knitr)
library(ggplot2)
today <- as.character(Sys.Date())
events <- read.csv("https://github.com/anneval/Dashboard/blob/main/Events.csv")
1+1
View(events)
Google_AT_daily <- read.csv("https://github.com/anneval/MA/blob/main/Code/raw/at/trendecon_sa.csv")
#setwd("/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT")
keywords <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos","Insolvenz") #Insolvenz
proc_index(keywords,"AT", "trendecon")
1+1
proc_keyword_init("Inflation","AT") #??? Preisanstieg, Energiepreise
1+1
#setwd("/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT")
keywords <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos","Insolvenz", "Inflation") #Insolvenz
proc_index(keywords,"AT", "trendecon")
1+1
index <- read.csv("/Users/annevalder/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT/Code/raw/at/trendecon_sa.csv")
ts.plot(index$value)
Google_AT_daily <- read.csv("https://github.com/anneval/MA/blob/e5ea96a2a19451b7ba63b2fe2350acc99ca4db2f/Code/raw/at/trendecon_sa.csv")
raw.githubusercontent.com/${anneval}/${MA}/${main}/${trendecon_sa.csv}
Google_AT_daily <- read.csv("https://github.com/anneval/MA/blob/main/raw/at/trendecon_sa.csv")
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/anneval/MA/blob/main/raw/at/trendecon_sa.csv")
https://raw.githubusercontent.com/anneval/MA/main/tic.R
https://raw.githubusercontent.com/anneval/MA/main/raw/at/trendecon_sa.csv
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/anneval/MA/main/raw/at/trendecon_sa.csv")
View(Google_AT_daily)
keywords <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos", "Insolvenz","Inflation") #
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/anneval/MA/main/raw/at/trendecon_sa.csv")
economic_sentiment <- Google_AT_daily %>%
select(time,value) %>%
ts_xts()
# works???? NO!
events <- read.csv("https://github.com/anneval/Dashboard/blob/main/Events.csv")
dygraph(economic_sentiment,group = "keywords")%>%
dyAxis("x", drawGrid = FALSE)%>%
dySeries("value", label = "Index")%>%
dyRangeSelector(dateWindow = c("2020-01-01", today))%>%
dyOptions(useDataTimezone = TRUE)
tic::use_ghactions_deploy()
proc_index(keywords,"AT", "trendecon")
getwd()
setwd("~/Desktop/Uni/WU WIEN/SoSe_21/MA/GIT")
proc_index(keywords,"AT", "trendecon")
getwd()x
getwd()
library(trendecon)
library(tidyverse)
library(tsbox)
# Specify region to Austria
# Select keywords: arbitraily chosen
geo <- "AT"
keywords <- c("Wirtschaftskrise", "Kurzarbeit", "arbeitslos","Insolvenz", "Inflation")
proc_index(keywords,"AT", "trendecon")
1+1
proc_index(keywords,"AT", "trendecon")
tic::use_ghactions_deploy()
use_ghactions_deploy(
path = usethis::proj_get(),
repo = get_repo_slug(remote),
key_name_private = "TIC_DEPLOY_KEY",
key_name_public = "Deploy key for GitHub Actions",
remote = "origin"
)
install.packages("tictactoe")
verify_install <- function(pkg_names) { # nolint
lapply(pkg_names, function(x) verify_install_one(x))
}
verify_install_one <- function(pkg_name) { # nolint
remotes::install_cran(pkg_name, upgrade = TRUE)
if (!package_installed(pkg_name)) {
stopc(
"Error installing package ", pkg_name, " or one of its dependencies."
)
}
}
package_installed <- function(pkg_name) {
path <- system.file("DESCRIPTION", package = pkg_name)
file.exists(path)
}
use_tic(
wizard = interactive(),
linux = "ghactions",
mac = "ghactions",
windows = "ghactions",
deploy = "ghactions",
matrix = "none",
private_key_name = "TIC_DEPLOY_KEY",
quiet = FALSE
)
install.packages("remotes")
remotes::install_github("ropensci/tic")
usethis::browse_github_pat()
usethis::create_github_token()
use_tic()
usethis::edit_r_environ()
GITHUB_PAT=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
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
GITHUB_PAT=you_token_key_here
GITHUB_PAT=MA_data
