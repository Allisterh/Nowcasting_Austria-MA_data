VAR_est <- VAR(y = Data_train[,1:3], p = lag)
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est,Data_test[,1:3])
Yselect <- VARselect(Data_train[,1:3],lag.max = 12)      #lag 10         # computes information criteria
lag <- Yselect$selection[1]  # AiC
Yselect <- VARselect(Data_train[,1:3])      #lag 10         # computes information criteria
lag <- Yselect$selection[1]  # AiC
Yselect <- VARselect(Data_train[,1:3], lag.max = 15)      #lag 10         # computes information criteria
lag <- Yselect$selection[1]  # AiC
Yselect <- VARselect(Data_train[,1:3], lag.max = 14)      #lag 10         # computes information criteria
lag <- Yselect$selection[1]  # AiC
Yselect <- VARselect(Data_train[,1:3], lag.max = 30)      #lag 10         # computes information criteria
lag <- Yselect$selection[1]  # AiC
Yselect <- VARselect(Data_train[,1:3],lag.max = 1)      #lag 10         # computes information criteria
lag <- Yselect$selection[1]  # AiC
VAR_est <- VAR(y = Data_train[,1:3], p = lag)
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est,Data_test[,1:3])
summary(VAR_est)
VAR_est <- VAR(y = Data_train[,1:3], p = lag)
summary(VAR_est)
summary(VAR_est$env)
summary(VAR_est$model)
summary(VAR_est$print())
View(VAR_est)
Yselect <- VARselect(Data_train[,1:3],lag.max = 1)      #lag 10         # computes information criteria
lag <- Yselect$selection[1]  # AiC
VAR_est <- VAR(y = Data_train[,1:3], p = lag)
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est,Data_test[,1:3])
Yselect <- VARselect(Data_train[,1:3],ic = c("AIC"))      #lag 10         # computes information criteria
# AR(1) model
arima <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("aic")) #2,0,0 # lower RMSE
#arima <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("bic")) #1,0,0
summary(arima)
fore_arima = forecast::forecast(arima, h=12)
df_arima = as.data.frame(fore_arima)
dat_test$arima = df_arima$`Point Forecast`
View(fore_arima)
x$arima = df_arima$`Point Forecast`
xarima = df_arima$`Point Forecast`
mape(xarima)  ## 2.1%
pred <- predict(arima)
plot(forecast(arima,h=3)) # forecast 1 step ahead!!!
plot(forecast(arima,h=12)) # forecast 1 step ahead!!!
plot(forecast(arima,h=4)) # forecast 1 step ahead!!!
# AR(1) model
arima <- auto.arima(Data[,"gdp"], trace = TRUE,  ic = c("aic")) #2,0,0 # lower RMSE
#arima <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("bic")) #1,0,0
summary(arima)
plot(forecast(arima,h=4)) # forecast 1 step ahead!!!
accuracy(arima)
plot(forecast(arima,h=4)) # forecast 1 step ahead!!!
naive_mod <- naive(Data[,"gdp"], h = 12)
naive_mod <- naive(Data[,"gdp"], h = 12)
summary(naive_mod)
naive_mod <- naive(Data[,"gdp"], h = 3)
summary(naive_mod)
ses <- ses(Data[,"gdp"], h = 3)
summary(ses)
pred <- predict(arima,Data_test[,"gdp"] )
VAR_est <- VAR(y = Data_train[,1:3], p = lag)
Yselect <- VARselect(Data,ic = c("AIC"))      #lag 10         # computes information criteria
Yselect <- VARselect(Data,ic = c("AIC"))      #lag 10         # computes information criteria
lag <- Yselect$selection[1]  # AiC
Yselect <- VARselect(Data,ic = c("AIC"))      #lag 10         # computes information criteria
Yselect <- VARselect(Data_train[,1:3],ic = c("AIC"))      #lag 10         # computes information criteria
Yselect <- VARselect(Data_train[,1:3])      #lag 10         # computes information criteria
Yselect <- VARselect(Data)      #lag 10         # computes information criteria
lag <- Yselect$selection[1]  # AiC
VAR_est <- VAR(y = Data_train[,1:3], p = lag)
#arima <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("bic")) #1,0,0
summary(arima)
View(arima)
# AR(1) model
arima <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("aic")) #2,0,0 # lower RMSE
#arima <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("bic")) #1,0,0
summary(arima)
pred <- predict(arima,Data_test[,"gdp"] )
pred <- predict(arima )
plot(forecast(arima,h=3)) # forecast 1 step ahead!!!
pred <- predict(arima )
View(pred)
# AR(1) model
arima <- auto.arima(Data[,"gdp"], trace = TRUE,  ic = c("aic")) #2,0,0 # lower RMSE
#arima <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("bic")) #1,0,0
summary(arima)
pred <- predict(arima,)
View(pred)
pred <- predict(arima,n.ahead = 6)
View(pred)
pred <- predict(arima,n.ahead = 3)
# AR(1) model
arima <- auto.arima(Data[,"gdp"], trace = TRUE,  ic = c("aic")) #2,0,0 # lower RMSE
#arima <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("bic")) #1,0,0
summary(arima)
?predict
pred <- predict.Arima(arima,n.ahead = 3)
pred <- predict.ar(arima,n.ahead = 3)
pred <- predict(arima)
# AR(1) model
arimax <- auto.arima(Data[,"gdp"], trace = TRUE,  ic = c("aic")) #2,0,0 # lower RMSE
pred <- predict(arimax)
View(pred)
#arima <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("bic")) #1,0,0
summary(arima)
# AR(1) model
auto.arima(Data[,"gdp"], trace = TRUE,  ic = c("aic")) #2,0,0 # lower RMSE
pred <- predict(arimax,n.ahead = 3)
pred
#arima <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("bic")) #1,0,0
summary(arima)
betahat <- rnorm(192)
error <- rep(0,71)
for (i in 1:71) {
mod <- arima(window(betahat, start=1, end=109+i),order=c(1,0,0),include.mean=TRUE)
pre <- predict(mod,12)
error[i] <- pre$pred[12]-betahat[109+i+12]
}
mod <- arima(window(betahat, start=1, end=109+i),order=c(0,0,1),include.mean=TRUE)
for (i in 1:71) {
mod <- arima(window(betahat, start=1, end=109+i),order=c(0,0,1),include.mean=TRUE)
pre <- predict(mod,12)
error[i] <- pre$pred[12]-betahat[109+i+12]
}
betahat <- rnorm(192)
error <- rep(0,71)
for (i in 1:71) {
mod <- arima(window(betahat, start=1, end=109+i),order=c(0,0,1),include.mean=TRUE)
pre <- predict(mod,12)
error[i] <- pre$pred[12]-betahat[109+i+12]
}
# AR(1) model
arimax <- auto.arima(Data[,"gdp"], trace = TRUE,  ic = c("aic")) #2,0,0 # lower RMSE
#naive_mod <- naive(Data[,"gdp"], h = 3)
#summary(naive_mod)
cafe.test <- Arima(test, model=arimax)
#naive_mod <- naive(Data[,"gdp"], h = 3)
#summary(naive_mod)
cafe.test <- Arima(Data_test[,"gdp"], model=arimax)
# AR(1) model
arimax <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("aic")) #2,0,0 # lower RMSE
#arima <- auto.arima(Data_train[,"gdp"], trace = TRUE,  ic = c("bic")) #1,0,0
summary(arima)
#naive_mod <- naive(Data[,"gdp"], h = 3)
#summary(naive_mod)
cafe.test <- Arima(Data_test[,"gdp"], model=arimax)
summary(v)
summary(cafe.test)
#naive_mod <- naive(Data[,"gdp"], h = 3)
#summary(naive_mod)
cafe.test <- ar(Data_test[,"gdp"], model=arimax)
summary(cafe.test)
#naive_mod <- naive(Data[,"gdp"], h = 3)
#summary(naive_mod)
cafe.test <- arim(Data_test[,"gdp"], model=arimax)
#naive_mod <- naive(Data[,"gdp"], h = 3)
#summary(naive_mod)
cafe.test <- arima.sim(Data_test[,"gdp"], model=arimax)
#naive_mod <- naive(Data[,"gdp"], h = 3)
#summary(naive_mod)
cafe.test <- arima(Data_test[,"gdp"], model=arimax)
#naive_mod <- naive(Data[,"gdp"], h = 3)
#summary(naive_mod)
cafe.test <- ARIMA(Data_test[,"gdp"], model=arimax)
summary(cafe.test)
summary(cafe.test)
#naive_mod <- naive(Data[,"gdp"], h = 3)
#summary(naive_mod)
cafe.test <- Arima(Data_test[,"gdp"], model=arimax)
summary(cafe.test)
accuracy(cafe.test)
#accuracy(cafe.test)
### loo
cafe.train <- Arima(Data_train[,"gdp"], order=c(2,0,0))
cafe.train %>%
forecast(h=60) %>%
autoplot() + autolayer(test)
#accuracy(cafe.test)
### loo
cafe.train <- Arima(Data_train[,"gdp"], order=c(2,0,0))
cafe.train %>%
forecast(h=60) %>%
autoplot() + autolayer(Data_test[,"gdp"])
cafe.train %>%
forecast(h=60) %>%
autoplot() + autolayer(Data_test)
cafe.train %>%
forecast(h=60)
cafe.train %>%
forecast(h=3)
cafe.test <- Arima(Data_test[,"gdp"], model=arimax)
summary(cafe.test)
#accuracy(cafe.test)
### loo
# same as above nur mit arima order selber
cafe.train <- Arima(Data_train[,"gdp"], order=c(4,0,0))
cafe.train %>%
forecast(h=3)
cafe.test <- Arima(Data_test[,"gdp"], model=arimax)
summary(cafe.test)
#accuracy(cafe.test)
### loo
# same as above nur mit arima order selber
cafe.train <- Arima(Data_train[,"gdp"], order=c(0,0,1))
cafe.train %>%
forecast(h=3)
cafe.test <- Arima(Data_test[,"gdp"], model=arimax)
summary(cafe.test)
#accuracy(cafe.test)
### loo
# same as above nur mit arima order selber
cafe.train <- Arima(Data_train[,"gdp"], order=c(1,0,1))
cafe.train %>%
forecast(h=3)
cafe.test <- Arima(Data_test[,"gdp"], model=arimax)
summary(cafe.test)
#%>%
#autoplot() + autolayer(Data_test)
cafe.test <- Arima(Data_test[,"gdp"], model=cafe.train)
summary(cafe.test)
#accuracy(cafe.test)
### loo
# same as above nur mit arima order selber
cafe.train <- Arima(Data_train[,"gdp"], order=c(1,0,1))
cafe.test <- Arima(Data_test[,"gdp"], model=cafe.train)
#%>%
#autoplot() + autolayer(Data_test)
summary(cafe.test)
#accuracy(cafe.test)
### loo
# same as above nur mit arima order selber
cafe.train <- Arima(Data_train[,"gdp"], order=c(4,0,0))
cafe.train %>%
forecast(h=3)
cafe.test <- Arima(Data_test[,"gdp"], model=cafe.train)
#%>%
#autoplot() + autolayer(Data_test)
summary(cafe.test)
#accuracy(cafe.test)
### loo
# same as above nur mit arima order selber
cafe.train <- Arima(Data_train[,"gdp"], order=c(0,0,1))
cafe.train %>%
forecast(h=3)
cafe.test <- Arima(Data_test[,"gdp"], model=cafe.train)
summary(cafe.test)
autoplot(forecast(arimax))
autoplot(forecast(cafe.test))
autoplot(forecast(cafe.train))
pacf(Data_train[,"gdp"])
t_0 <- as.Date("2006-01-01") #Setting start date for the series
t_1 <- as.Date("2021-07-01") #Setting end date for the series
t_2 <- as.Date("2021-12-31")
Date_q <- seq.Date(t_0,t_1,by="quarter")
Date_m <- seq.Date(t_0,t_2,by="month")
bigT <- length(Date_q)
M <- 6
Data   <- matrix(NA,bigT,M)
colnames(Data)  <- c("gdp", "cci", "google","gdp_ts", "cci_ts", "google_ts")
Data <- as.data.frame(Data)
rownames(Data)  <- as.Date(Date_q)
t_0 <- as.Date("2006-01-01") #Setting start date for the series
t_1 <- as.Date("2021-07-01") #Setting end date for the series
t_2 <- as.Date("2021-12-31")
Date_q <- seq.Date(t_0,t_1,by="quarter")
Date_m <- seq.Date(t_0,t_2,by="month")
bigT <- length(Date_q)
M <- 6
Data   <- matrix(NA,bigT,M)
colnames(Data)  <- c("gdp", "cci", "google","gdp_ts", "cci_ts", "google_ts")
Data <- as.data.frame(Data)
rownames(Data)  <- as.Date(Date_q)
# abgerufen final am 11.02.2022
#Source: https://data.oecd.org/gdp/quarterly-gdp.htm#indicator-chart
gdp <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/RData/GDP_oecd.csv")[9:71,6:7]
colnames(gdp)[colnames(gdp) %in% c("TIME", "Value")] <- c("QDate", "value")
gdp <- cbind(gdp,Date_q)
#ts:
gdp_ts <- ts(gdp$value, start=c(2006,1), end = c(2021,3), frequency = 4)
Data[(Date_q%in%gdp$Date_q),1] <- gdp$value
Data$gdp_ts <- ts(Data$gdp, start=c(2006,1), end = c(2021,3), frequency = 4)
# abgerufen final am 11.02.2022
#Source: https://ec.europa.eu/info/business-economy-euro/indicators-statistics/economic-databases/business-and-consumer-surveys/download-business-and-consumer-survey-data/time-series_en#consumers
cci <- read.csv2("https://raw.githubusercontent.com/anneval/MA_data/main/RData/CCI.csv")[253:444,c(1,297)]
colnames(cci)[colnames(cci) %in% c("X", "CONS.AT.TOT.COF.BS.M")] <- c("time", "value")
cci <- cbind(cci,Date_m)
cci <- arrange(cci, Date_m)
cci$Date_q <- as.yearqtr(cci$Date_m)
cci$Date_q <- as.Date(cci$Date_q)
#cci$Date_q  <- as.character(cci$Date_m)
#cci$Date_q[CCI_mntly$Date_q == "2021 Q4"] <- "2021 Q3"
cci_qtrly <- cci %>% group_by(Date_q) %>%
summarise_all(mean)
cci_qtrly_63 <- cci_qtrly[1:63,]
Data[(Date_q%in%cci_qtrly_63$Date_q),2] <- (cci_qtrly_63$value)
Data$cci_ts <- ts(Data$cci, start=c(2006,1), end = c(2021,3), frequency = 4)
# abgerufen: daily update
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/raw/at/trendecon_sa.csv")
# transform to quarterly and then do ts:
Google_AT_daily$time <- as.Date(Google_AT_daily$time)
Google_AT_daily <- arrange(Google_AT_daily, time)
Google_AT_daily$Date_q <- as.yearqtr(Google_AT_daily$time)
Google_AT_daily$Date_q <- as.Date(Google_AT_daily$Date_q)
#Google_AT_daily$QDate  <- as.character(Google_AT_daily$QDate)
#Google_AT_daily$QDate[Google_AT_daily$QDate == "2022 Q1"] <- "2021 Q3"
#Google_AT_daily$QDate[Google_AT_daily$QDate == "2021 Q4"] <- "2021 Q3"
Google_AT_qtrly <- Google_AT_daily %>% group_by(Date_q) %>%
summarise_all(mean)
#rownames(Google_AT_qtrly)  <- as.Date(Date_q)
Google_AT_qtrly_63 <- Google_AT_qtrly[1:63,]
Data[(Date_q%in%Google_AT_qtrly_63$Date_q),3] <- (Google_AT_qtrly_63$value)
Data$google_ts <- ts(Data$google, start=c(2006,1), end = c(2021,3), frequency = 4)
adf.test(Data$gdp) # stationary
adf.test(Data$cci) # stationary
adf.test(Data$google) # not stat # test agao  after remove inlation
# not stationary since I included inflation...
adf.test(diff(Data$gdp))
adf.test(diff(Data$cci))
adf.test(diff(Data$google))
kpss.test(Data$gdp) # stationary
kpss.test(Data$cci) # stationary
kpss.test(Data$google) # stationary
pp.test(Data$gdp) # stationary
pp.test(Data$cci) # not stationary
pp.test(Data$google) # stationary
par(mfrow = c(2,2))
acf(Data$gdp)
acf(Data$cci)
acf(Data$google)
par(mfrow = c(2,2))
pacf(Data$gdp)
pacf(Data$cci)
pacf(Data$google)
acf(Data$gdp)
pacf(Data$gdp)
acf(Data$cci)
pacf(Data$cci)
pacf(Data$google)
pacf(Data$gdp)
Yselect <- VARselect(Data)      #lag 10         # computes information criteria
lag <- Yselect$selection[1]  # AiC
VAR_est <- VAR(y = Data_train[,1:3], p = lag)
VAR_est <- VAR(y = Data, p = lag)
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est)
Yselect <- VARselect(Data[,1:3])      #lag 10         # computes information criteria
lag <- Yselect$selection[1]  # AiC
VAR_est <- VAR(y = Data[,1:3], p = lag)
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est,Data_test[,1:3])
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est)
forecasts
plot(forecasts)
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est)
VAR_est <- VAR(y = Data[,1:3], p = lag)
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est)
forecasts
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est, n.ahead = 4)
VAR_est <- VAR(y = Data[,1:3], p = lag)
View(VAR_est)
VAR_est <- var(y = Data[,1:3], p = lag)
var()#summary(VAR_est$varresult$gdp)$adj.r.squared
VAR_est <- VAR(y = Data[,1:3], p = lag)
pred.var1 <- predict(VAR_est, n.ahead = 12)
library(readr)
library(readxl)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tseries)
library(forecast)
library(vars)
library(GGally)
t_0 <- as.Date("2006-01-01") #Setting start date for the series
t_1 <- as.Date("2021-07-01") #Setting end date for the series
t_2 <- as.Date("2021-12-31")
Date_q <- seq.Date(t_0,t_1,by="quarter")
Date_m <- seq.Date(t_0,t_2,by="month")
bigT <- length(Date_q)
M <- 6
Data   <- matrix(NA,bigT,M)
colnames(Data)  <- c("gdp", "cci", "google","gdp_ts", "cci_ts", "google_ts")
Data <- as.data.frame(Data)
rownames(Data)  <- as.Date(Date_q)
# abgerufen final am 11.02.2022
#Source: https://data.oecd.org/gdp/quarterly-gdp.htm#indicator-chart
gdp <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/RData/GDP_oecd.csv")[9:71,6:7]
colnames(gdp)[colnames(gdp) %in% c("TIME", "Value")] <- c("QDate", "value")
gdp <- cbind(gdp,Date_q)
#ts:
gdp_ts <- ts(gdp$value, start=c(2006,1), end = c(2021,3), frequency = 4)
Data[(Date_q%in%gdp$Date_q),1] <- gdp$value
Data$gdp_ts <- ts(Data$gdp, start=c(2006,1), end = c(2021,3), frequency = 4)
# abgerufen final am 11.02.2022
#Source: https://ec.europa.eu/info/business-economy-euro/indicators-statistics/economic-databases/business-and-consumer-surveys/download-business-and-consumer-survey-data/time-series_en#consumers
cci <- read.csv2("https://raw.githubusercontent.com/anneval/MA_data/main/RData/CCI.csv")[253:444,c(1,297)]
colnames(cci)[colnames(cci) %in% c("X", "CONS.AT.TOT.COF.BS.M")] <- c("time", "value")
cci <- cbind(cci,Date_m)
cci <- arrange(cci, Date_m)
cci$Date_q <- as.yearqtr(cci$Date_m)
cci$Date_q <- as.Date(cci$Date_q)
#cci$Date_q  <- as.character(cci$Date_m)
#cci$Date_q[CCI_mntly$Date_q == "2021 Q4"] <- "2021 Q3"
cci_qtrly <- cci %>% group_by(Date_q) %>%
summarise_all(mean)
cci_qtrly_63 <- cci_qtrly[1:63,]
Data[(Date_q%in%cci_qtrly_63$Date_q),2] <- (cci_qtrly_63$value)
Data$cci_ts <- ts(Data$cci, start=c(2006,1), end = c(2021,3), frequency = 4)
# abgerufen: daily update
Google_AT_daily <- read.csv("https://raw.githubusercontent.com/anneval/MA_data/main/raw/at/trendecon_sa.csv")
# transform to quarterly and then do ts:
Google_AT_daily$time <- as.Date(Google_AT_daily$time)
Google_AT_daily <- arrange(Google_AT_daily, time)
Google_AT_daily$Date_q <- as.yearqtr(Google_AT_daily$time)
Google_AT_daily$Date_q <- as.Date(Google_AT_daily$Date_q)
#Google_AT_daily$QDate  <- as.character(Google_AT_daily$QDate)
#Google_AT_daily$QDate[Google_AT_daily$QDate == "2022 Q1"] <- "2021 Q3"
#Google_AT_daily$QDate[Google_AT_daily$QDate == "2021 Q4"] <- "2021 Q3"
Google_AT_qtrly <- Google_AT_daily %>% group_by(Date_q) %>%
summarise_all(mean)
#rownames(Google_AT_qtrly)  <- as.Date(Date_q)
Google_AT_qtrly_63 <- Google_AT_qtrly[1:63,]
Data[(Date_q%in%Google_AT_qtrly_63$Date_q),3] <- (Google_AT_qtrly_63$value)
Data$google_ts <- ts(Data$google, start=c(2006,1), end = c(2021,3), frequency = 4)
Yselect <- VARselect(Data[,1:3])      #lag 10         # computes information criteria
lag <- Yselect$selection[1]  # AiC
VAR_est <- VAR(y = Data[,1:3], p = lag)
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est, n.ahead = 4)
Yselect <- VARselect(Data[,4:6])      #lag 10         # computes information criteria
VAR_est <- VAR(y = Data[,4:6], p = lag)
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est, n.ahead = 4)
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(Data[,1:3], n.ahead = 4)
lah
lag
lag
Yselect <- VARselect(Data[,1:3])      #lag 10         # computes information criteria
lag <- Yselect$selection[1]  # AiC
lag
VAR_est <- VAR(y = Data[,1:3], p = lag)
summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$gdp)$adj.r.squared
#summary(VAR_est$varresult$cci)$adj.r.squared
#summary(VAR_est$varresult$google)$adj.r.squared
forecasts <- predict(VAR_est)
Yselect <- VARselect(Data[,4:6])      #lag 10         # computes information criteria
lag <- Yselect$selection[1]  # AiC
lag
VAR_est <- VAR(y = Data[,4:6], p = lag)
View(Data)
VAR_est <- VAR(y = Data[,4:6], p = lag)
ic::before_deploy(
tic::before_deploy(
tic::before_deploy()
tic::before_deploy()
?vapply()
?before_deploy
tic::use_ghactions_deploy()
tic::use_ghactions_yml()
tic::use_tic_badge("ghactions")
tic::use_update_tic()
tic::gha_add_secret(<secret>, 'TIC_UPDATE')
tic::gha_add_secret(<secret>, 'TIC_UPDATE')
tic::use_tic()
step_test_ssh()
?step_test_ssh()
libary(tic)
library(tic)
step_test_ssh(url = "git@github.com", verbose = "-v")
x <- step_test_ssh(url = "git@github.com", verbose = "-v")
<TestSSH>
x <- step_test_ssh(url = "git@github.com", verbose = "-v")
View(x)
add_step(step_setup_ssh())
add_step(step_setup_ssh())
usethis::browse_github_pat()
create_github_token()
create_github_token()
browse_github_pat()
usethis::create_github_token()
usethis::edit_r_environ()
